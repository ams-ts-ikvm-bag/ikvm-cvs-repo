head	1.6;
access;
symbols;
locks; strict;
comment	@ * @;


1.6
date	2004.05.27.07.12.16;	author jfrijters;	state dead;
branches;
next	1.5;

1.5
date	2004.05.14.09.31.56;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2004.01.11.13.14.43;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2003.07.31.12.49.30;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2003.07.24.07.29.51;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2003.05.30.12.09.01;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@/*
  Copyright (C) 2003 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;

namespace OpenSystem.Java
{
	// Whenever the VM or compiler generates a helper class/method/field, it should be marked
	// with this custom attribute, so that it can be hidden from Java reflection.
	// NOTE when this attribute is applied to a class, it means that instances of this class
	// will appear to be instances of the base class.
	[AttributeUsage(AttributeTargets.All)]
	public sealed class HideFromReflectionAttribute : Attribute
	{
	}

	[Flags]
	public enum Modifiers : ushort
	{
		Public			= 0x0001,
		Private			= 0x0002,
		Protected		= 0x0004,
		Static			= 0x0008,
		Final			= 0x0010,
		Super			= 0x0020,
		Synchronized	= 0x0020,
		Volatile		= 0x0040,
		Transient		= 0x0080,
		Native			= 0x0100,
		Interface		= 0x0200,
		Abstract		= 0x0400,
		Strictfp		= 0x0800
	}

	[AttributeUsage(AttributeTargets.All)]
	public sealed class ModifiersAttribute : Attribute
	{
		private Modifiers modifiers;

		public ModifiersAttribute(Modifiers modifiers)
		{
			this.modifiers = modifiers;
		}

		public Modifiers Modifiers
		{
			get
			{
				return modifiers;
			}
		}
	}

	[AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method)]
	public sealed class ThrowsAttribute : Attribute
	{
		private string[] classes;

		// NOTE this is not CLS compliant, so maybe we should have a couple of overloads
		public ThrowsAttribute(string[] classes)
		{
			this.classes = classes;
		}

		// dotted Java class names (e.g. java.lang.Throwable)
		public string[] Classes
		{
			get
			{
				return classes;
			}
		}
	}

	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface)]
	public sealed class ImplementsAttribute : Attribute
	{
		private string[] interfaces;

		// NOTE this is not CLS compliant, so maybe we should have a couple of overloads
		public ImplementsAttribute(string[] interfaces)
		{
			this.interfaces = interfaces;
		}

		public string[] Interfaces
		{
			get
			{
				return interfaces;
			}
		}
	}

	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface)]
	public sealed class InnerClassAttribute : Attribute
	{
		private string innerClassName;
		private string outerClassName;
		private string name;
		private Modifiers modifiers;

		public InnerClassAttribute(string innerClassName, string outerClassName, string name, Modifiers modifiers)
		{
			this.innerClassName = innerClassName;
			this.outerClassName = outerClassName;
			this.name = name;
			this.modifiers = modifiers;
		}

		public string InnerClassName
		{
			get
			{
				return innerClassName;
			}
		}

		public string OuterClassName
		{
			get
			{
				return OuterClassName;
			}
		}

		// NOTE returns null for anonymous inner classes
		public string Name
		{
			get
			{
				return name;
			}
		}

		public Modifiers Modifiers
		{
			get
			{
				return modifiers;
			}
		}
	}
}
@


1.5
log
@*** empty log message ***
@
text
@@


1.4
log
@*** empty log message ***
@
text
@d74 1
a74 1
	[AttributeUsage(AttributeTargets.Constructor | AttributeTargets.Method, AllowMultiple = true)]
d77 1
a77 1
		private string className;
d79 2
a80 1
		public ThrowsAttribute(string className)
d82 1
a82 1
			this.className = className;
d85 2
a86 2
		// dotted Java class name (e.g. java.lang.Throwable)
		public string ClassName
d90 1
a90 1
				return className;
d95 1
a95 1
	[AttributeUsage(AttributeTargets.Class | AttributeTargets.Interface, AllowMultiple = true)]
d98 1
a98 1
		private Type type;
d100 2
a101 1
		public ImplementsAttribute(Type type)
d103 1
a103 1
			this.type = type;
d106 1
a106 1
		public Type Type
d110 1
a110 1
				return type;
@


1.3
log
@*** empty log message ***
@
text
@a36 5
	[AttributeUsage(AttributeTargets.Assembly)]
	public sealed class JavaAssemblyAttribute : Attribute
	{
	}

@


1.2
log
@*** empty log message ***
@
text
@d33 1
a33 1
	public class HideFromReflectionAttribute : Attribute
d38 1
a38 1
	public class JavaAssemblyAttribute : Attribute
d61 1
a61 1
	public class ModifiersAttribute : Attribute
d80 1
a80 1
	public class ThrowsAttribute : Attribute
d100 1
a100 1
	public class ImplementsAttribute : Attribute
d119 1
a119 1
	public class InnerClassAttribute : Attribute
@


1.1
log
@*** empty log message ***
@
text
@d99 19
@

