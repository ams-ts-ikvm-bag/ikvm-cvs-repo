head	1.6;
access;
symbols
	v0_36_0_14:1.5
	v0_36_0_13:1.5
	v0_36_0_9:1.5
	v0_36_0_7:1.5
	v0_36_0_5:1.5
	v0_36_0_4:1.5
	v0_36_0_3:1.5
	v0_36_0_2:1.5
	v0_36_0_1:1.5
	v0_36_0_0:1.5
	v0_36:1.5.0.2;
locks; strict;
comment	@# @;


1.6
date	2007.12.19.11.28.12;	author jfrijters;	state dead;
branches;
next	1.5;

1.5
date	2007.08.17.09.12.51;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.16.14.05.01;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2007.08.15.12.04.25;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.05.06.57.18;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.29.16.27.11;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Restructured VM <-> Library interface to take advantage of InternalsVisibleTo to remove public methods and reflection usage.
@
text
@/*
  Copyright (C) 2004, 2005, 2006, 2007 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/

package ikvm.internal;

public interface LibraryVMInterface
{
    Object newClass(Object wrapper, Object protectionDomain, Object classLoader);
    Object getWrapperFromClass(Object clazz);

    Object getWrapperFromClassLoader(Object classLoader);
    void setWrapperForClassLoader(Object classLoader, Object wrapper);

    Object box(Object val);
    Object unbox(Object val);

    Throwable mapException(Throwable t);

    cli.System.IntPtr getDirectBufferAddress(Object buffer);
    int getDirectBufferCapacity(Object buffer);

    void setProperties(cli.System.Collections.Hashtable props);

    boolean runFinalizersOnExit();

    Object newAnnotation(Object classLoader, Object definition);
    Object newAnnotationElementValue(Object classLoader, Object expectedClass, Object definition);

    Object newAssemblyClassLoader(cli.System.Reflection.Assembly assembly);

    void initProperties(java.util.Properties props);
    StackTraceElement[] getStackTrace(cli.System.Diagnostics.StackTrace stack);
}
@


1.5
log
@- Implemented Thread.dumpThreads() and Thread.getThreads().
- Added a couple more fake native libraries to VFS.
@
text
@@


1.4
log
@Refactored system properties initialization.
@
text
@d53 1
@


1.3
log
@Integrated OpenJDK java.nio package.
@
text
@d51 2
@


1.2
log
@Integrated OpenJDK's java.lang.Thread
@
text
@a39 1
    Object newDirectByteBuffer(cli.System.IntPtr address, int capacity);
@


1.1
log
@Integrated OpenJDK's java.lang.reflect.* classes (except for Array).
@
text
@a39 4
    void jniWaitUntilLastThread();
    void jniDetach();
    void setThreadGroup(Object group);

@

