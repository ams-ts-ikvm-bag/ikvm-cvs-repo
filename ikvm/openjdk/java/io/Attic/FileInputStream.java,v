head	1.12;
access;
symbols
	v8_0_5449_1:1.10
	v8_0_5449_0:1.10
	v8_0:1.10.0.2
	v7_4_5196_0:1.9
	v7_4:1.9.0.2
	v7_3:1.7.0.4
	v7_2_4630_6:1.7
	v7_2_4630_5:1.7
	v7_2_4630_4:1.7
	v7_2_4630_3:1.7
	v7_2_4630_2:1.7
	v0_46_0_4:1.5
	v7_2_4630_1:1.7
	v7_2:1.7.0.2
	v7_1_4532_2:1.6
	v7_1_4532_1:1.6
	v7_1_4532_0:1.6
	v7_1:1.6.0.4
	v7_0_4335_3:1.6
	v7_0_4335_2:1.6
	v7_0_4335_1:1.6
	v0_46_0_2:1.5
	v7_0_4335_0:1.6
	v7_0:1.6.0.2
	v0_40_0_6:1.4
	v0_40_0_5:1.4
	v0_46_0_1:1.5
	v0_46_0_0:1.5
	v0_46:1.5.0.2
	v0_36_0_14:1.1
	v0_44_0_6:1.4
	v0_44_0_5:1.4
	v0_44_0_4:1.4
	v0_44_0_3:1.4
	v0_44_0_2:1.4
	v0_42_0_7:1.4
	v0_44_0_1:1.4
	v0_44_0_0:1.4
	v0_44:1.4.0.8
	v0_42_0_6:1.4
	v0_42_0_5:1.4
	v0_42_0_4:1.4
	v0_42_0_3:1.4
	v0_42_0_2:1.4
	v0_42_0_1:1.4
	v0_42_0_0:1.4
	v0_42:1.4.0.6
	v0_40_0_3:1.4
	v0_40_0_2:1.4
	v0_40_0_1:1.4
	v0_40_0_0:1.4
	v0_40:1.4.0.4
	v0_36_0_13:1.1
	v0_38_0_1:1.4
	v0_38_0_0:1.4
	v0_38:1.4.0.2
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.2;
locks; strict;
comment	@# @;


1.12
date	2015.06.26.11.37.06;	author jfrijters;	state dead;
branches;
next	1.11;

1.11
date	2015.06.09.09.28.43;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2014.05.19.12.43.37;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2014.02.07.14.14.10;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2013.08.15.12.47.21;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2012.08.29.07.18.06;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.01.06.01.17;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.24.16.40.22;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.13.09.01.04;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.12.09.09.14;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.05.03;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.18.09.16.20;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Unforked java/io/FileInputStream.java, java/io/FileOutputStream.java and java/io/RandomAccessFile.java.
@
text
@/*
 * Copyright (c) 1994, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package java.io;

import java.nio.channels.FileChannel;
import sun.nio.ch.FileChannelImpl;


/**
 * A <code>FileInputStream</code> obtains input bytes
 * from a file in a file system. What files
 * are  available depends on the host environment.
 *
 * <p><code>FileInputStream</code> is meant for reading streams of raw bytes
 * such as image data. For reading streams of characters, consider using
 * <code>FileReader</code>.
 *
 * @@author  Arthur van Hoff
 * @@see     java.io.File
 * @@see     java.io.FileDescriptor
 * @@see     java.io.FileOutputStream
 * @@see     java.nio.file.Files#newInputStream
 * @@since   JDK1.0
 */
public
class FileInputStream extends InputStream
{
    /* File Descriptor - handle to the open file */
    private final FileDescriptor fd;

    /**
     * The path of the referenced file
     * (null if the stream is created with a file descriptor)
     */
    private final String path;

    private FileChannel channel = null;

    private final Object closeLock = new Object();
    private volatile boolean closed = false;

    /**
     * Creates a <code>FileInputStream</code> by
     * opening a connection to an actual file,
     * the file named by the path name <code>name</code>
     * in the file system.  A new <code>FileDescriptor</code>
     * object is created to represent this file
     * connection.
     * <p>
     * First, if there is a security
     * manager, its <code>checkRead</code> method
     * is called with the <code>name</code> argument
     * as its argument.
     * <p>
     * If the named file does not exist, is a directory rather than a regular
     * file, or for some other reason cannot be opened for reading then a
     * <code>FileNotFoundException</code> is thrown.
     *
     * @@param      name   the system-dependent file name.
     * @@exception  FileNotFoundException  if the file does not exist,
     *                   is a directory rather than a regular file,
     *                   or for some other reason cannot be opened for
     *                   reading.
     * @@exception  SecurityException      if a security manager exists and its
     *               <code>checkRead</code> method denies read access
     *               to the file.
     * @@see        java.lang.SecurityManager#checkRead(java.lang.String)
     */
    public FileInputStream(String name) throws FileNotFoundException {
        this(name != null ? new File(name) : null);
    }

    /**
     * Creates a <code>FileInputStream</code> by
     * opening a connection to an actual file,
     * the file named by the <code>File</code>
     * object <code>file</code> in the file system.
     * A new <code>FileDescriptor</code> object
     * is created to represent this file connection.
     * <p>
     * First, if there is a security manager,
     * its <code>checkRead</code> method  is called
     * with the path represented by the <code>file</code>
     * argument as its argument.
     * <p>
     * If the named file does not exist, is a directory rather than a regular
     * file, or for some other reason cannot be opened for reading then a
     * <code>FileNotFoundException</code> is thrown.
     *
     * @@param      file   the file to be opened for reading.
     * @@exception  FileNotFoundException  if the file does not exist,
     *                   is a directory rather than a regular file,
     *                   or for some other reason cannot be opened for
     *                   reading.
     * @@exception  SecurityException      if a security manager exists and its
     *               <code>checkRead</code> method denies read access to the file.
     * @@see        java.io.File#getPath()
     * @@see        java.lang.SecurityManager#checkRead(java.lang.String)
     */
    public FileInputStream(File file) throws FileNotFoundException {
        String name = (file != null ? file.getPath() : null);
        SecurityManager security = System.getSecurityManager();
        if (security != null) {
            security.checkRead(name);
        }
        if (name == null) {
            throw new NullPointerException();
        }
        if (file.isInvalid()) {
            throw new FileNotFoundException("Invalid file path");
        }
        fd = new FileDescriptor();
        fd.attach(this);
        path = name;
        open(name);
    }

    /**
     * Creates a <code>FileInputStream</code> by using the file descriptor
     * <code>fdObj</code>, which represents an existing connection to an
     * actual file in the file system.
     * <p>
     * If there is a security manager, its <code>checkRead</code> method is
     * called with the file descriptor <code>fdObj</code> as its argument to
     * see if it's ok to read the file descriptor. If read access is denied
     * to the file descriptor a <code>SecurityException</code> is thrown.
     * <p>
     * If <code>fdObj</code> is null then a <code>NullPointerException</code>
     * is thrown.
     * <p>
     * This constructor does not throw an exception if <code>fdObj</code>
     * is {@@link java.io.FileDescriptor#valid() invalid}.
     * However, if the methods are invoked on the resulting stream to attempt
     * I/O on the stream, an <code>IOException</code> is thrown.
     *
     * @@param      fdObj   the file descriptor to be opened for reading.
     * @@throws     SecurityException      if a security manager exists and its
     *                 <code>checkRead</code> method denies read access to the
     *                 file descriptor.
     * @@see        SecurityManager#checkRead(java.io.FileDescriptor)
     */
    public FileInputStream(FileDescriptor fdObj) {
        SecurityManager security = System.getSecurityManager();
        if (fdObj == null) {
            throw new NullPointerException();
        }
        if (security != null) {
            security.checkRead(fdObj);
        }
        fd = fdObj;
        path = null;

        /*
         * FileDescriptor is being shared by streams.
         * Register this stream with FileDescriptor tracker.
         */
        fd.attach(this);
    }

    /**
     * Opens the specified file for reading.
     * @@param name the name of the file
     */
    private void open(String name) throws FileNotFoundException
    {
        fd.openReadOnly(name);
    }

    /**
     * Reads a byte of data from this input stream. This method blocks
     * if no input is yet available.
     *
     * @@return     the next byte of data, or <code>-1</code> if the end of the
     *             file is reached.
     * @@exception  IOException  if an I/O error occurs.
     */
    public int read() throws IOException
    {
        return fd.read();
    }

    /**
     * Reads a subarray as a sequence of bytes.
     * @@param b the data to be written
     * @@param off the start offset in the data
     * @@param len the number of bytes that are written
     * @@exception IOException If an I/O error has occurred.
     */
    private int readBytes(byte b[], int off, int len) throws IOException
    {
        return fd.readBytes(b, off, len);
    }

    /**
     * Reads up to <code>b.length</code> bytes of data from this input
     * stream into an array of bytes. This method blocks until some input
     * is available.
     *
     * @@param      b   the buffer into which the data is read.
     * @@return     the total number of bytes read into the buffer, or
     *             <code>-1</code> if there is no more data because the end of
     *             the file has been reached.
     * @@exception  IOException  if an I/O error occurs.
     */
    public int read(byte b[]) throws IOException {
        return readBytes(b, 0, b.length);
    }

    /**
     * Reads up to <code>len</code> bytes of data from this input stream
     * into an array of bytes. If <code>len</code> is not zero, the method
     * blocks until some input is available; otherwise, no
     * bytes are read and <code>0</code> is returned.
     *
     * @@param      b     the buffer into which the data is read.
     * @@param      off   the start offset in the destination array <code>b</code>
     * @@param      len   the maximum number of bytes read.
     * @@return     the total number of bytes read into the buffer, or
     *             <code>-1</code> if there is no more data because the end of
     *             the file has been reached.
     * @@exception  NullPointerException If <code>b</code> is <code>null</code>.
     * @@exception  IndexOutOfBoundsException If <code>off</code> is negative,
     * <code>len</code> is negative, or <code>len</code> is greater than
     * <code>b.length - off</code>
     * @@exception  IOException  if an I/O error occurs.
     */
    public int read(byte b[], int off, int len) throws IOException {
        return readBytes(b, off, len);
    }

    /**
     * Skips over and discards <code>n</code> bytes of data from the
     * input stream.
     *
     * <p>The <code>skip</code> method may, for a variety of
     * reasons, end up skipping over some smaller number of bytes,
     * possibly <code>0</code>. If <code>n</code> is negative, the method
     * will try to skip backwards. In case the backing file does not support
     * backward skip at its current position, an <code>IOException</code> is
     * thrown. The actual number of bytes skipped is returned. If it skips
     * forwards, it returns a positive value. If it skips backwards, it
     * returns a negative value.
     *
     * <p>This method may skip more bytes than what are remaining in the
     * backing file. This produces no exception and the number of bytes skipped
     * may include some number of bytes that were beyond the EOF of the
     * backing file. Attempting to read from the stream after skipping past
     * the end will result in -1 indicating the end of the file.
     *
     * @@param      n   the number of bytes to be skipped.
     * @@return     the actual number of bytes skipped.
     * @@exception  IOException  if n is negative, if the stream does not
     *             support seek, or if an I/O error occurs.
     */
    public long skip(long n) throws IOException
    {
        return fd.skip(n);
    }

    /**
     * Returns an estimate of the number of remaining bytes that can be read (or
     * skipped over) from this input stream without blocking by the next
     * invocation of a method for this input stream. Returns 0 when the file
     * position is beyond EOF. The next invocation might be the same thread
     * or another thread. A single read or skip of this many bytes will not
     * block, but may read or skip fewer bytes.
     *
     * <p> In some cases, a non-blocking read (or skip) may appear to be
     * blocked when it is merely slow, for example when reading large
     * files over slow networks.
     *
     * @@return     an estimate of the number of remaining bytes that can be read
     *             (or skipped over) from this input stream without blocking.
     * @@exception  IOException  if this file input stream has been closed by calling
     *             {@@code close} or an I/O error occurs.
     */
    public int available() throws IOException
    {
        return fd.available();
    }

    /**
     * Closes this file input stream and releases any system resources
     * associated with the stream.
     *
     * <p> If this stream has an associated channel then the channel is closed
     * as well.
     *
     * @@exception  IOException  if an I/O error occurs.
     *
     * @@revised 1.4
     * @@spec JSR-51
     */
    public void close() throws IOException {
        synchronized (closeLock) {
            if (closed) {
                return;
            }
            closed = true;
        }
        if (channel != null) {
           channel.close();
        }

        fd.closeAll(new Closeable() {
            public void close() throws IOException {
               close0();
           }
        });
    }

    /**
     * Returns the <code>FileDescriptor</code>
     * object  that represents the connection to
     * the actual file in the file system being
     * used by this <code>FileInputStream</code>.
     *
     * @@return     the file descriptor object associated with this stream.
     * @@exception  IOException  if an I/O error occurs.
     * @@see        java.io.FileDescriptor
     */
    public final FileDescriptor getFD() throws IOException {
        if (fd != null) {
            return fd;
        }
        throw new IOException();
    }

    /**
     * Returns the unique {@@link java.nio.channels.FileChannel FileChannel}
     * object associated with this file input stream.
     *
     * <p> The initial {@@link java.nio.channels.FileChannel#position()
     * position} of the returned channel will be equal to the
     * number of bytes read from the file so far.  Reading bytes from this
     * stream will increment the channel's position.  Changing the channel's
     * position, either explicitly or by reading, will change this stream's
     * file position.
     *
     * @@return  the file channel associated with this file input stream
     *
     * @@since 1.4
     * @@spec JSR-51
     */
    public FileChannel getChannel() {
        synchronized (this) {
            if (channel == null) {
                channel = FileChannelImpl.open(fd, path, true, false, this);
            }
            return channel;
        }
    }

    private void close0() throws IOException
    {
        fd.close();
    }

    /**
     * Ensures that the <code>close</code> method of this file input stream is
     * called when there are no more references to it.
     *
     * @@exception  IOException  if an I/O error occurs.
     * @@see        java.io.FileInputStream#close()
     */
    protected void finalize() throws IOException {
        if ((fd != null) &&  (fd != FileDescriptor.in)) {
            /* if fd is shared, the references in FileDescriptor
             * will ensure that finalizer is only called when
             * safe to do so. All references using the fd have
             * become unreachable. We can call close()
             */
            close();
        }
    }
}
@


1.11
log
@Integrated OpenJDK 8u45.
@
text
@@


1.10
log
@First part of OpenJDK 8 integration.
@
text
@d54 6
d137 1
d174 1
d371 1
a371 1
                channel = FileChannelImpl.open(fd, true, false, this);
@


1.9
log
@Merged OpenJDK 7u40 b34, except for java.lang.invoke and sun.invoke packages.
@
text
@a29 1
import sun.misc.IoTrace;
a53 3
    /* The path of the referenced file (null if the stream is created with a file descriptor) */
    private final String path;

a58 10
    private static final ThreadLocal<Boolean> runningFinalize =
        new ThreadLocal<>();

    private static boolean isRunningFinalize() {
        Boolean val;
        if ((val = runningFinalize.get()) != null)
            return val.booleanValue();
        return false;
    }

d130 1
a130 2
        fd.incrementAndGetUseCount();
        this.path = name;
a166 1
        path = null;
d170 1
a170 2
         * Ensure that it's GC'ed only when all the streams/channels are done
         * using it.
d172 1
a172 1
        fd.incrementAndGetUseCount();
d192 3
a194 9
    public int read() throws IOException {
        Object traceContext = IoTrace.fileReadBegin(path);
        int b = 0;
        try {
            b = fd.read();
        } finally {
            IoTrace.fileReadEnd(traceContext, b == -1 ? 0 : 1);
        }
        return b;
d221 1
a221 8
        Object traceContext = IoTrace.fileReadBegin(path);
        int bytesRead = 0;
        try {
            bytesRead = readBytes(b, 0, b.length);
        } finally {
            IoTrace.fileReadEnd(traceContext, bytesRead == -1 ? 0 : bytesRead);
        }
        return bytesRead;
d243 1
a243 8
        Object traceContext = IoTrace.fileReadBegin(path);
        int bytesRead = 0;
        try {
            bytesRead = readBytes(b, off, len);
        } finally {
            IoTrace.fileReadEnd(traceContext, bytesRead == -1 ? 0 : bytesRead);
        }
        return bytesRead;
d252 6
a257 4
     * possibly <code>0</code>. If <code>n</code> is negative, an
     * <code>IOException</code> is thrown, even though the <code>skip</code>
     * method of the {@@link InputStream} superclass does nothing in this case.
     * The actual number of bytes skipped is returned.
d259 2
a260 2
     * <p>This method may skip more bytes than are remaining in the backing
     * file. This produces no exception and the number of bytes skipped
d278 4
a281 3
     * invocation of a method for this input stream. The next invocation might be
     * the same thread or another thread.  A single read or skip of this
     * many bytes will not block, but may read or skip fewer bytes.
a316 6
            /*
             * Decrement the FD use count associated with the channel
             * The use count is incremented whenever a new channel
             * is obtained from this stream.
             */
           fd.decrementAndGetUseCount();
d320 5
a324 12
        /*
         * Decrement the FD use count associated with this stream
         */
        int useCount = fd.decrementAndGetUseCount();

        /*
         * If FileDescriptor is still in use by another stream, the finalizer
         * will not close it.
         */
        if ((useCount <= 0) || !isRunningFinalize()) {
            close0();
        }
d338 3
a340 1
        if (fd != null) return fd;
d349 1
a349 1
     * </code>position<code>} of the returned channel will be equal to the
d363 1
a363 8
                channel = FileChannelImpl.open(fd, path, true, false, this);

                /*
                 * Increment fd's use count. Invoking the channel's close()
                 * method will result in decrementing the use count set for
                 * the channel.
                 */
                fd.incrementAndGetUseCount();
d383 4
a386 5

            /*
             * Finalizer should not release the FileDescriptor if another
             * stream is still using it. If the user directly invokes
             * close() then the FileDescriptor is also released.
d388 1
a388 6
            runningFinalize.set(Boolean.TRUE);
            try {
                close();
            } finally {
                runningFinalize.set(Boolean.FALSE);
            }
@


1.8
log
@Merged IoTrace hooks.
@
text
@a139 1
        /*
a142 1
        */
@


1.7
log
@Updated copyright year.
@
text
@d2 1
a2 1
 * Copyright (c) 1994, 2012, Oracle and/or its affiliates. All rights reserved.
d30 1
d55 3
d140 5
d147 1
d184 1
d211 9
a219 3
    public int read() throws IOException
    {
        return fd.read();
d246 8
a253 1
        return readBytes(b, 0, b.length);
d275 8
a282 1
        return readBytes(b, off, len);
d410 1
a410 1
                channel = FileChannelImpl.open(fd, true, false, this);
@


1.6
log
@Updated forked java.io classes (except FilePermission) to OpenJDK 7.
@
text
@d2 1
a2 1
 * Copyright (c) 1994, 2011, Oracle and/or its affiliates. All rights reserved.
@


1.5
log
@Integrated OpenJDK 6 b21.
@
text
@d2 1
a2 1
 * Copyright (c) 1994, 2007, Oracle and/or its affiliates. All rights reserved.
d45 1
d52 1
a52 1
    private FileDescriptor fd;
d56 1
a56 1
    private Object closeLock = new Object();
d59 2
a60 2
    private static ThreadLocal<Boolean> runningFinalize =
                                new ThreadLocal<Boolean>();
d153 5
d405 1
a405 1
        if ((fd != null) &&  (fd != fd.in)) {
@


1.4
log
@Integrated OpenJDK 6 b10.
@
text
@d2 1
a2 1
 * Copyright 1994-2007 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.3
log
@Merged OpenJDK 6 b10 whitespace and comment changes.
@
text
@d136 1
@


1.2
log
@Converted tabs to spaces.
@
text
@a41 1
 * @@version 1.77, 05/05/07
d54 1
a54 1
 
d60 2
a61 2
    
    private static boolean isRunningFinalize() { 
a150 5
     * <p>
     * This constructor does not throw an exception if <code>fdObj</code>
     * is {link java.io.FileDescriptor#valid() invalid}.
     * However, if the methods are invoked on the resulting stream to attempt
     * I/O on the stream, an <code>IOException</code> is thrown.   
d238 2
a239 2
     * @@exception  IndexOutOfBoundsException If <code>off</code> is negative, 
     * <code>len</code> is negative, or <code>len</code> is greater than 
d318 1
a318 1
             * is obtained from this stream. 
d323 1
a323 1
           
d326 1
a326 1
         */ 
d331 1
a331 1
         * will not close it. 
d335 1
a335 1
        } 
d374 1
a374 1
                /* 
d378 1
a378 1
                 */ 
@


1.1
log
@Integrated OpenJDK's java.io.FileDescriptor, FileInputStream, FileOutputStream & RandomAccessFile.
@
text
@d45 1
a45 1
 * @@see	    java.io.FileOutputStream
d60 1
a60 1
				new ThreadLocal<Boolean>();
d63 4
a66 4
	Boolean val;
	if ((val = runningFinalize.get()) != null)
	    return val.booleanValue();
	return false;
d128 5
a132 5
	String name = (file != null ? file.getPath() : null);
	SecurityManager security = System.getSecurityManager();
	if (security != null) {
	    security.checkRead(name);
	}
d136 2
a137 2
	fd = new FileDescriptor();
	open(name);
d165 15
a179 15
	SecurityManager security = System.getSecurityManager();
	if (fdObj == null) {
	    throw new NullPointerException();
	}
	if (security != null) {
	    security.checkRead(fdObj);
	}
	fd = fdObj;

	/*
	 * FileDescriptor is being shared by streams.
	 * Ensure that it's GC'ed only when all the streams/channels are done
	 * using it.
	 */
	fd.incrementAndGetUseCount();
d188 1
a188 1
	fd.openReadOnly(name);
d201 1
a201 1
	return fd.read();
d213 1
a213 1
	return fd.readBytes(b, off, len);
d228 1
a228 1
	return readBytes(b, 0, b.length);
d250 1
a250 1
	return readBytes(b, off, len);
d273 1
a273 1
     * 		   support seek, or if an I/O error occurs.
d277 1
a277 1
	return fd.skip(n);
d298 1
a298 1
	return fd.available();
d314 27
a340 27
	synchronized (closeLock) {
	    if (closed) {
		return;
	    }
	    closed = true;
	}
   	if (channel != null) {
	    /*
	     * Decrement the FD use count associated with the channel
	     * The use count is incremented whenever a new channel
	     * is obtained from this stream. 
	     */
	   fd.decrementAndGetUseCount();
	   channel.close();
	}
	   
	/*
	 * Decrement the FD use count associated with this stream
	 */ 
	int useCount = fd.decrementAndGetUseCount();

	/*
	 * If FileDescriptor is still in use by another stream, the finalizer
	 * will not close it. 
	 */
	if ((useCount <= 0) || !isRunningFinalize()) {
	    close0();
d355 2
a356 2
	if (fd != null) return fd;
	throw new IOException();
d376 13
a388 13
	synchronized (this) {
	    if (channel == null) {
		channel = FileChannelImpl.open(fd, true, false, this);

	        /* 
		 * Increment fd's use count. Invoking the channel's close()
		 * method will result in decrementing the use count set for
		 * the channel.
		 */ 
		fd.incrementAndGetUseCount();
	    }
	    return channel;
	}
d393 1
a393 1
	fd.close();
d404 1
a404 1
	if ((fd != null) &&  (fd != fd.in)) {
d406 5
a410 5
	    /*
	     * Finalizer should not release the FileDescriptor if another
	     * stream is still using it. If the user directly invokes
	     * close() then the FileDescriptor is also released.
	     */
d412 6
a417 6
	    try {
	    	close();
	    } finally {
		runningFinalize.set(Boolean.FALSE);
	    }
	}
@

