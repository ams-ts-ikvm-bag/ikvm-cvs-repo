head	1.9;
access;
symbols
	v8_1_5717_0:1.9
	v8_1:1.9.0.4
	v8_0_5449_1:1.9
	v8_0_5449_0:1.9
	v8_0:1.9.0.2
	v7_4_5196_0:1.8
	v7_4:1.8.0.10
	v7_3:1.8.0.8
	v7_2_4630_6:1.8
	v7_2_4630_5:1.8
	v7_2_4630_4:1.8
	v7_2_4630_3:1.8
	v7_2_4630_2:1.8
	v0_46_0_4:1.3
	v7_2_4630_1:1.8
	v7_2:1.8.0.6
	v7_1_4532_2:1.8
	v7_1_4532_1:1.8
	v7_1_4532_0:1.8
	v7_1:1.8.0.4
	v7_0_4335_3:1.8
	v7_0_4335_2:1.8
	v7_0_4335_1:1.8
	v0_46_0_2:1.3
	v7_0_4335_0:1.8
	v7_0:1.8.0.2
	v0_40_0_6:1.3
	v0_40_0_5:1.3
	v0_46_0_1:1.3
	v0_46_0_0:1.3
	v0_46:1.3.0.10
	v0_36_0_14:1.2
	v0_44_0_6:1.3
	v0_44_0_5:1.3
	v0_44_0_4:1.3
	v0_44_0_3:1.3
	v0_44_0_2:1.3
	v0_42_0_7:1.3
	v0_44_0_1:1.3
	v0_44_0_0:1.3
	v0_44:1.3.0.8
	v0_42_0_6:1.3
	v0_42_0_5:1.3
	v0_42_0_4:1.3
	v0_42_0_3:1.3
	v0_42_0_2:1.3
	v0_42_0_1:1.3
	v0_42_0_0:1.3
	v0_42:1.3.0.6
	v0_40_0_3:1.3
	v0_40_0_2:1.3
	v0_40_0_1:1.3
	v0_40_0_0:1.3
	v0_40:1.3.0.4
	v0_36_0_13:1.2
	v0_38_0_1:1.3
	v0_38_0_0:1.3
	v0_38:1.3.0.2
	v0_36_0_9:1.2
	v0_36_0_7:1.2
	v0_36_0_5:1.2
	v0_36_0_4:1.2
	v0_36_0_3:1.2
	v0_36_0_2:1.2
	v0_36_0_1:1.2
	v0_36_0_0:1.2
	v0_36:1.2.0.2;
locks; strict;
comment	@# @;


1.9
date	2014.05.19.12.43.40;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.05.07.25.12;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.05.06.56.12;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.05.06.39.43;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2011.07.05.06.25.57;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.05.06.14.35;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.11.09.05.41;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2007.08.23.05.09.51;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.16.09.53.04;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.9
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package java.util.zip;

import static java.util.zip.ZipUtils.*;
import java.nio.file.attribute.FileTime;
import java.util.Objects;
import java.util.concurrent.TimeUnit;

import static java.util.zip.ZipConstants64.*;

/**
 * This class is used to represent a ZIP file entry.
 *
 * @@author      David Connelly
 */
public
class ZipEntry implements ZipConstants, Cloneable {

    String name;        // entry name
    long time = -1;     // last modification time
    FileTime mtime;     // last modification time, from extra field data
    FileTime atime;     // last access time, from extra field data
    FileTime ctime;     // creation time, from extra field data
    long crc = -1;      // crc-32 of entry data
    long size = -1;     // uncompressed size of entry data
    long csize = -1;    // compressed size of entry data
    int method = -1;    // compression method
    int flag = 0;       // general purpose flag
    byte[] extra;       // optional extra field data for entry
    String comment;     // optional comment string for entry
    long offset;        // [IKVM] used by ZipFile
    volatile long dostime = -1;  // [IKVM] undecoded DOS time (to avoid bootstrap issue, because java.util.Date needs to read from VFS zip file)

    /**
     * Compression method for uncompressed entries.
     */
    public static final int STORED = 0;

    /**
     * Compression method for compressed (deflated) entries.
     */
    public static final int DEFLATED = 8;

    /**
     * Creates a new zip entry with the specified name.
     *
     * @@param  name
     *         The entry name
     *
     * @@throws NullPointerException if the entry name is null
     * @@throws IllegalArgumentException if the entry name is longer than
     *         0xFFFF bytes
     */
    public ZipEntry(String name) {
        Objects.requireNonNull(name, "name");
        if (name.length() > 0xFFFF) {
            throw new IllegalArgumentException("entry name too long");
        }
        this.name = name;
    }

    /**
     * Creates a new zip entry with fields taken from the specified
     * zip entry.
     *
     * @@param  e
     *         A zip Entry object
     *
     * @@throws NullPointerException if the entry object is null
     */
    public ZipEntry(ZipEntry e) {
        Objects.requireNonNull(e, "entry");
        name = e.name;
        time = e.time;
        mtime = e.mtime;
        atime = e.atime;
        ctime = e.ctime;
        crc = e.crc;
        size = e.size;
        csize = e.csize;
        method = e.method;
        flag = e.flag;
        extra = e.extra;
        comment = e.comment;
        dostime = e.dostime;
    }

    /**
     * Creates a new un-initialized zip entry
     */
    ZipEntry() {}

    /**
     * Returns the name of the entry.
     * @@return the name of the entry
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the last modification time of the entry.
     *
     * <p> If the entry is output to a ZIP file or ZIP file formatted
     * output stream the last modification time set by this method will
     * be stored into the {@@code date and time fields} of the zip file
     * entry and encoded in standard {@@code MS-DOS date and time format}.
     * The {@@link java.util.TimeZone#getDefault() default TimeZone} is
     * used to convert the epoch time to the MS-DOS data and time.
     *
     * @@param  time
     *         The last modification time of the entry in milliseconds
     *         since the epoch
     *
     * @@see #getTime()
     * @@see #getLastModifiedTime()
     */
    public void setTime(long time) {
        this.time = time;
        this.dostime = -1;
        this.mtime = null;
    }

    /**
     * Returns the last modification time of the entry.
     *
     * <p> If the entry is read from a ZIP file or ZIP file formatted
     * input stream, this is the last modification time from the {@@code
     * date and time fields} of the zip file entry. The
     * {@@link java.util.TimeZone#getDefault() default TimeZone} is used
     * to convert the standard MS-DOS formatted date and time to the
     * epoch time.
     *
     * @@return  The last modification time of the entry in milliseconds
     *          since the epoch, or -1 if not specified
     *
     * @@see #setTime(long)
     * @@see #setLastModifiedTime(FileTime)
     */
    public long getTime() {
        return getTimeImpl();
    }

    // [IKVM] we store the DOS time to avoid a bootstrap issue
    private long getTimeImpl() {
        long tmp = dostime;
        if (tmp != -1) {
            return ZipUtils.dosToJavaTime(tmp);
        }
        return time;
    }

    /**
     * Sets the last modification time of the entry.
     *
     * <p> When output to a ZIP file or ZIP file formatted output stream
     * the last modification time set by this method will be stored into
     * zip file entry's {@@code date and time fields} in {@@code standard
     * MS-DOS date and time format}), and the extended timestamp fields
     * in {@@code optional extra data} in UTC time.
     *
     * @@param  time
     *         The last modification time of the entry
     * @@return This zip entry
     *
     * @@throws NullPointerException if the {@@code time} is null
     *
     * @@see #getLastModifiedTime()
     * @@since 1.8
     */
    public ZipEntry setLastModifiedTime(FileTime time) {
        Objects.requireNonNull(name, "time");
        this.mtime = time;
        this.time = time.to(TimeUnit.MILLISECONDS);
        this.dostime = -1;
        return this;
    }

    /**
     * Returns the last modification time of the entry.
     *
     * <p> If the entry is read from a ZIP file or ZIP file formatted
     * input stream, this is the last modification time from the zip
     * file entry's {@@code optional extra data} if the extended timestamp
     * fields are present. Otherwise the last modification time is read
     * from the entry's {@@code date and time fields}, the {@@link
     * java.util.TimeZone#getDefault() default TimeZone} is used to convert
     * the standard MS-DOS formatted date and time to the epoch time.
     *
     * @@return The last modification time of the entry, null if not specified
     *
     * @@see #setLastModifiedTime(FileTime)
     * @@since 1.8
     */
    public FileTime getLastModifiedTime() {
        if (mtime != null)
            return mtime;
        long time = getTimeImpl();
        if (time == -1)
            return null;
        return FileTime.from(time, TimeUnit.MILLISECONDS);
    }

    /**
     * Sets the last access time of the entry.
     *
     * <p> If set, the last access time will be stored into the extended
     * timestamp fields of entry's {@@code optional extra data}, when output
     * to a ZIP file or ZIP file formatted stream.
     *
     * @@param  time
     *         The last access time of the entry
     * @@return This zip entry
     *
     * @@throws NullPointerException if the {@@code time} is null
     *
     * @@see #getLastAccessTime()
     * @@since 1.8
     */
    public ZipEntry setLastAccessTime(FileTime time) {
        Objects.requireNonNull(name, "time");
        this.atime = time;
        return this;
    }

    /**
     * Returns the last access time of the entry.
     *
     * <p> The last access time is from the extended timestamp fields
     * of entry's {@@code optional extra data} when read from a ZIP file
     * or ZIP file formatted stream.
     *
     * @@return The last access time of the entry, null if not specified

     * @@see #setLastAccessTime(FileTime)
     * @@since 1.8
     */
    public FileTime getLastAccessTime() {
        return atime;
    }

    /**
     * Sets the creation time of the entry.
     *
     * <p> If set, the creation time will be stored into the extended
     * timestamp fields of entry's {@@code optional extra data}, when
     * output to a ZIP file or ZIP file formatted stream.
     *
     * @@param  time
     *         The creation time of the entry
     * @@return This zip entry
     *
     * @@throws NullPointerException if the {@@code time} is null
     *
     * @@see #getCreationTime()
     * @@since 1.8
     */
    public ZipEntry setCreationTime(FileTime time) {
        Objects.requireNonNull(name, "time");
        this.ctime = time;
        return this;
    }

    /**
     * Returns the creation time of the entry.
     *
     * <p> The creation time is from the extended timestamp fields of
     * entry's {@@code optional extra data} when read from a ZIP file
     * or ZIP file formatted stream.
     *
     * @@return the creation time of the entry, null if not specified
     * @@see #setCreationTime(FileTime)
     * @@since 1.8
     */
    public FileTime getCreationTime() {
        return ctime;
    }

    /**
     * Sets the uncompressed size of the entry data.
     *
     * @@param size the uncompressed size in bytes
     *
     * @@throws IllegalArgumentException if the specified size is less
     *         than 0, is greater than 0xFFFFFFFF when
     *         <a href="package-summary.html#zip64">ZIP64 format</a> is not supported,
     *         or is less than 0 when ZIP64 is supported
     * @@see #getSize()
     */
    public void setSize(long size) {
        if (size < 0) {
            throw new IllegalArgumentException("invalid entry size");
        }
        this.size = size;
    }

    /**
     * Returns the uncompressed size of the entry data.
     *
     * @@return the uncompressed size of the entry data, or -1 if not known
     * @@see #setSize(long)
     */
    public long getSize() {
        return size;
    }

    /**
     * Returns the size of the compressed entry data.
     *
     * <p> In the case of a stored entry, the compressed size will be the same
     * as the uncompressed size of the entry.
     *
     * @@return the size of the compressed entry data, or -1 if not known
     * @@see #setCompressedSize(long)
     */
    public long getCompressedSize() {
        return csize;
    }

    /**
     * Sets the size of the compressed entry data.
     *
     * @@param csize the compressed size to set to
     *
     * @@see #getCompressedSize()
     */
    public void setCompressedSize(long csize) {
        this.csize = csize;
    }

    /**
     * Sets the CRC-32 checksum of the uncompressed entry data.
     *
     * @@param crc the CRC-32 value
     *
     * @@throws IllegalArgumentException if the specified CRC-32 value is
     *         less than 0 or greater than 0xFFFFFFFF
     * @@see #getCrc()
     */
    public void setCrc(long crc) {
        if (crc < 0 || crc > 0xFFFFFFFFL) {
            throw new IllegalArgumentException("invalid entry crc-32");
        }
        this.crc = crc;
    }

    /**
     * Returns the CRC-32 checksum of the uncompressed entry data.
     *
     * @@return the CRC-32 checksum of the uncompressed entry data, or -1 if
     * not known
     *
     * @@see #setCrc(long)
     */
    public long getCrc() {
        return crc;
    }

    /**
     * Sets the compression method for the entry.
     *
     * @@param method the compression method, either STORED or DEFLATED
     *
     * @@throws  IllegalArgumentException if the specified compression
     *          method is invalid
     * @@see #getMethod()
     */
    public void setMethod(int method) {
        if (method != STORED && method != DEFLATED) {
            throw new IllegalArgumentException("invalid compression method");
        }
        this.method = method;
    }

    /**
     * Returns the compression method of the entry.
     *
     * @@return the compression method of the entry, or -1 if not specified
     * @@see #setMethod(int)
     */
    public int getMethod() {
        return method;
    }

    /**
     * Sets the optional extra field data for the entry.
     *
     * <p> Invoking this method may change this entry's last modification
     * time, last access time and creation time, if the {@@code extra} field
     * data includes the extensible timestamp fields, such as {@@code NTFS tag
     * 0x0001} or {@@code Info-ZIP Extended Timestamp}, as specified in
     * <a href="http://www.info-zip.org/doc/appnote-19970311-iz.zip">Info-ZIP
     * Application Note 970311</a>.
     *
     * @@param  extra
     *         The extra field data bytes
     *
     * @@throws IllegalArgumentException if the length of the specified
     *         extra field data is greater than 0xFFFF bytes
     *
     * @@see #getExtra()
     */
    public void setExtra(byte[] extra) {
        setExtra0(extra, false);
    }

    /**
     * Sets the optional extra field data for the entry.
     *
     * @@param extra
     *        the extra field data bytes
     * @@param doZIP64
     *        if true, set size and csize from ZIP64 fields if present
     */
    void setExtra0(byte[] extra, boolean doZIP64) {
        if (extra != null) {
            if (extra.length > 0xFFFF) {
                throw new IllegalArgumentException("invalid extra field length");
            }
            // extra fields are in "HeaderID(2)DataSize(2)Data... format
            int off = 0;
            int len = extra.length;
            while (off + 4 < len) {
                int tag = get16(extra, off);
                int sz = get16(extra, off + 2);
                off += 4;
                if (off + sz > len)         // invalid data
                    break;
                switch (tag) {
                case EXTID_ZIP64:
                    if (doZIP64) {
                        // LOC extra zip64 entry MUST include BOTH original
                        // and compressed file size fields.
                        // If invalid zip64 extra fields, simply skip. Even
                        // it's rare, it's possible the entry size happens to
                        // be the magic value and it "accidently" has some
                        // bytes in extra match the id.
                        if (sz >= 16) {
                            size = get64(extra, off);
                            csize = get64(extra, off + 8);
                        }
                    }
                    break;
                case EXTID_NTFS:
                    int pos = off + 4;               // reserved 4 bytes
                    if (get16(extra, pos) !=  0x0001 || get16(extra, pos + 2) != 24)
                        break;
                    mtime = winTimeToFileTime(get64(extra, pos + 4));
                    atime = winTimeToFileTime(get64(extra, pos + 12));
                    ctime = winTimeToFileTime(get64(extra, pos + 20));
                    break;
                case EXTID_EXTT:
                    int flag = Byte.toUnsignedInt(extra[off]);
                    int sz0 = 1;
                    // The CEN-header extra field contains the modification
                    // time only, or no timestamp at all. 'sz' is used to
                    // flag its presence or absence. But if mtime is present
                    // in LOC it must be present in CEN as well.
                    if ((flag & 0x1) != 0 && (sz0 + 4) <= sz) {
                        mtime = unixTimeToFileTime(get32(extra, off + sz0));
                        sz0 += 4;
                    }
                    if ((flag & 0x2) != 0 && (sz0 + 4) <= sz) {
                        atime = unixTimeToFileTime(get32(extra, off + sz0));
                        sz0 += 4;
                    }
                    if ((flag & 0x4) != 0 && (sz0 + 4) <= sz) {
                        ctime = unixTimeToFileTime(get32(extra, off + sz0));
                        sz0 += 4;
                    }
                    break;
                 default:
                }
                off += sz;
            }
        }
        this.extra = extra;
    }

    /**
     * Returns the extra field data for the entry.
     *
     * @@return the extra field data for the entry, or null if none
     *
     * @@see #setExtra(byte[])
     */
    public byte[] getExtra() {
        return extra;
    }

    /**
     * Sets the optional comment string for the entry.
     *
     * <p>ZIP entry comments have maximum length of 0xffff. If the length of the
     * specified comment string is greater than 0xFFFF bytes after encoding, only
     * the first 0xFFFF bytes are output to the ZIP file entry.
     *
     * @@param comment the comment string
     *
     * @@see #getComment()
     */
    public void setComment(String comment) {
        this.comment = comment;
    }

    /**
     * Returns the comment string for the entry.
     *
     * @@return the comment string for the entry, or null if none
     *
     * @@see #setComment(String)
     */
    public String getComment() {
        return comment;
    }

    /**
     * Returns true if this is a directory entry. A directory entry is
     * defined to be one whose name ends with a '/'.
     * @@return true if this is a directory entry
     */
    public boolean isDirectory() {
        return name.endsWith("/");
    }

    /**
     * Returns a string representation of the ZIP entry.
     */
    public String toString() {
        return getName();
    }

    /**
     * Returns the hash code value for this entry.
     */
    public int hashCode() {
        return name.hashCode();
    }

    /**
     * Returns a copy of this entry.
     */
    public Object clone() {
        try {
            ZipEntry e = (ZipEntry)super.clone();
            e.extra = (extra == null) ? null : extra.clone();
            return e;
        } catch (CloneNotSupportedException e) {
            // This should never happen, since we are Cloneable
            throw new InternalError(e);
        }
    }
}
@


1.8
log
@Updated for Java 7.
@
text
@d1 24
a24 2
/* ZipEntry.java --
   Copyright (C) 2001, 2002, 2004, 2005, 2011 Free Software Foundation, Inc.
d26 1
a26 33
This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
02110-1301 USA.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */
d28 4
d33 1
a33 3
package java.util.zip;

import java.util.Date;
d36 1
a36 4
 * This class represents a member of a zip archive.  ZipFile and
 * ZipInputStream will give you instances of this class as information
 * about the members in an archive.  On the other hand ZipOutputStream
 * needs an instance of this class to create a new member.
d38 1
a38 1
 * @@author Jochen Hoenicke 
d40 2
a41 11
public class ZipEntry implements ZipConstants, Cloneable
{
    String name;
    long time = -1;
    long crc = -1;
    long size = -1;
    long csize = -1;
    int method = -1;
    int flag;
    byte[] extra;
    String comment;
d43 14
a56 1
    long offset;             /* used by ZipFile */
d59 1
a59 1
     * Compression method.  This method doesn't compress at all.
d62 1
d64 1
a64 1
     * Compression method.  This method uses the Deflater.
d69 14
a82 12
     * Creates a zip entry with the given name.
     * @@param name the name. May include directory components separated
     * by '/'.
     *
     * @@exception NullPointerException when name is null.
     * @@exception IllegalArgumentException when name is bigger then 65535 chars.
     */
    public ZipEntry(String name)
    {
        int length = name.length();
        if (length > 65535)
            throw new IllegalArgumentException("name length is " + length);
d87 7
a93 2
     * Creates a copy of the given zip entry.
     * @@param e the entry to copy.
d95 2
a96 2
    public ZipEntry(ZipEntry e)
    {
d99 3
d109 1
d112 11
a122 2
    ZipEntry()
    {
d126 15
a140 1
     * Creates a copy of this zip entry.
d142 6
d149 14
a162 1
     * Clones the entry.
d164 9
a172 13
    public Object clone()
    {
        try
        {
            // The JCL says that the `extra' field is also copied.
            ZipEntry clone = (ZipEntry)super.clone();
            if (extra != null)
                clone.extra = (byte[])extra.clone();
            return clone;
        }
        catch (CloneNotSupportedException ex)
        {
            throw new InternalError();
d174 52
d229 14
a242 2
     * Returns the entry name.  The path components in the entry are
     * always separated by slashes ('/').  
d244 20
a263 3
    public String getName()
    {
        return name;
d267 14
a280 2
     * Sets the time of last modification of the entry.
     * @@time the time of last modification of the entry.
d282 4
a285 13
    public void setTime(long time)
    {
        Date d = new Date(time);
        if (d.getYear() < 80)
        {
            d = new Date(80, 0, 1);
        }
        this.time = ((d.getYear() - 80) << 25)
            | ((d.getMonth() + 1) << 21)
            | (d.getDate() << 16)
            | (d.getHours() << 11)
            | (d.getMinutes() << 5)
            | (d.getSeconds() >> 1);
d289 9
a297 2
     * Gets the time of last modification of the entry.
     * @@return the time of last modification of the entry, or -1 if unknown.
d299 2
a300 13
    public long getTime()
    {
        if (time == -1)
        {
            return -1;
        }
        Date d = new Date((int)(((time >> 25) & 0x7f) + 80),
                  (int)(((time >> 21) & 0x0f) - 1),
                  (int)((time >> 16) & 0x1f),
                  (int)((time >> 11) & 0x1f),
                  (int)((time >> 5) & 0x3f),
                  (int)((time << 1) & 0x3e));
        return d.getTime();
d304 14
a317 7
     * Sets the size of the uncompressed data.
     * @@exception IllegalArgumentException if size is negative.
     */
    public void setSize(long size)
    {
        if (size < 0)
            throw new IllegalArgumentException();
d322 4
a325 2
     * Gets the size of the uncompressed data.
     * @@return the size or -1 if unknown.
d327 1
a327 2
    public long getSize()
    {
d332 7
a338 1
     * Sets the size of the compressed data.
d340 2
a341 3
    public void setCompressedSize(long csize)
    {
        this.csize = csize;
d345 5
a349 2
     * Gets the size of the compressed data.
     * @@return the size or -1 if unknown.
d351 2
a352 3
    public long getCompressedSize()
    {
        return csize;
d356 12
a367 7
     * Sets the crc of the uncompressed data.
     * @@exception IllegalArgumentException if crc is not in 0..0xffffffffL
     */
    public void setCrc(long crc)
    {
        if ((crc & 0xffffffff00000000L) != 0)
            throw new IllegalArgumentException();
d372 6
a377 2
     * Gets the crc of the uncompressed data.
     * @@return the crc or -1 if unknown.
d379 1
a379 2
    public long getCrc()
    {
d384 12
a395 11
     * Sets the compression method.  Only DEFLATED and STORED are
     * supported.
     * @@exception IllegalArgumentException if method is not supported.
     * @@see ZipOutputStream#DEFLATED
     * @@see ZipOutputStream#STORED 
     */
    public void setMethod(int method)
    {
        if (method != ZipOutputStream.STORED
            && method != ZipOutputStream.DEFLATED)
            throw new IllegalArgumentException();
d400 4
a403 2
     * Gets the compression method.  
     * @@return the compression method or -1 if unknown.
d405 1
a405 2
    public int getMethod()
    {
d410 16
a425 2
     * Sets the extra data.
     * @@exception IllegalArgumentException if extra is longer than 0xffff bytes.
d427 73
a499 6
    public void setExtra(byte[] extra)
    {
        if (extra == null)
        {
            this.extra = null;
            return;
a500 2
        if (extra.length > 0xffff)
            throw new IllegalArgumentException();
d505 5
a509 2
     * Gets the extra data.
     * @@return the extra data or null if not set.
d511 1
a511 2
    public byte[] getExtra()
    {
d516 9
a524 1
     * Sets the entry comment.
d526 1
a526 2
    public void setComment(String comment)
    {
d531 5
a535 2
     * Gets the comment.
     * @@return the comment or null if not set.
d537 1
a537 2
    public String getComment()
    {
d542 3
a544 2
     * Gets true, if the entry is a directory.  This is solely
     * determined by the name, a trailing slash '/' marks a directory.  
d546 2
a547 4
    public boolean isDirectory()
    {
        int nlen = name.length();
        return nlen > 0 && name.charAt(nlen - 1) == '/';
d551 1
a551 2
     * Gets the string representation of this ZipEntry.  This is just
     * the name as returned by getName().
d553 1
a553 2
    public String toString()
    {
d558 1
a558 2
     * Gets the hashCode of this ZipEntry.  This is just the hashCode
     * of the name.  Note that the equals method isn't changed, though.
d560 1
a560 2
    public int hashCode()
    {
d563 14
@


1.7
log
@Implemented OpenJDK 7 charset support.
@
text
@d182 1
a182 1
     * @@exception IllegalArgumentException if size is not in 0..0xffffffffL
d186 1
a186 1
        if ((size & 0xffffffff00000000L) != 0)
a287 1
     * @@exception IllegalArgumentException if comment is longer than 0xffff.
a290 2
        if (comment != null && comment.length() > 0xffff / 3 && ZipOutputStream.getUTF8Length(comment) > 0xffff)
            throw new IllegalArgumentException();
@


1.6
log
@Minor optimization. Don't use setters to populate ZipEntry.
@
text
@d59 1
d102 1
@


1.5
log
@Bug fix. ZipFile.getEntry() should return a copy that doesn't reference the underlying extra byte array (note that the ZipEntry "copy" constructor does not make a copy of the extra byte array).
@
text
@d105 4
@


1.4
log
@Use long to store unsigned integers. This fixes support for files > 2GB.
@
text
@d95 1
a95 6
        this(e, e.name);
    }

    ZipEntry(ZipEntry e, String name)
    {
        this.name = name;
@


1.3
log
@Converted tabs to spaces.
@
text
@d2 1
a2 1
   Copyright (C) 2001, 2002, 2004, 2005 Free Software Foundation, Inc.
d62 1
a62 1
    int offset;             /* used by ZipFile */
@


1.2
log
@Fixed time to dos time conversion.
@
text
@d83 4
a86 4
	int length = name.length();
	if (length > 65535)
	    throw new IllegalArgumentException("name length is " + length);
	this.name = name;
d95 1
a95 1
	this(e, e.name);
d100 8
a107 8
	this.name = name;
	time = e.time;
	crc = e.crc;
	size = e.size;
	csize = e.csize;
	method = e.method;
	extra = e.extra;
	comment = e.comment;
d118 12
a129 12
	try
	{
	    // The JCL says that the `extra' field is also copied.
	    ZipEntry clone = (ZipEntry)super.clone();
	    if (extra != null)
		clone.extra = (byte[])extra.clone();
	    return clone;
	}
	catch (CloneNotSupportedException ex)
	{
	    throw new InternalError();
	}
d138 1
a138 1
	return name;
d147 11
a157 11
	Date d = new Date(time);
	if (d.getYear() < 80)
	{
	    d = new Date(80, 0, 1);
	}
	this.time = ((d.getYear() - 80) << 25)
	    | ((d.getMonth() + 1) << 21)
	    | (d.getDate() << 16)
	    | (d.getHours() << 11)
	    | (d.getMinutes() << 5)
	    | (d.getSeconds() >> 1);
d166 11
a176 11
	if (time == -1)
	{
	    return -1;
	}
	Date d = new Date((int)(((time >> 25) & 0x7f) + 80),
		  (int)(((time >> 21) & 0x0f) - 1),
		  (int)((time >> 16) & 0x1f),
		  (int)((time >> 11) & 0x1f),
		  (int)((time >> 5) & 0x3f),
		  (int)((time << 1) & 0x3e));
	return d.getTime();
d185 3
a187 3
	if ((size & 0xffffffff00000000L) != 0)
	    throw new IllegalArgumentException();
	this.size = size;
d196 1
a196 1
	return size;
d204 1
a204 1
	this.csize = csize;
d213 1
a213 1
	return csize;
d222 3
a224 3
	if ((crc & 0xffffffff00000000L) != 0)
	    throw new IllegalArgumentException();
	this.crc = crc;
d233 1
a233 1
	return crc;
d245 4
a248 4
	if (method != ZipOutputStream.STORED
	    && method != ZipOutputStream.DEFLATED)
	    throw new IllegalArgumentException();
	this.method = method;
d257 1
a257 1
	return method;
d266 8
a273 8
	if (extra == null)
	{
	    this.extra = null;
	    return;
	}
	if (extra.length > 0xffff)
	    throw new IllegalArgumentException();
	this.extra = extra;
d282 1
a282 1
	return extra;
d291 3
a293 3
	if (comment != null && comment.length() > 0xffff / 3 && ZipOutputStream.getUTF8Length(comment) > 0xffff)
	    throw new IllegalArgumentException();
	this.comment = comment;
d302 1
a302 1
	return comment;
d311 2
a312 2
	int nlen = name.length();
	return nlen > 0 && name.charAt(nlen - 1) == '/';
d321 1
a321 1
	return getName();
d330 1
a330 1
	return name.hashCode();
@


1.1
log
@- Switched GNU Classpath AWT/Swing back to version 0.95.
- Copied GNU Classpath version of java.text.Bidi into openjdk directory.
- Copied and integrated GNU Classpath's pure Java zip support with OpenJDK zip classes.
- Added GNU Classpath 0.95 compatible versions of awt\font.cs and awt\toolkit.cs.
@
text
@d148 5
a152 1
	this.time = (Math.max(80, d.getYear()) << 25)
@

