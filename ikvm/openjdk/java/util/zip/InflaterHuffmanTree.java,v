head	1.6;
access;
symbols
	v8_1_5717_0:1.6
	v8_1:1.6.0.14
	v8_0_5449_1:1.6
	v8_0_5449_0:1.6
	v8_0:1.6.0.12
	v7_4_5196_0:1.6
	v7_4:1.6.0.10
	v7_3:1.6.0.8
	v7_2_4630_6:1.6
	v7_2_4630_5:1.6
	v7_2_4630_4:1.6
	v7_2_4630_3:1.6
	v7_2_4630_2:1.6
	v0_46_0_4:1.5.2.1
	v7_2_4630_1:1.6
	v7_2:1.6.0.6
	v7_1_4532_2:1.6
	v7_1_4532_1:1.6
	v7_1_4532_0:1.6
	v7_1:1.6.0.4
	v7_0_4335_3:1.6
	v7_0_4335_2:1.6
	v7_0_4335_1:1.6
	v0_46_0_2:1.5.2.1
	v7_0_4335_0:1.6
	v7_0:1.6.0.2
	v0_40_0_6:1.3
	v0_40_0_5:1.3
	v0_46_0_1:1.5.2.1
	v0_46_0_0:1.5
	v0_46:1.5.0.2
	v0_36_0_14:1.1.2.1
	v0_44_0_6:1.3
	v0_44_0_5:1.3
	v0_44_0_4:1.3
	v0_44_0_3:1.3
	v0_44_0_2:1.3
	v0_42_0_7:1.3
	v0_44_0_1:1.3
	v0_44_0_0:1.3
	v0_44:1.3.0.8
	v0_42_0_6:1.3
	v0_42_0_5:1.3
	v0_42_0_4:1.3
	v0_42_0_3:1.3
	v0_42_0_2:1.3
	v0_42_0_1:1.3
	v0_42_0_0:1.3
	v0_42:1.3.0.6
	v0_40_0_3:1.3
	v0_40_0_2:1.3
	v0_40_0_1:1.3
	v0_40_0_0:1.3
	v0_40:1.3.0.4
	v0_36_0_13:1.1.2.1
	v0_38_0_1:1.3
	v0_38_0_0:1.3
	v0_38:1.3.0.2
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2011.03.15.06.24.12;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2010.07.13.13.12.44;	author jfrijters;	state Exp;
branches
	1.5.2.1;
next	1.4;

1.4
date	2010.07.13.13.11.33;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.19.07.24.15;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.05.39;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.16.09.53.04;	author jfrijters;	state Exp;
branches
	1.1.2.1;
next	;

1.1.2.1
date	2008.11.05.07.52.01;	author jfrijters;	state Exp;
branches;
next	;

1.5.2.1
date	2011.03.17.05.18.42;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Fix for http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48131.
@
text
@/* InflaterHuffmanTree.java --
   Copyright (C) 2001, 2004  Free Software Foundation, Inc.

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
02110-1301 USA.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

package java.util.zip;

class InflaterHuffmanTree
{
  private static final int MAX_BITLEN = 15;

  private short[] tree;

  static InflaterHuffmanTree defLitLenTree, defDistTree;

  static
  {
    try
      {
        byte[] codeLengths = new byte[288];
        int i = 0;
        while (i < 144)
          codeLengths[i++] = 8;
        while (i < 256)
          codeLengths[i++] = 9;
        while (i < 280)
          codeLengths[i++] = 7;
        while (i < 288)
          codeLengths[i++] = 8;
        defLitLenTree = new InflaterHuffmanTree(codeLengths);

        codeLengths = new byte[32];
        i = 0;
        while (i < 32)
          codeLengths[i++] = 5;
        defDistTree = new InflaterHuffmanTree(codeLengths);
      }
    catch (DataFormatException ex)
      {
        throw new InternalError
          ("InflaterHuffmanTree: static tree length illegal");
      }
  }

  /**
   * Constructs a Huffman tree from the array of code lengths.
   *
   * @@param codeLengths the array of code lengths
   */
  InflaterHuffmanTree(byte[] codeLengths) throws DataFormatException
  {
    buildTree(codeLengths);
  }

  private void buildTree(byte[] codeLengths) throws DataFormatException
  {
    int[] blCount = new int[MAX_BITLEN+1];
    int[] nextCode = new int[MAX_BITLEN+1];
    for (int i = 0; i < codeLengths.length; i++)
      {
        int bits = codeLengths[i];
        if (bits > 0)
          blCount[bits]++;
      }

    int max = 0;
    int code = 0;
    int treeSize = 512;
    for (int bits = 1; bits <= MAX_BITLEN; bits++)
      {
        nextCode[bits] = code;
        if (blCount[bits] > 0)
          max = bits;
        code += blCount[bits] << (16 - bits);
        if (bits >= 10)
          {
            /* We need an extra table for bit lengths >= 10. */
            int start = nextCode[bits] & 0x1ff80;
            int end   = code & 0x1ff80;
            treeSize += (end - start) >> (16 - bits);
          }
      }
    if (code != 65536 && max > 1)
      throw new DataFormatException("incomplete dynamic bit lengths tree");

    /* Now create and fill the extra tables from longest to shortest
     * bit len.  This way the sub trees will be aligned.
     */
    tree = new short[treeSize];
    int treePtr = 512;
    for (int bits = MAX_BITLEN; bits >= 10; bits--)
      {
        int end   = code & 0x1ff80;
        code -= blCount[bits] << (16 - bits);
        int start = code & 0x1ff80;
        for (int i = start; i < end; i += 1 << 7)
          {
            tree[DeflaterHuffman.bitReverse(i)]
              = (short) ((-treePtr << 4) | bits);
            treePtr += 1 << (bits-9);
          }
      }

    for (int i = 0; i < codeLengths.length; i++)
      {
        int bits = codeLengths[i];
        if (bits == 0)
          continue;
        code = nextCode[bits];
        int revcode = DeflaterHuffman.bitReverse(code);
        if (bits <= 9)
          {
            do
              {
                tree[revcode] = (short) ((i << 4) | bits);
                revcode += 1 << bits;
              }
            while (revcode < 512);
          }
        else
          {
            int subTree = tree[revcode & 511];
            int treeLen = 1 << (subTree & 15);
            subTree = -(subTree >> 4);
            do
              {
                tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);
                revcode += 1 << bits;
              }
            while (revcode < treeLen);
          }
        nextCode[bits] = code + (1 << (16 - bits));
      }
  }

  /**
   * Reads the next symbol from input.  The symbol is encoded using the
   * huffman tree.
   * @@param input the input source.
   * @@return the next symbol, or -1 if not enough input is available.
   */
  int getSymbol(StreamManipulator input) throws DataFormatException
  {
    int lookahead, symbol;
    if ((lookahead = input.peekBits(9)) >= 0)
      {
        if ((symbol = tree[lookahead]) >= 0)
          {
            input.dropBits(symbol & 15);
            return symbol >> 4;
          }
        int subtree = -(symbol >> 4);
        int bitlen = symbol & 15;
        if ((lookahead = input.peekBits(bitlen)) >= 0)
          {
            symbol = tree[subtree | (lookahead >> 9)];
            input.dropBits(symbol & 15);
            return symbol >> 4;
          }
        else
          {
            int bits = input.getAvailableBits();
            lookahead = input.peekBits(bits);
            symbol = tree[subtree | (lookahead >> 9)];
            if ((symbol & 15) <= bits)
              {
                input.dropBits(symbol & 15);
                return symbol >> 4;
              }
            else
              return -1;
          }
      }
    else
      {
        int bits = input.getAvailableBits();
        lookahead = input.peekBits(bits);
        symbol = tree[lookahead];
        if (symbol >= 0 && (symbol & 15) <= bits)
          {
            input.dropBits(symbol & 15);
            return symbol >> 4;
          }
        else
          return -1;
      }
  }
}
@


1.5
log
@Removed whitespace to sync up with GNU Classpath version.
@
text
@d115 1
a115 1
    if (code != 65536 && max != 1)
@


1.5.2.1
log
@Back ported fixes:
- Bug fix. BeginExceptFilterBlock() should behave like BeginCatchBlock(), not BeginFinallyBlock().
- Fix for http://gcc.gnu.org/bugzilla/show_bug.cgi?id=48131.
- Bug fix. Support loading resources from assemblies added to the boot classloader (with ikvm.runtime.Startup.addBootClassPathAssemby()).
- Type parameters should be separated by commas.
- Only the assembly name should escape the ']' characters.
- Bug fix. <Module> should not extend object.
- Bug fix. String literals that are invalid UTF-16 should not be "corrected".
- Bug fix. MaxStack returned incorrect value for tiny header methods.
- Fix. Module does not inherit members from Object.
- Align initialized data arrays.
- Align managed resources on 8 bytes.
@
text
@d115 1
a115 1
    if (code != 65536 && max > 1)
@


1.4
log
@Fix for http://gcc.gnu.org/bugzilla/show_bug.cgi?id=36560
@
text
@d43 1
a43 1
  
d50 1
a50 1
    try 
d63 1
a63 1
        
d69 1
a69 1
      } 
d86 1
a86 1
  
d135 1
a135 1
    
d158 1
a158 1
              { 
@


1.3
log
@Removed unnecessary check to fix http://gcc.gnu.org/bugzilla/show_bug.cgi?id=36560
@
text
@d98 1
d104 2
d115 2
@


1.2
log
@Converted tabs to spaces.
@
text
@a111 2
    if (code != 65536)
      throw new DataFormatException("Code lengths don't add up properly.");
@


1.1
log
@- Switched GNU Classpath AWT/Swing back to version 0.95.
- Copied GNU Classpath version of java.text.Bidi into openjdk directory.
- Copied and integrated GNU Classpath's pure Java zip support with OpenJDK zip classes.
- Added GNU Classpath 0.95 compatible versions of awt\font.cs and awt\toolkit.cs.
@
text
@d52 17
a68 17
	byte[] codeLengths = new byte[288];
	int i = 0;
	while (i < 144)
	  codeLengths[i++] = 8;
	while (i < 256)
	  codeLengths[i++] = 9;
	while (i < 280)
	  codeLengths[i++] = 7;
	while (i < 288)
	  codeLengths[i++] = 8;
	defLitLenTree = new InflaterHuffmanTree(codeLengths);
	
	codeLengths = new byte[32];
	i = 0;
	while (i < 32)
	  codeLengths[i++] = 5;
	defDistTree = new InflaterHuffmanTree(codeLengths);
d72 2
a73 2
	throw new InternalError
	  ("InflaterHuffmanTree: static tree length illegal");
d93 3
a95 3
	int bits = codeLengths[i];
	if (bits > 0)
	  blCount[bits]++;
d102 9
a110 9
	nextCode[bits] = code;
	code += blCount[bits] << (16 - bits);
	if (bits >= 10)
	  {
	    /* We need an extra table for bit lengths >= 10. */
	    int start = nextCode[bits] & 0x1ff80;
	    int end   = code & 0x1ff80;
	    treeSize += (end - start) >> (16 - bits);
	  }
d122 9
a130 9
	int end   = code & 0x1ff80;
	code -= blCount[bits] << (16 - bits);
	int start = code & 0x1ff80;
	for (int i = start; i < end; i += 1 << 7)
	  {
	    tree[DeflaterHuffman.bitReverse(i)]
	      = (short) ((-treePtr << 4) | bits);
	    treePtr += 1 << (bits-9);
	  }
d135 27
a161 27
	int bits = codeLengths[i];
	if (bits == 0)
	  continue;
	code = nextCode[bits];
	int revcode = DeflaterHuffman.bitReverse(code);
	if (bits <= 9)
	  {
	    do
	      {
		tree[revcode] = (short) ((i << 4) | bits);
		revcode += 1 << bits;
	      }
	    while (revcode < 512);
	  }
	else
	  {
	    int subTree = tree[revcode & 511];
	    int treeLen = 1 << (subTree & 15);
	    subTree = -(subTree >> 4);
	    do
	      { 
		tree[subTree | (revcode >> 9)] = (short) ((i << 4) | bits);
		revcode += 1 << bits;
	      }
	    while (revcode < treeLen);
	  }
	nextCode[bits] = code + (1 << (16 - bits));
d176 26
a201 26
	if ((symbol = tree[lookahead]) >= 0)
	  {
	    input.dropBits(symbol & 15);
	    return symbol >> 4;
	  }
	int subtree = -(symbol >> 4);
	int bitlen = symbol & 15;
	if ((lookahead = input.peekBits(bitlen)) >= 0)
	  {
	    symbol = tree[subtree | (lookahead >> 9)];
	    input.dropBits(symbol & 15);
	    return symbol >> 4;
	  }
	else
	  {
	    int bits = input.getAvailableBits();
	    lookahead = input.peekBits(bits);
	    symbol = tree[subtree | (lookahead >> 9)];
	    if ((symbol & 15) <= bits)
	      {
		input.dropBits(symbol & 15);
		return symbol >> 4;
	      }
	    else
	      return -1;
	  }
d205 10
a214 10
	int bits = input.getAvailableBits();
	lookahead = input.peekBits(bits);
	symbol = tree[lookahead];
	if (symbol >= 0 && (symbol & 15) <= bits)
	  {
	    input.dropBits(symbol & 15);
	    return symbol >> 4;
	  }
	else
	  return -1;
@


1.1.2.1
log
@Back ported various fixes:
- Changed version to 0.36.0.13.
- Fixed ikvmc not to open the key file for write access.
- Added more efficient float/double to/from int/long bits converters.
- Fixed libikvm-native.so build to include reference to gmodule-2.0 library.
- Fixed ikvmc not to open the key file for write access.
- Fixed Graphics2D.rotate() to convert rotation angle from radians (Java) to degrees (.NET).
- Applied awt patch #1979656 by Daniel Wilson.
- Fixed three String bugs found by OpenJDK string tests.
- Fixed ldc <class> where <class> is a ghost array.
- Fixed bug in instanceof <class> where <class> is a Serializable[].
- Removed incorrect DataFormatException thrown in java.util.zip.InflaterHuffmanTree.
- Fixed #2001802 contributed by Andy Malakov.
- Fixed #2001799.
- Fixed #2006953.
- Made finalize() and clone() methods in cli.System.Object and cli.System.Exception final.
@
text
@d112 2
@


