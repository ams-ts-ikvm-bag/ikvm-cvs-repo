head	1.7;
access;
symbols
	v8_1_5717_0:1.7
	v8_1:1.7.0.4
	v8_0_5449_1:1.7
	v8_0_5449_0:1.7
	v8_0:1.7.0.2
	v7_4_5196_0:1.4
	v7_4:1.4.0.10
	v7_3:1.4.0.8
	v7_2_4630_6:1.4
	v7_2_4630_5:1.4
	v7_2_4630_4:1.4
	v7_2_4630_3:1.4
	v7_2_4630_2:1.4
	v0_46_0_4:1.3
	v7_2_4630_1:1.4
	v7_2:1.4.0.6
	v7_1_4532_2:1.4
	v7_1_4532_1:1.4
	v7_1_4532_0:1.4
	v7_1:1.4.0.4
	v7_0_4335_3:1.4
	v7_0_4335_2:1.4
	v7_0_4335_1:1.4
	v0_46_0_2:1.3
	v7_0_4335_0:1.4
	v7_0:1.4.0.2
	v0_40_0_6:1.2
	v0_40_0_5:1.2
	v0_46_0_1:1.3
	v0_46_0_0:1.3
	v0_46:1.3.0.2
	v0_36_0_14:1.1
	v0_44_0_6:1.2
	v0_44_0_5:1.2
	v0_44_0_4:1.2
	v0_44_0_3:1.2
	v0_44_0_2:1.2
	v0_42_0_7:1.2
	v0_44_0_1:1.2
	v0_44_0_0:1.2
	v0_44:1.2.0.8
	v0_42_0_6:1.2
	v0_42_0_5:1.2
	v0_42_0_4:1.2
	v0_42_0_3:1.2
	v0_42_0_2:1.2
	v0_42_0_1:1.2
	v0_42_0_0:1.2
	v0_42:1.2.0.6
	v0_40_0_3:1.2
	v0_40_0_2:1.2
	v0_40_0_1:1.2
	v0_40_0_0:1.2
	v0_40:1.2.0.4
	v0_36_0_13:1.1
	v0_38_0_1:1.2
	v0_38_0_0:1.2
	v0_38:1.2.0.2
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.2;
locks; strict;
comment	@# @;


1.7
date	2014.11.12.10.02.51;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2014.11.10.09.18.25;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2014.05.19.12.43.39;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.06.12.43.06;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.24.16.40.23;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.05.32;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.06.28.14.00.11;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Bug fix. LockSupport.parkUntil() didn't convert milliseconds to nanoseconds.
@
text
@/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file is available under and governed by the GNU General Public
 * License version 2 only, as published by the Free Software Foundation.
 * However, the following notice accompanied the original version of this
 * file:
 *
 * Written by Doug Lea with assistance from members of JCP JSR-166
 * Expert Group and released to the public domain, as explained at
 * http://creativecommons.org/publicdomain/zero/1.0/
 */

package java.util.concurrent.locks;

/**
 * Basic thread blocking primitives for creating locks and other
 * synchronization classes.
 *
 * <p>This class associates, with each thread that uses it, a permit
 * (in the sense of the {@@link java.util.concurrent.Semaphore
 * Semaphore} class). A call to {@@code park} will return immediately
 * if the permit is available, consuming it in the process; otherwise
 * it <em>may</em> block.  A call to {@@code unpark} makes the permit
 * available, if it was not already available. (Unlike with Semaphores
 * though, permits do not accumulate. There is at most one.)
 *
 * <p>Methods {@@code park} and {@@code unpark} provide efficient
 * means of blocking and unblocking threads that do not encounter the
 * problems that cause the deprecated methods {@@code Thread.suspend}
 * and {@@code Thread.resume} to be unusable for such purposes: Races
 * between one thread invoking {@@code park} and another thread trying
 * to {@@code unpark} it will preserve liveness, due to the
 * permit. Additionally, {@@code park} will return if the caller's
 * thread was interrupted, and timeout versions are supported. The
 * {@@code park} method may also return at any other time, for "no
 * reason", so in general must be invoked within a loop that rechecks
 * conditions upon return. In this sense {@@code park} serves as an
 * optimization of a "busy wait" that does not waste as much time
 * spinning, but must be paired with an {@@code unpark} to be
 * effective.
 *
 * <p>The three forms of {@@code park} each also support a
 * {@@code blocker} object parameter. This object is recorded while
 * the thread is blocked to permit monitoring and diagnostic tools to
 * identify the reasons that threads are blocked. (Such tools may
 * access blockers using method {@@link #getBlocker(Thread)}.)
 * The use of these forms rather than the original forms without this
 * parameter is strongly encouraged. The normal argument to supply as
 * a {@@code blocker} within a lock implementation is {@@code this}.
 *
 * <p>These methods are designed to be used as tools for creating
 * higher-level synchronization utilities, and are not in themselves
 * useful for most concurrency control applications.  The {@@code park}
 * method is designed for use only in constructions of the form:
 *
 *  <pre> {@@code
 * while (!canProceed()) { ... LockSupport.park(this); }}</pre>
 *
 * where neither {@@code canProceed} nor any other actions prior to the
 * call to {@@code park} entail locking or blocking.  Because only one
 * permit is associated with each thread, any intermediary uses of
 * {@@code park} could interfere with its intended effects.
 *
 * <p><b>Sample Usage.</b> Here is a sketch of a first-in-first-out
 * non-reentrant lock class:
 *  <pre> {@@code
 * class FIFOMutex {
 *   private final AtomicBoolean locked = new AtomicBoolean(false);
 *   private final Queue<Thread> waiters
 *     = new ConcurrentLinkedQueue<Thread>();
 *
 *   public void lock() {
 *     boolean wasInterrupted = false;
 *     Thread current = Thread.currentThread();
 *     waiters.add(current);
 *
 *     // Block while not first in queue or cannot acquire lock
 *     while (waiters.peek() != current ||
 *            !locked.compareAndSet(false, true)) {
 *       LockSupport.park(this);
 *       if (Thread.interrupted()) // ignore interrupts while waiting
 *         wasInterrupted = true;
 *     }
 *
 *     waiters.remove();
 *     if (wasInterrupted)          // reassert interrupt status on exit
 *       current.interrupt();
 *   }
 *
 *   public void unlock() {
 *     locked.set(false);
 *     LockSupport.unpark(waiters.peek());
 *   }
 * }}</pre>
 */
public class LockSupport {
    private LockSupport() {} // Cannot be instantiated.

    private static void setBlocker(Thread t, Object arg) {
        t.parkBlocker = arg;
    }

    private static final int PARK_STATE_RUNNING = 0;
    private static final int PARK_STATE_PERMIT = 1;
    private static final int PARK_STATE_PARKED = 2;

    // these native methods are all implemented in map.xml
    private static native int cmpxchgParkState(Thread t, int newValue, int comparand);
    private static native Object getParkLock(Thread t);
    private static native void setParkLock(Thread t, Object obj);

    /**
     * Makes available the permit for the given thread, if it
     * was not already available.  If the thread was blocked on
     * {@@code park} then it will unblock.  Otherwise, its next call
     * to {@@code park} is guaranteed not to block. This operation
     * is not guaranteed to have any effect at all if the given
     * thread has not been started.
     *
     * @@param thread the thread to unpark, or {@@code null}, in which case
     *        this operation has no effect
     */
    public static void unpark(Thread thread) {
        if (thread != null)
        {
            if (cmpxchgParkState(thread, PARK_STATE_PERMIT, PARK_STATE_RUNNING) == PARK_STATE_PARKED)
            {
                if (cmpxchgParkState(thread, PARK_STATE_RUNNING, PARK_STATE_PARKED) == PARK_STATE_PARKED)
                {
                    // thread is currently blocking, so we have to release it
                    Object lock = getParkLock(thread);
                    synchronized (lock)
                    {
                        lock.notify();
                    }
                }
            }
        }
    }

    private static void parkImpl(Thread currentThread, boolean deadline, long nanos)
    {
        if (cmpxchgParkState(currentThread, PARK_STATE_RUNNING, PARK_STATE_PERMIT) == PARK_STATE_PERMIT)
        {
            // we consumed a permit
            return;
        }

        Object lock = getParkLock(currentThread);
        if (lock == null)
        {
            // we lazily allocate the lock object
            lock = new Object();
            setParkLock(currentThread, lock);
        }
        synchronized (lock)
        {
            if (cmpxchgParkState(currentThread, PARK_STATE_PARKED, PARK_STATE_RUNNING) == PARK_STATE_PERMIT)
            {
                // entering the parked state failed because we got a permit after the previous permit test
                // release the permit and return
                cmpxchgParkState(currentThread, PARK_STATE_RUNNING, PARK_STATE_PERMIT);
                return;
            }
            if (deadline)
            {
                nanos -= System.currentTimeMillis() * 1000000;
            }
            if (nanos >= 0)
            {
                try
                {
                    lock.wait(nanos / 1000000, (int)(nanos % 1000000));
                }
                catch (InterruptedException _)
                {
                    currentThread.interrupt();
                }
            }
            cmpxchgParkState(currentThread, PARK_STATE_RUNNING, PARK_STATE_PARKED);
        }
    }

    /**
     * Disables the current thread for thread scheduling purposes unless the
     * permit is available.
     *
     * <p>If the permit is available then it is consumed and the call returns
     * immediately; otherwise
     * the current thread becomes disabled for thread scheduling
     * purposes and lies dormant until one of three things happens:
     *
     * <ul>
     * <li>Some other thread invokes {@@link #unpark unpark} with the
     * current thread as the target; or
     *
     * <li>Some other thread {@@linkplain Thread#interrupt interrupts}
     * the current thread; or
     *
     * <li>The call spuriously (that is, for no reason) returns.
     * </ul>
     *
     * <p>This method does <em>not</em> report which of these caused the
     * method to return. Callers should re-check the conditions which caused
     * the thread to park in the first place. Callers may also determine,
     * for example, the interrupt status of the thread upon return.
     *
     * @@param blocker the synchronization object responsible for this
     *        thread parking
     * @@since 1.6
     */
    public static void park(Object blocker) {
        Thread t = Thread.currentThread();
        setBlocker(t, blocker);
        parkImpl(t, false, 0L);
        setBlocker(t, null);
    }

    /**
     * Disables the current thread for thread scheduling purposes, for up to
     * the specified waiting time, unless the permit is available.
     *
     * <p>If the permit is available then it is consumed and the call
     * returns immediately; otherwise the current thread becomes disabled
     * for thread scheduling purposes and lies dormant until one of four
     * things happens:
     *
     * <ul>
     * <li>Some other thread invokes {@@link #unpark unpark} with the
     * current thread as the target; or
     *
     * <li>Some other thread {@@linkplain Thread#interrupt interrupts}
     * the current thread; or
     *
     * <li>The specified waiting time elapses; or
     *
     * <li>The call spuriously (that is, for no reason) returns.
     * </ul>
     *
     * <p>This method does <em>not</em> report which of these caused the
     * method to return. Callers should re-check the conditions which caused
     * the thread to park in the first place. Callers may also determine,
     * for example, the interrupt status of the thread, or the elapsed time
     * upon return.
     *
     * @@param blocker the synchronization object responsible for this
     *        thread parking
     * @@param nanos the maximum number of nanoseconds to wait
     * @@since 1.6
     */
    public static void parkNanos(Object blocker, long nanos) {
        if (nanos > 0) {
            Thread t = Thread.currentThread();
            setBlocker(t, blocker);
            parkImpl(t, false, nanos);
            setBlocker(t, null);
        }
    }

    /**
     * Disables the current thread for thread scheduling purposes, until
     * the specified deadline, unless the permit is available.
     *
     * <p>If the permit is available then it is consumed and the call
     * returns immediately; otherwise the current thread becomes disabled
     * for thread scheduling purposes and lies dormant until one of four
     * things happens:
     *
     * <ul>
     * <li>Some other thread invokes {@@link #unpark unpark} with the
     * current thread as the target; or
     *
     * <li>Some other thread {@@linkplain Thread#interrupt interrupts} the
     * current thread; or
     *
     * <li>The specified deadline passes; or
     *
     * <li>The call spuriously (that is, for no reason) returns.
     * </ul>
     *
     * <p>This method does <em>not</em> report which of these caused the
     * method to return. Callers should re-check the conditions which caused
     * the thread to park in the first place. Callers may also determine,
     * for example, the interrupt status of the thread, or the current time
     * upon return.
     *
     * @@param blocker the synchronization object responsible for this
     *        thread parking
     * @@param deadline the absolute time, in milliseconds from the Epoch,
     *        to wait until
     * @@since 1.6
     */
    public static void parkUntil(Object blocker, long deadline) {
        Thread t = Thread.currentThread();
        setBlocker(t, blocker);
        parkImpl(t, true, deadline * 1000000);
        setBlocker(t, null);
    }

    /**
     * Returns the blocker object supplied to the most recent
     * invocation of a park method that has not yet unblocked, or null
     * if not blocked.  The value returned is just a momentary
     * snapshot -- the thread may have since unblocked or blocked on a
     * different blocker object.
     *
     * @@param t the thread
     * @@return the blocker
     * @@throws NullPointerException if argument is null
     * @@since 1.6
     */
    public static Object getBlocker(Thread t) {
        if (t == null)
            throw new NullPointerException();
        return t.parkBlocker;
    }

    /**
     * Disables the current thread for thread scheduling purposes unless the
     * permit is available.
     *
     * <p>If the permit is available then it is consumed and the call
     * returns immediately; otherwise the current thread becomes disabled
     * for thread scheduling purposes and lies dormant until one of three
     * things happens:
     *
     * <ul>
     *
     * <li>Some other thread invokes {@@link #unpark unpark} with the
     * current thread as the target; or
     *
     * <li>Some other thread {@@linkplain Thread#interrupt interrupts}
     * the current thread; or
     *
     * <li>The call spuriously (that is, for no reason) returns.
     * </ul>
     *
     * <p>This method does <em>not</em> report which of these caused the
     * method to return. Callers should re-check the conditions which caused
     * the thread to park in the first place. Callers may also determine,
     * for example, the interrupt status of the thread upon return.
     */
    public static void park() {
        parkImpl(Thread.currentThread(), false, 0L);
    }

    /**
     * Disables the current thread for thread scheduling purposes, for up to
     * the specified waiting time, unless the permit is available.
     *
     * <p>If the permit is available then it is consumed and the call
     * returns immediately; otherwise the current thread becomes disabled
     * for thread scheduling purposes and lies dormant until one of four
     * things happens:
     *
     * <ul>
     * <li>Some other thread invokes {@@link #unpark unpark} with the
     * current thread as the target; or
     *
     * <li>Some other thread {@@linkplain Thread#interrupt interrupts}
     * the current thread; or
     *
     * <li>The specified waiting time elapses; or
     *
     * <li>The call spuriously (that is, for no reason) returns.
     * </ul>
     *
     * <p>This method does <em>not</em> report which of these caused the
     * method to return. Callers should re-check the conditions which caused
     * the thread to park in the first place. Callers may also determine,
     * for example, the interrupt status of the thread, or the elapsed time
     * upon return.
     *
     * @@param nanos the maximum number of nanoseconds to wait
     */
    public static void parkNanos(long nanos) {
        if (nanos > 0)
            parkImpl(Thread.currentThread(), false, nanos);
    }

    /**
     * Disables the current thread for thread scheduling purposes, until
     * the specified deadline, unless the permit is available.
     *
     * <p>If the permit is available then it is consumed and the call
     * returns immediately; otherwise the current thread becomes disabled
     * for thread scheduling purposes and lies dormant until one of four
     * things happens:
     *
     * <ul>
     * <li>Some other thread invokes {@@link #unpark unpark} with the
     * current thread as the target; or
     *
     * <li>Some other thread {@@linkplain Thread#interrupt interrupts}
     * the current thread; or
     *
     * <li>The specified deadline passes; or
     *
     * <li>The call spuriously (that is, for no reason) returns.
     * </ul>
     *
     * <p>This method does <em>not</em> report which of these caused the
     * method to return. Callers should re-check the conditions which caused
     * the thread to park in the first place. Callers may also determine,
     * for example, the interrupt status of the thread, or the current time
     * upon return.
     *
     * @@param deadline the absolute time, in milliseconds from the Epoch,
     *        to wait until
     */
    public static void parkUntil(long deadline) {
        parkImpl(Thread.currentThread(), true, deadline * 1000000);
    }

    /**
     * Returns the pseudo-randomly initialized or updated secondary seed.
     * Copied from ThreadLocalRandom due to package access restrictions.
     */
    static final int nextSecondarySeed() {
        int r;
        Thread t = Thread.currentThread();
        if ((r = t.threadLocalRandomSecondarySeed) != 0) {
            r ^= r << 13;   // xorshift
            r ^= r >>> 17;
            r ^= r << 5;
        }
        else if ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)
            r = 1; // avoid zero
        t.threadLocalRandomSecondarySeed = r;
        return r;
    }

}
@


1.6
log
@Changed Thread.parkBlocker field accessiblity to internal, to allow java.util.concurrent.ForkJoinPool direct access.
@
text
@d319 1
a319 1
        parkImpl(t, true, deadline);
d435 1
a435 1
        parkImpl(Thread.currentThread(), true, deadline);
@


1.5
log
@First part of OpenJDK 8 integration.
@
text
@d122 4
a130 1
    private static native void setBlocker(Thread t, Object obj);
d335 5
a339 1
    public static native Object getBlocker(Thread t); // implemented in map.xml
@


1.4
log
@Updated java.util.concurrent.* packages to OpenJDK 7.
@
text
@a36 2
import java.util.concurrent.*;

d69 4
a72 4
 * access blockers using method {@@link #getBlocker}.) The use of these
 * forms rather than the original forms without this parameter is
 * strongly encouraged. The normal argument to supply as a
 * {@@code blocker} within a lock implementation is {@@code this}.
d78 4
a81 1
 * <pre>while (!canProceed()) { ... LockSupport.park(this); }</pre>
d89 1
a89 1
 * <pre>{@@code
d103 3
a105 3
 *        LockSupport.park(this);
 *        if (Thread.interrupted()) // ignore interrupts while waiting
 *          wasInterrupted = true;
d110 1
a110 1
 *        current.interrupt();
a118 1

d430 19
@


1.3
log
@Integrated OpenJDK 6 b21.
@
text
@d33 1
a33 1
 * http://creativecommons.org/licenses/publicdomain
d252 2
a253 2
     * <li>Some other thread {@@linkplain Thread#interrupt interrupts} the current
     * thread; or
d327 1
d329 1
@


1.2
log
@Converted tabs to spaces.
@
text
@d6 1
a6 1
 * published by the Free Software Foundation.  Sun designates this
d8 1
a8 1
 * by Sun in the LICENSE file that accompanied this code.
d20 3
a22 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.1
log
@- Implemented java.util.concurrent.locks.LockSupport.
- Fixed race condition in Thread.interrupt() that could cause cli.System.Threading.ThreadInterruptedException to be thrown from interruptable waits/sleep.
@
text
@d144 15
a158 15
	if (thread != null)
	{
	    if (cmpxchgParkState(thread, PARK_STATE_PERMIT, PARK_STATE_RUNNING) == PARK_STATE_PARKED)
	    {
		if (cmpxchgParkState(thread, PARK_STATE_RUNNING, PARK_STATE_PARKED) == PARK_STATE_PARKED)
		{
		    // thread is currently blocking, so we have to release it
		    Object lock = getParkLock(thread);
		    synchronized (lock)
		    {
			lock.notify();
		    }
		}
	    }
	}
d163 5
a167 5
	if (cmpxchgParkState(currentThread, PARK_STATE_RUNNING, PARK_STATE_PERMIT) == PARK_STATE_PERMIT)
	{
	    // we consumed a permit
	    return;
	}
d169 33
a201 33
	Object lock = getParkLock(currentThread);
	if (lock == null)
	{
	    // we lazily allocate the lock object
	    lock = new Object();
	    setParkLock(currentThread, lock);
	}
	synchronized (lock)
	{
	    if (cmpxchgParkState(currentThread, PARK_STATE_PARKED, PARK_STATE_RUNNING) == PARK_STATE_PERMIT)
	    {
		// entering the parked state failed because we got a permit after the previous permit test
		// release the permit and return
		cmpxchgParkState(currentThread, PARK_STATE_RUNNING, PARK_STATE_PERMIT);
		return;
	    }
	    if (deadline)
	    {
		nanos -= System.currentTimeMillis() * 1000000;
	    }
	    if (nanos >= 0)
	    {
		try
		{
		    lock.wait(nanos / 1000000, (int)(nanos % 1000000));
		}
		catch (InterruptedException _)
		{
		    currentThread.interrupt();
		}
	    }
	    cmpxchgParkState(currentThread, PARK_STATE_RUNNING, PARK_STATE_PARKED);
	}
d236 1
a236 1
	setBlocker(t, null);
d274 1
a274 1
	    setBlocker(t, blocker);
d276 1
a276 1
	    setBlocker(t, null);
d315 1
a315 1
	setBlocker(t, blocker);
d317 1
a317 1
	setBlocker(t, null);
@

