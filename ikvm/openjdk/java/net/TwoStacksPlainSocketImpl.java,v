head	1.7;
access;
symbols
	v8_1_5717_0:1.7
	v8_1:1.7.0.4
	v8_0_5449_1:1.7
	v8_0_5449_0:1.7
	v8_0:1.7.0.2
	v7_4_5196_0:1.6
	v7_4:1.6.0.2
	v7_3:1.5.0.6
	v7_2_4630_6:1.5
	v7_2_4630_5:1.5
	v7_2_4630_4:1.5
	v7_2_4630_3:1.5
	v7_2_4630_2:1.5
	v0_46_0_4:1.3
	v7_2_4630_1:1.5
	v7_2:1.5.0.4
	v7_1_4532_2:1.5
	v7_1_4532_1:1.5
	v7_1_4532_0:1.5
	v7_1:1.5.0.2
	v7_0_4335_3:1.4
	v7_0_4335_2:1.4
	v7_0_4335_1:1.4
	v0_46_0_2:1.3
	v7_0_4335_0:1.4
	v7_0:1.4.0.2
	v0_46_0_1:1.3
	v0_46_0_0:1.3
	v0_46:1.3.0.2;
locks; strict;
comment	@# @;


1.7
date	2014.05.19.12.43.39;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.14.14.04.06;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2012.05.23.14.25.32;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.25.14.31.55;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.24.16.40.22;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.09.06.55.31;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.27.04.58.26;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.7
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.net;

import java.io.IOException;
import java.io.FileDescriptor;
import sun.net.ResourceManager;

/*
 * This class defines the plain SocketImpl that is used for all
 * Windows version lower than Vista. It adds support for IPv6 on
 * these platforms where available.
 *
 * For backward compatibility Windows platforms that do not have IPv6
 * support also use this implementation, and fd1 gets set to null
 * during socket creation.
 *
 * @@author Chris Hegarty
 */

class TwoStacksPlainSocketImpl extends AbstractPlainSocketImpl
{
    /* second fd, used for ipv6 on windows only.
     * fd1 is used for listeners and for client sockets at initialization
     * until the socket is connected. Up to this point fd always refers
     * to the ipv4 socket and fd1 to the ipv6 socket. After the socket
     * becomes connected, fd always refers to the connected socket
     * (either v4 or v6) and fd1 is closed.
     *
     * For ServerSockets, fd always refers to the v4 listener and
     * fd1 the v6 listener.
     */
    FileDescriptor fd1;

    /*
     * Needed for ipv6 on windows because we need to know
     * if the socket is bound to ::0 or 0.0.0.0, when a caller
     * asks for it. Otherwise we don't know which socket to ask.
     */
    private InetAddress anyLocalBoundAddr = null;

    /* to prevent starvation when listening on two sockets, this is
     * is used to hold the id of the last socket we accepted on.
     */
    cli.System.Net.Sockets.Socket lastfd = null;

    // true if this socket is exclusively bound
    private final boolean exclusiveBind;

    // emulates SO_REUSEADDR when exclusiveBind is true
    private boolean isReuseAddress;


    public TwoStacksPlainSocketImpl(boolean exclBind) {
        exclusiveBind = exclBind;
    }

    public TwoStacksPlainSocketImpl(FileDescriptor fd, boolean exclBind) {
        this.fd = fd;
        exclusiveBind = exclBind;
    }

    /**
     * Creates a socket with a boolean that specifies whether this
     * is a stream socket (true) or an unconnected UDP socket (false).
     */
    protected synchronized void create(boolean stream) throws IOException {
        fd1 = new FileDescriptor();
        try {
            super.create(stream);
        } catch (IOException e) {
            fd1 = null;
            throw e;
        }
    }

     /**
     * Binds the socket to the specified address of the specified local port.
     * @@param address the address
     * @@param port the port
     */
    protected synchronized void bind(InetAddress address, int lport)
        throws IOException
    {
        super.bind(address, lport);
        if (address.isAnyLocalAddress()) {
            anyLocalBoundAddr = address;
        }
    }

    public Object getOption(int opt) throws SocketException {
        if (isClosedOrPending()) {
            throw new SocketException("Socket Closed");
        }
        if (opt == SO_BINDADDR) {
            if (fd != null && fd1 != null ) {
                /* must be unbound or else bound to anyLocal */
                return anyLocalBoundAddr;
            }
            InetAddressContainer in = new InetAddressContainer();
            socketGetOption(opt, in);
            return in.addr;
        } else if (opt == SO_REUSEADDR && exclusiveBind) {
            // SO_REUSEADDR emulated when using exclusive bind
            return isReuseAddress;
        } else
            return super.getOption(opt);
    }

    @@Override
    void socketBind(InetAddress address, int port) throws IOException {
        socketBind(address, port, exclusiveBind);
    }

    @@Override
    void socketSetOption(int opt, boolean on, Object value)
        throws SocketException
    {
        // SO_REUSEADDR emulated when using exclusive bind
        if (opt == SO_REUSEADDR && exclusiveBind)
            isReuseAddress = on;
        else
            socketNativeSetOption(opt, on, value);
    }

    /**
     * Closes the socket.
     */
    @@Override
    protected void close() throws IOException {
        synchronized(fdLock) {
            if (fd != null || fd1 != null) {
                if (!stream) {
                    ResourceManager.afterUdpClose();
                }
                if (fdUseCount == 0) {
                    if (closePending) {
                        return;
                    }
                    closePending = true;
                    socketClose();
                    fd = null;
                    fd1 = null;
                    return;
                } else {
                    /*
                     * If a thread has acquired the fd and a close
                     * isn't pending then use a deferred close.
                     * Also decrement fdUseCount to signal the last
                     * thread that releases the fd to close it.
                     */
                    if (!closePending) {
                        closePending = true;
                        fdUseCount--;
                        socketClose();
                    }
                }
            }
        }
    }

    @@Override
    void reset() throws IOException {
        if (fd != null || fd1 != null) {
            socketClose();
        }
        fd = null;
        fd1 = null;
        super.reset();
    }

    /*
     * Return true if already closed or close is pending
     */
    @@Override
    public boolean isClosedOrPending() {
        /*
         * Lock on fdLock to ensure that we wait if a
         * close is in progress.
         */
        synchronized (fdLock) {
            if (closePending || (fd == null && fd1 == null)) {
                return true;
            } else {
                return false;
            }
        }
    }

    /* Native methods */
    
    void socketCreate(boolean stream) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainSocketImpl_c.socketCreate(env, this, stream);
        env.ThrowPendingException();
    }

    void socketConnect(InetAddress address, int port, int timeout) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainSocketImpl_c.socketConnect(env, this, address, port, timeout);
        env.ThrowPendingException();
    }
    
    void socketBind(InetAddress address, int localport, boolean exclBind) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainSocketImpl_c.socketBind(env, this, address, localport, exclBind);
        env.ThrowPendingException();
    }
    
    void socketListen(int count) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainSocketImpl_c.socketListen(env, this, count);
        env.ThrowPendingException();
    }

    void socketAccept(SocketImpl socket) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainSocketImpl_c.socketAccept(env, this, socket);
        env.ThrowPendingException();
    }

    int socketAvailable() throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        int ret = TwoStacksPlainSocketImpl_c.socketAvailable(env, this);
        env.ThrowPendingException();
        return ret;
    }

    void socketClose0(boolean useDeferredClose) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainSocketImpl_c.socketClose0(env, this, useDeferredClose);
        env.ThrowPendingException();
    }

    void socketShutdown(int howto) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainSocketImpl_c.socketShutdown(env, this, howto);
        env.ThrowPendingException();
    }

    void socketNativeSetOption(int cmd, boolean on, Object value) throws SocketException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainSocketImpl_c.socketNativeSetOption(env, this, cmd, on, value);
        env.ThrowPendingException();
    }

    int socketGetOption(int opt, Object iaContainerObj) throws SocketException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        int ret = TwoStacksPlainSocketImpl_c.socketGetOption(env, this, opt, iaContainerObj);
        env.ThrowPendingException();
        return ret;
    }

    int socketGetOption1(int opt, Object iaContainerObj, FileDescriptor fd) throws SocketException {
        throw new UnsatisfiedLinkError();
    }

    void socketSendUrgentData(int data) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainSocketImpl_c.socketSendUrgentData(env, this, data);
        env.ThrowPendingException();
    }
}
@


1.6
log
@Merged OpenJDK 7u40 changes to use SO_EXCLUSIVEADDRUSE for stream sockets that don't use SO_REUSEADDR.
@
text
@d2 1
a2 1
 * Copyright (c) 2007, 2008, Oracle and/or its affiliates. All rights reserved.
@


1.5
log
@First part of forked file merge of OpenJDK 7u4 changes.
@
text
@d69 2
a70 1
    public TwoStacksPlainSocketImpl() {}
d72 9
a80 1
    public TwoStacksPlainSocketImpl(FileDescriptor fd) {
d82 1
d125 3
d132 16
d151 1
d184 1
d197 1
d226 1
a226 1
    void socketBind(InetAddress address, int localport) throws IOException {
d228 1
a228 1
        TwoStacksPlainSocketImpl_c.socketBind(env, this, address, localport);
d263 1
a263 1
    void socketSetOption(int cmd, boolean on, Object value) throws SocketException {
d265 1
a265 1
        TwoStacksPlainSocketImpl_c.socketSetOption(env, this, cmd, on, value);
@


1.4
log
@Implemented dual stack sockets.
@
text
@d2 1
a2 1
 * Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
d29 1
a40 1
 * @@author Jeroen Frijters
d81 6
a86 1
        super.create(stream);
d125 3
@


1.3
log
@Integrated OpenJDK 6 b21.
@
text
@a245 11

// we don't support a dual-stack approach yet, so we simply make it an alias for the two-stacks approach
class DualStackPlainSocketImpl extends TwoStacksPlainSocketImpl
{
    DualStackPlainSocketImpl() {
    }

    DualStackPlainSocketImpl(FileDescriptor fd) {
        super(fd);
    }
}
@


1.2
log
@Implemented IPv6 support for java.net package APIs.
@
text
@d2 1
a2 1
 * Copyright 2007 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.1
log
@Prepare for forking.
@
text
@d40 1
d55 1
a55 1
    private FileDescriptor fd1;
d67 1
a67 5
    private int lastfd = -1;

    static {
        initProto();
    }
d173 6
d180 17
a196 1
    static native void initProto();
d198 5
a202 1
    native void socketCreate(boolean isServer) throws IOException;
d204 6
a209 2
    native void socketConnect(InetAddress address, int port, int timeout)
        throws IOException;
d211 5
a215 2
    native void socketBind(InetAddress address, int port)
        throws IOException;
d217 5
a221 1
    native void socketListen(int count) throws IOException;
d223 5
a227 1
    native void socketAccept(SocketImpl s) throws IOException;
d229 6
a234 1
    native int socketAvailable() throws IOException;
d236 3
a238 1
    native void socketClose0(boolean useDeferredClose) throws IOException;
d240 6
a245 1
    native void socketShutdown(int howto) throws IOException;
d247 5
a251 2
    native void socketSetOption(int cmd, boolean on, Object value)
        throws SocketException;
d253 3
a255 6
    native int socketGetOption(int opt, Object iaContainerObj) throws SocketException;

    native int socketGetOption1(int opt, Object iaContainerObj, FileDescriptor fd)
        throws SocketException;

    native void socketSendUrgentData(int data) throws IOException;
@

