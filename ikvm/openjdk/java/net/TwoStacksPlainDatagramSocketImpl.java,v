head	1.9;
access;
symbols
	v8_1_5717_0:1.9
	v8_1:1.9.0.4
	v8_0_5449_1:1.9
	v8_0_5449_0:1.9
	v8_0:1.9.0.2
	v7_4_5196_0:1.8
	v7_4:1.8.0.2
	v7_3:1.7.0.4
	v7_2_4630_6:1.7
	v7_2_4630_5:1.7
	v7_2_4630_4:1.7
	v7_2_4630_3:1.7
	v7_2_4630_2:1.7
	v0_46_0_4:1.3
	v7_2_4630_1:1.7
	v7_2:1.7.0.2
	v7_1_4532_2:1.6
	v7_1_4532_1:1.6
	v7_1_4532_0:1.6
	v7_1:1.6.0.2
	v7_0_4335_3:1.5
	v7_0_4335_2:1.5
	v7_0_4335_1:1.5
	v0_46_0_2:1.3
	v7_0_4335_0:1.5
	v7_0:1.5.0.2
	v0_46_0_1:1.3
	v0_46_0_0:1.3
	v0_46:1.3.0.2;
locks; strict;
comment	@# @;


1.9
date	2014.05.19.12.43.39;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2013.08.14.12.39.36;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2012.06.15.14.51.42;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2012.05.23.14.25.32;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.25.14.31.55;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.07.10.02.46;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.24.16.40.22;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.09.06.55.31;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2010.08.30.12.11.55;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.9
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.net;

import java.io.IOException;
import java.io.FileDescriptor;
import sun.net.ResourceManager;

/**
 * This class defines the plain DatagramSocketImpl that is used for all
 * Windows versions lower than Vista. It adds support for IPv6 on
 * these platforms where available.
 *
 * For backward compatibility windows platforms that do not have IPv6
 * support also use this implementation, and fd1 gets set to null
 * during socket creation.
 *
 * @@author Chris Hegarty
 */

class TwoStacksPlainDatagramSocketImpl extends AbstractPlainDatagramSocketImpl
{
    /* Used for IPv6 on Windows only */
    FileDescriptor fd1;

    /*
     * Needed for ipv6 on windows because we need to know
     * if the socket was bound to ::0 or 0.0.0.0, when a caller
     * asks for it. In this case, both sockets are used, but we
     * don't know whether the caller requested ::0 or 0.0.0.0
     * and need to remember it here.
     */
    private InetAddress anyLocalBoundAddr=null;

    cli.System.Net.Sockets.Socket fduse=null; /* saved between peek() and receive() calls */

    /* saved between successive calls to receive, if data is detected
     * on both sockets at same time. To ensure that one socket is not
     * starved, they rotate using this field
     */
    cli.System.Net.Sockets.Socket lastfd=null;

    // true if this socket is exclusively bound
    private final boolean exclusiveBind;

    /*
     * Set to true if SO_REUSEADDR is set after the socket is bound to
     * indicate SO_REUSEADDR is being emulated
     */
    private boolean reuseAddressEmulated;

    // emulates SO_REUSEADDR when exclusiveBind is true and socket is bound
    private boolean isReuseAddress;

    TwoStacksPlainDatagramSocketImpl(boolean exclBind) {
        exclusiveBind = exclBind;
    }

    protected synchronized void create() throws SocketException {
        fd1 = new FileDescriptor();
        try {
            super.create();
        } catch (SocketException e) {
            fd1 = null;
            throw e;
        }
    }

    protected synchronized void bind(int lport, InetAddress laddr)
        throws SocketException {
        super.bind(lport, laddr);
        if (laddr.isAnyLocalAddress()) {
            anyLocalBoundAddr = laddr;
        }
    }

    @@Override
    protected synchronized void bind0(int lport, InetAddress laddr)
        throws SocketException
    {
        bind0(lport, laddr, exclusiveBind);

    }

    protected synchronized void receive(DatagramPacket p)
        throws IOException {
        try {
            receive0(p);
        } finally {
            fduse = null;
        }
    }

    public Object getOption(int optID) throws SocketException {
        if (isClosed()) {
            throw new SocketException("Socket Closed");
        }

        if (optID == SO_BINDADDR) {
            if ((fd != null && fd1 != null) && !connected) {
                return anyLocalBoundAddr;
            }
            int family = connectedAddress == null ? -1 : connectedAddress.holder().getFamily();
            return socketLocalAddress(family);
        } else if (optID == SO_REUSEADDR && reuseAddressEmulated) {
            return isReuseAddress;
        } else {
            return super.getOption(optID);
        }
    }

    protected void socketSetOption(int opt, Object val)
        throws SocketException
    {
        if (opt == SO_REUSEADDR && exclusiveBind && localPort != 0)  {
            // socket already bound, emulate
            reuseAddressEmulated = true;
            isReuseAddress = (Boolean)val;
        } else {
            socketNativeSetOption(opt, val);
        }

    }

    protected boolean isClosed() {
        return (fd == null && fd1 == null) ? true : false;
    }

    protected void close() {
        if (fd != null || fd1 != null) {
            datagramSocketClose();
            ResourceManager.afterUdpClose();
            fd = null;
            fd1 = null;
        }
    }

    /* Native methods */

    protected synchronized void bind0(int lport, InetAddress laddr,
                                             boolean exclBind) throws SocketException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.bind0(env, this, lport, laddr, exclBind);
        env.ThrowPendingException();
    }

    protected void send(DatagramPacket packet) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.send(env, this, packet);
        env.ThrowPendingException();
    }

    protected synchronized int peek(InetAddress addressObj) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        int ret = TwoStacksPlainDatagramSocketImpl_c.peek(env, this, addressObj);
        env.ThrowPendingException();
        return ret;
    }

    protected synchronized int peekData(DatagramPacket p) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        int ret = TwoStacksPlainDatagramSocketImpl_c.peekData(env, this, p);
        env.ThrowPendingException();
        return ret;
    }

    protected synchronized void receive0(DatagramPacket packet) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.receive0(env, this, packet);
        env.ThrowPendingException();
    }

    protected void setTimeToLive(int ttl) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.setTimeToLive(env, this, ttl);
        env.ThrowPendingException();
    }

    protected int getTimeToLive() throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        int ret = TwoStacksPlainDatagramSocketImpl_c.getTimeToLive(env, this);
        env.ThrowPendingException();
        return ret;
    }

    protected void setTTL(byte ttl) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.setTTL(env, this, ttl);
        env.ThrowPendingException();
    }

    protected byte getTTL() throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        byte ret = TwoStacksPlainDatagramSocketImpl_c.getTTL(env, this);
        env.ThrowPendingException();
        return ret;
    }

    protected void join(InetAddress inetaddr, NetworkInterface netIf) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.join(env, this, inetaddr, netIf);
        env.ThrowPendingException();
    }

    protected void leave(InetAddress inetaddr, NetworkInterface netIf) throws IOException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.leave(env, this, inetaddr, netIf);
        env.ThrowPendingException();
    }

    protected void datagramSocketCreate() throws SocketException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.datagramSocketCreate(env, this);
        env.ThrowPendingException();
    }

    protected void datagramSocketClose() {
        TwoStacksPlainDatagramSocketImpl_c.datagramSocketClose(this);
    }

    protected void socketNativeSetOption(int opt, Object val) throws SocketException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.socketNativeSetOption(env, this, opt, val);
        env.ThrowPendingException();
    }

    protected Object socketGetOption(int opt) throws SocketException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        Object ret = TwoStacksPlainDatagramSocketImpl_c.socketGetOption(env, this, opt);
        env.ThrowPendingException();
        return ret;
    }

    protected void connect0(InetAddress address, int port) throws SocketException {
        if (ikvm.internal.Util.MONO) {
            // MONOBUG Mono doesn't allow Socket.Connect(IPAddress.Any, 0) to disconnect a datagram socket,
            // so we throw a SocketException, this will cause DatagramSocket to emulate connectedness
            throw new SocketException("connected datagram sockets not supported on Mono");
        }
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        TwoStacksPlainDatagramSocketImpl_c.connect0(env, this, address, port);
        env.ThrowPendingException();
    }

    protected Object socketLocalAddress(int family) throws SocketException {
        ikvm.internal.JNI.JNIEnv env = new ikvm.internal.JNI.JNIEnv();
        Object ret = TwoStacksPlainDatagramSocketImpl_c.socketLocalAddress(env, this, family);
        env.ThrowPendingException();
        return ret;
    }

    protected void disconnect0(int family) {
        TwoStacksPlainDatagramSocketImpl_c.disconnect0(this, family);
    }
}
@


1.8
log
@Merged OpenJDK 7u40 changes to use SO_EXCLUSIVEADDRUSE for datagram sockets that don't use SO_REUSEADDR.
@
text
@d2 1
a2 1
 * Copyright (c) 2007, 2011, Oracle and/or its affiliates. All rights reserved.
d122 1
a122 1
            if (fd != null && fd1 != null) {
d125 2
a126 1
            return socketGetOption(optID);
d267 7
@


1.7
log
@Use new ikvm.internal.Util.MONO field to check for Mono runtime, instead of our own private field.
@
text
@a40 1
 * @@author Jeroen Frijters
d65 16
d99 8
d126 3
a128 1
        } else
d130 14
d161 2
a162 1
    protected synchronized void bind0(int lport, InetAddress laddr) throws SocketException {
d164 1
a164 1
        TwoStacksPlainDatagramSocketImpl_c.bind0(env, this, lport, laddr);
d242 1
a242 1
    protected void socketSetOption(int opt, Object val) throws SocketException {
d244 1
a244 1
        TwoStacksPlainDatagramSocketImpl_c.socketSetOption(env, this, opt, val);
@


1.6
log
@First part of forked file merge of OpenJDK 7u4 changes.
@
text
@d216 1
a216 1
        if (runningOnMono) {
a228 2

    private static final boolean runningOnMono = cli.System.Type.GetType("Mono.Runtime") != null;
@


1.5
log
@Implemented dual stack sockets.
@
text
@d68 6
a73 1
        super.create();
@


1.4
log
@Updated to OpenJDK 7.
@
text
@a226 8

// we don't support a dual-stack approach yet, so we simply make it an alias for the two-stacks approach
class DualStackPlainDatagramSocketImpl extends TwoStacksPlainDatagramSocketImpl {
    // we need this method, because DatagramSocket uses reflection to check for this methods existance
    protected int peekData(DatagramPacket p) throws IOException {
        return super.peekData(p);
    }
}
@


1.3
log
@Integrated OpenJDK 6 b21.
@
text
@d2 1
a2 1
 * Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
d29 1
d109 1
@


1.2
log
@Implemented IPv6 support for java.net package APIs.
@
text
@d2 1
a2 1
 * Copyright 2007 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.1
log
@Prepare for forking.
@
text
@d40 1
d46 1
a46 1
    private FileDescriptor fd1;
d57 1
a57 1
    private int fduse=-1; /* saved between peek() and receive() calls */
d63 1
a63 5
    private int lastfd=-1;

    static {
        init();
    }
d83 1
a83 1
            fduse = -1;
d115 11
a125 2
    protected synchronized native void bind0(int lport, InetAddress laddr)
        throws SocketException;
d127 6
a132 1
    protected native void send(DatagramPacket p) throws IOException;
d134 6
a139 1
    protected synchronized native int peek(InetAddress i) throws IOException;
d141 5
a145 1
    protected synchronized native int peekData(DatagramPacket p) throws IOException;
d147 5
a151 2
    protected synchronized native void receive0(DatagramPacket p)
        throws IOException;
d153 6
a158 1
    protected native void setTimeToLive(int ttl) throws IOException;
d160 5
a164 1
    protected native int getTimeToLive() throws IOException;
d166 6
a171 1
    protected native void setTTL(byte ttl) throws IOException;
d173 5
a177 1
    protected native byte getTTL() throws IOException;
d179 5
a183 2
    protected native void join(InetAddress inetaddr, NetworkInterface netIf)
        throws IOException;
d185 5
a189 2
    protected native void leave(InetAddress inetaddr, NetworkInterface netIf)
        throws IOException;
d191 3
a193 1
    protected native void datagramSocketCreate() throws SocketException;
d195 5
a199 1
    protected native void datagramSocketClose();
d201 6
a206 2
    protected native void socketSetOption(int opt, Object val)
        throws SocketException;
d208 10
a217 1
    protected native Object socketGetOption(int opt) throws SocketException;
d219 3
a221 1
    protected native void connect0(InetAddress address, int port) throws SocketException;
d223 2
a224 1
    protected native void disconnect0(int family);
d226 6
a231 4
    /**
     * Perform class load-time initializations.
     */
    private native static void init();
@

