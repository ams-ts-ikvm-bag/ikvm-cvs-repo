head	1.8;
access;
symbols
	v8_0_5449_1:1.7
	v8_0_5449_0:1.7
	v8_0:1.7.0.2
	v7_4_5196_0:1.6
	v7_4:1.6.0.2
	v7_3:1.5.0.10
	v7_2_4630_6:1.5
	v7_2_4630_5:1.5
	v7_2_4630_4:1.5
	v7_2_4630_3:1.5
	v7_2_4630_2:1.5
	v0_46_0_4:1.5
	v7_2_4630_1:1.5
	v7_2:1.5.0.8
	v7_1_4532_2:1.5
	v7_1_4532_1:1.5
	v7_1_4532_0:1.5
	v7_1:1.5.0.6
	v7_0_4335_3:1.5
	v7_0_4335_2:1.5
	v7_0_4335_1:1.5
	v0_46_0_2:1.5
	v7_0_4335_0:1.5
	v7_0:1.5.0.4
	v0_40_0_6:1.3
	v0_40_0_5:1.3
	v0_46_0_1:1.5
	v0_46_0_0:1.5
	v0_46:1.5.0.2
	v0_36_0_14:1.1
	v0_44_0_6:1.3
	v0_44_0_5:1.3
	v0_44_0_4:1.3
	v0_44_0_3:1.3
	v0_44_0_2:1.3
	v0_42_0_7:1.3
	v0_44_0_1:1.3
	v0_44_0_0:1.3
	v0_44:1.3.0.8
	v0_42_0_6:1.3
	v0_42_0_5:1.3
	v0_42_0_4:1.3
	v0_42_0_3:1.3
	v0_42_0_2:1.3
	v0_42_0_1:1.3
	v0_42_0_0:1.3
	v0_42:1.3.0.6
	v0_40_0_3:1.3
	v0_40_0_2:1.3
	v0_40_0_1:1.3
	v0_40_0_0:1.3
	v0_40:1.3.0.4
	v0_36_0_13:1.1
	v0_38_0_1:1.3
	v0_38_0_0:1.3
	v0_38:1.3.0.2
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.2;
locks; strict;
comment	@# @;


1.8
date	2015.06.26.14.41.59;	author jfrijters;	state dead;
branches;
next	1.7;

1.7
date	2014.05.19.12.43.39;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.15.14.27.57;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2011.01.24.16.40.22;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2010.09.09.06.55.31;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.12.09.09.55;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.05.26;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.12.08.40.33;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.8
log
@Unforked java/net/SocketInputStream.java and java/net/SocketOutputStream.java.
@
text
@/*
 * Copyright (c) 1995, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package java.net;

import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import static ikvm.internal.Winsock.*;
import static java.net.net_util_md.*;

/**
 * This stream extends FileOutputStream to implement a
 * SocketOutputStream. Note that this class should <b>NOT</b> be
 * public.
 *
 * @@author      Jonathan Payne
 * @@author      Arthur van Hoff
 */
class SocketOutputStream extends FileOutputStream
{
    private AbstractPlainSocketImpl impl = null;
    private byte temp[] = new byte[1];
    private Socket socket = null;

    /**
     * Creates a new SocketOutputStream. Can only be called
     * by a Socket. This method needs to hang on to the owner Socket so
     * that the fd will not be closed.
     * @@param impl the socket output stream inplemented
     */
    SocketOutputStream(AbstractPlainSocketImpl impl) throws IOException {
        super(impl.getFileDescriptor());
        this.impl = impl;
        socket = impl.getSocket();
    }

    /**
     * Returns the unique {@@link java.nio.channels.FileChannel FileChannel}
     * object associated with this file output stream. </p>
     *
     * The {@@code getChannel} method of {@@code SocketOutputStream}
     * returns {@@code null} since it is a socket based stream.</p>
     *
     * @@return  the file channel associated with this file output stream
     *
     * @@since 1.4
     * @@spec JSR-51
     */
    public final FileChannel getChannel() {
        return null;
    }

    /**
     * Writes to the socket.
     * @@param fd the FileDescriptor
     * @@param b the data to be written
     * @@param off the start offset in the data
     * @@param len the number of bytes that are written
     * @@exception IOException If an I/O error has occurred.
     */
    private void socketWrite0(FileDescriptor fdObj, byte[] data, int off, int len) throws IOException
    {
        // [IKVM] this method is a direct port of the native code in openjdk6-b18\jdk\src\windows\native\java\net\SocketOutputStream.c
        final int MAX_BUFFER_LEN = 2048;
        cli.System.Net.Sockets.Socket fd;
        int buflen = 65536; // MAX_HEAP_BUFFER_LEN
        int n;

        if (IS_NULL(fdObj)) {
            throw new SocketException("socket closed");
        } else {
            fd = fdObj.getSocket();
        }
        if (IS_NULL(data)) {
            throw new NullPointerException("data argument");
        }
        
        while(len > 0) {
            int loff = 0;
            int chunkLen = Math.min(buflen, len);
            int llen = chunkLen;
            int retry = 0;

            while(llen > 0) {
                n = send(fd, data, off + loff, llen, 0);
                if (n > 0) {
                    llen -= n;
                    loff += n;
                    continue;
                }

                /*
                 * Due to a bug in Windows Sockets (observed on NT and Windows
                 * 2000) it may be necessary to retry the send. The issue is that
                 * on blocking sockets send/WSASend is supposed to block if there
                 * is insufficient buffer space available. If there are a large
                 * number of threads blocked on write due to congestion then it's
                 * possile to hit the NT/2000 bug whereby send returns WSAENOBUFS.
                 * The workaround we use is to retry the send. If we have a
                 * large buffer to send (>2k) then we retry with a maximum of
                 * 2k buffer. If we hit the issue with <=2k buffer then we backoff
                 * for 1 second and retry again. We repeat this up to a reasonable
                 * limit before bailing out and throwing an exception. In load
                 * conditions we've observed that the send will succeed after 2-3
                 * attempts but this depends on network buffers associated with
                 * other sockets draining.
                 */
                if (WSAGetLastError() == WSAENOBUFS) {
                    if (llen > MAX_BUFFER_LEN) {
                        buflen = MAX_BUFFER_LEN;
                        chunkLen = MAX_BUFFER_LEN;
                        llen = MAX_BUFFER_LEN;
                        continue;
                    }
                    if (retry >= 30) {
                        throw new SocketException("No buffer space available - exhausted attempts to queue buffer");
                    }
                    cli.System.Threading.Thread.Sleep(1000);
                    retry++;
                    continue;
                }

                /*
                 * Send failed - can be caused by close or write error.
                 */
                if (WSAGetLastError() == WSAENOTSOCK) {
                    throw new SocketException("Socket closed");
                } else {
                    throw NET_ThrowCurrent("socket write error");
                }
            }
            len -= chunkLen;
            off += chunkLen;
        }
    }

    /**
     * Writes to the socket with appropriate locking of the
     * FileDescriptor.
     * @@param b the data to be written
     * @@param off the start offset in the data
     * @@param len the number of bytes that are written
     * @@exception IOException If an I/O error has occurred.
     */
    private void socketWrite(byte b[], int off, int len) throws IOException {

        if (len <= 0 || off < 0 || off + len > b.length) {
            if (len == 0) {
                return;
            }
            throw new ArrayIndexOutOfBoundsException();
        }

        FileDescriptor fd = impl.acquireFD();
        try {
            socketWrite0(fd, b, off, len);
        } catch (SocketException se) {
            if (se instanceof sun.net.ConnectionResetException) {
                impl.setConnectionResetPending();
                se = new SocketException("Connection reset");
            }
            if (impl.isClosedOrPending()) {
                throw new SocketException("Socket closed");
            } else {
                throw se;
            }
        } finally {
            impl.releaseFD();
        }
    }

    /**
     * Writes a byte to the socket.
     * @@param b the data to be written
     * @@exception IOException If an I/O error has occurred.
     */
    public void write(int b) throws IOException {
        temp[0] = (byte)b;
        socketWrite(temp, 0, 1);
    }

    /**
     * Writes the contents of the buffer <i>b</i> to the socket.
     * @@param b the data to be written
     * @@exception SocketException If an I/O error has occurred.
     */
    public void write(byte b[]) throws IOException {
        socketWrite(b, 0, b.length);
    }

    /**
     * Writes <i>length</i> bytes from buffer <i>b</i> starting at
     * offset <i>len</i>.
     * @@param b the data to be written
     * @@param off the start offset in the data
     * @@param len the number of bytes that are written
     * @@exception SocketException If an I/O error has occurred.
     */
    public void write(byte b[], int off, int len) throws IOException {
        socketWrite(b, off, len);
    }

    /**
     * Closes the stream.
     */
    private boolean closing = false;
    public void close() throws IOException {
        // Prevent recursion. See BugId 4484411
        if (closing)
            return;
        closing = true;
        if (socket != null) {
            if (!socket.isClosed())
                socket.close();
        } else
            impl.close();
        closing = false;
    }

    /**
     * Overrides finalize, the fd is closed by the Socket.
     */
    protected void finalize() {}
}
@


1.7
log
@First part of OpenJDK 8 integration.
@
text
@@


1.6
log
@Merged in IoTrace hooks.
@
text
@d2 1
a2 1
 * Copyright (c) 1995, 2007, Oracle and/or its affiliates. All rights reserved.
a34 2
import sun.misc.IoTrace;

d65 2
a66 2
     * The <code>getChannel</code> method of <code>SocketOutputStream</code>
     * returns <code>null</code> since it is a socket based stream.</p>
a177 2
        Object traceContext = IoTrace.socketWriteBegin();
        int bytesWritten = 0;
a180 1
            bytesWritten = len;
a192 1
            IoTrace.socketWriteEnd(traceContext, impl.address, impl.port, bytesWritten);
@


1.5
log
@Integrated OpenJDK 6 b21.
@
text
@d35 2
a43 1
 * @@author      Jeroen Frijters
d180 2
d185 1
d198 1
@


1.4
log
@Implemented IPv6 support for java.net package APIs.
@
text
@d2 1
a2 1
 * Copyright 1995-2007 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.3
log
@Merged OpenJDK 6 b10 whitespace and comment changes.
@
text
@d32 2
d42 1
d46 1
a46 1
    private PlainSocketImpl impl = null;
d56 1
a56 1
    SocketOutputStream(PlainSocketImpl impl) throws IOException {
d86 1
a86 1
    private void socketWrite0(FileDescriptor fd, byte[] b, int off, int len) throws IOException
d88 72
a159 1
        impl.write(b, off, len);
@


1.2
log
@Converted tabs to spaces.
@
text
@d2 1
a2 1
 * Copyright 1995-2003 Sun Microsystems, Inc.  All Rights Reserved.
a37 1
 * @@version     1.37, 05/05/07
d46 1
a46 1
    
d89 1
a89 1
     * Writes to the socket with appropriate locking of the 
d123 2
a124 2
    /** 
     * Writes a byte to the socket. 
d126 1
a126 1
     * @@exception IOException If an I/O error has occurred. 
d133 1
a133 1
    /** 
d136 1
a136 1
     * @@exception SocketException If an I/O error has occurred. 
d142 2
a143 2
    /** 
     * Writes <i>length</i> bytes from buffer <i>b</i> starting at 
d171 1
a171 1
    /** 
@


1.1
log
@- Added WINDOWS constant to ikvm.internal.Util to check if we're running on Windows.
- Added a bunch of native methods to openjdk.cs (some real implementations, some stubs)
- Added OpenJDK derived PlainSocketImpl/SocketInputStream/SocketOutputStream implementations.
- Added OpenJDK derived file protocol handler (a single class that supports both Windows and non-Windows)
@
text
@d39 2
a40 2
 * @@author 	Jonathan Payne
 * @@author	Arthur van Hoff
d55 3
a57 3
	super(impl.getFileDescriptor());
	this.impl = impl;
	socket = impl.getSocket();
d86 1
a86 1
	impl.write(b, off, len);
d99 16
a114 16
	if (len <= 0 || off < 0 || off + len > b.length) {
	    if (len == 0) {
		return;
	    }
	    throw new ArrayIndexOutOfBoundsException();
	}

	FileDescriptor fd = impl.acquireFD();
	try {
	    socketWrite0(fd, b, off, len);
	} catch (SocketException se) {
	    if (se instanceof sun.net.ConnectionResetException) {
		impl.setConnectionResetPending();
		se = new SocketException("Connection reset");
	    }
	    if (impl.isClosedOrPending()) {
d117 5
a121 5
		throw se;
	    }
	} finally {
	    impl.releaseFD();
	}
d130 2
a131 2
	temp[0] = (byte)b;
	socketWrite(temp, 0, 1);
d140 1
a140 1
	socketWrite(b, 0, b.length);
d152 1
a152 1
	socketWrite(b, off, len);
d160 10
a169 10
	// Prevent recursion. See BugId 4484411
	if (closing)
	    return;
	closing = true;
	if (socket != null) {
	    if (!socket.isClosed())
		socket.close();
	} else
	    impl.close();
	closing = false;
@

