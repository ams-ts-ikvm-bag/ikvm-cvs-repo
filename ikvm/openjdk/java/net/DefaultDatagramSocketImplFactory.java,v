head	1.6;
access;
symbols
	v8_1_5717_0:1.6
	v8_1:1.6.0.4
	v8_0_5449_1:1.6
	v8_0_5449_0:1.6
	v8_0:1.6.0.2
	v7_4_5196_0:1.5
	v7_4:1.5.0.2
	v7_3:1.4.0.8
	v7_2_4630_6:1.4
	v7_2_4630_5:1.4
	v7_2_4630_4:1.4
	v7_2_4630_3:1.4
	v7_2_4630_2:1.4
	v7_2_4630_1:1.4
	v7_2:1.4.0.6
	v7_1_4532_2:1.4
	v7_1_4532_1:1.4
	v7_1_4532_0:1.4
	v7_1:1.4.0.4
	v7_0_4335_3:1.4
	v7_0_4335_2:1.4
	v7_0_4335_1:1.4
	v7_0_4335_0:1.4
	v7_0:1.4.0.2
	v0_40_0_6:1.1
	v0_40_0_5:1.1
	v0_44_0_6:1.1
	v0_44_0_5:1.1
	v0_44_0_4:1.1
	v0_44_0_3:1.1
	v0_44_0_2:1.1
	v0_42_0_7:1.1
	v0_44_0_1:1.1
	v0_44_0_0:1.1
	v0_44:1.1.0.8
	v0_42_0_6:1.1
	v0_42_0_5:1.1
	v0_42_0_4:1.1
	v0_42_0_3:1.1
	v0_42_0_2:1.1
	v0_42_0_1:1.1
	v0_42_0_0:1.1
	v0_42:1.1.0.6
	v0_40_0_3:1.1
	v0_40_0_2:1.1
	v0_40_0_1:1.1
	v0_40_0_0:1.1
	v0_40:1.1.0.4
	v0_38_0_1:1.1
	v0_38_0_0:1.1
	v0_38:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2014.05.19.12.43.39;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2013.08.14.12.39.36;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.08.29.09.45.54;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.29.08.43.45;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.09.06.55.31;	author jfrijters;	state dead;
branches;
next	1.1;

1.1
date	2008.06.13.09.01.25;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.6
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.net;

import java.security.AccessController;
import java.security.PrivilegedAction;

/**
 * This class defines a factory for creating DatagramSocketImpls. It defaults
 * to creating plain DatagramSocketImpls, but may create other DatagramSocketImpls
 * by setting the impl.prefix system property.
 *
 * For Windows versions lower than Windows Vista a TwoStacksPlainDatagramSocketImpl
 * is always created. This impl supports IPv6 on these platform where available.
 *
 * On Windows platforms greater than Vista that support a dual layer TCP/IP stack
 * a DualStackPlainDatagramSocketImpl is created for DatagramSockets. For MulticastSockets
 * a TwoStacksPlainDatagramSocketImpl is always created. This is to overcome the lack
 * of behavior defined for multicasting over a dual layer socket by the RFC.
 *
 * @@author Chris Hegarty
 */

class DefaultDatagramSocketImplFactory
{
    static Class<?> prefixImplClass = null;

    /* the windows version. */
    private static float version;

    /* java.net.preferIPv4Stack */
    private static boolean preferIPv4Stack = false;

    /* If the version supports a dual stack TCP implementation */
    private static boolean useDualStackImpl = false;

    /* sun.net.useExclusiveBind */
    private static String exclBindProp;

    /* True if exclusive binding is on for Windows */
    private static boolean exclusiveBind = true;


    static {
        // Determine Windows Version.
        java.security.AccessController.doPrivileged(
                new PrivilegedAction<Object>() {
                    public Object run() {
                        version = 0;
                        try {
                            version = Float.parseFloat(System.getProperties()
                                    .getProperty("os.version"));
                            preferIPv4Stack = Boolean.parseBoolean(
                                              System.getProperties()
                                              .getProperty(
                                                   "java.net.preferIPv4Stack"));
                            exclBindProp = System.getProperty(
                                    "sun.net.useExclusiveBind");
                        } catch (NumberFormatException e ) {
                            assert false : e;
                        }
                        return null; // nothing to return
                    }
                });

        String ipv6 = ikvm.internal.Util.SafeGetEnvironmentVariable("IKVM_IPV6");
        if (ipv6 != null) {
            try {
                if ((Integer.parseInt(ipv6) & 4) == 0) {
                    preferIPv4Stack = true;
                } else {
                    useDualStackImpl = true;
                }
            } catch (NumberFormatException _) {
            }
        } else if (!InetAddressImplFactory.isIPv6Supported()) {
            preferIPv4Stack = true;
        }

        // (version >= 6.0) implies Vista or greater.
        if (version >= 6.0 && !preferIPv4Stack) {
                useDualStackImpl = true;
        }
        if (exclBindProp != null) {
            // sun.net.useExclusiveBind is true
            exclusiveBind = exclBindProp.length() == 0 ? true
                    : Boolean.parseBoolean(exclBindProp);
        } else if (version < 6.0) {
            exclusiveBind = false;
        }

        // impl.prefix
        String prefix = null;
        try {
            prefix = AccessController.doPrivileged(
                new sun.security.action.GetPropertyAction("impl.prefix", null));
            if (prefix != null)
                prefixImplClass = Class.forName("java.net."+prefix+"DatagramSocketImpl");
        } catch (Exception e) {
            System.err.println("Can't find class: java.net." +
                                prefix +
                                "DatagramSocketImpl: check impl.prefix property");
        }
    }

    /**
     * Creates a new <code>DatagramSocketImpl</code> instance.
     *
     * @@param   isMulticast true if this impl is to be used for a MutlicastSocket
     * @@return  a new instance of <code>PlainDatagramSocketImpl</code>.
     */
    static DatagramSocketImpl createDatagramSocketImpl(boolean isMulticast)
        throws SocketException {
        if (prefixImplClass != null) {
            try {
                return (DatagramSocketImpl) prefixImplClass.newInstance();
            } catch (Exception e) {
                throw new SocketException("can't instantiate DatagramSocketImpl");
            }
        } else {
            if (isMulticast)
                exclusiveBind = false;
            if (useDualStackImpl && !isMulticast)
                return new DualStackPlainDatagramSocketImpl(exclusiveBind);
            else
                return new TwoStacksPlainDatagramSocketImpl(exclusiveBind);
        }
    }
}
@


1.5
log
@Merged OpenJDK 7u40 changes to use SO_EXCLUSIVEADDRUSE for datagram sockets that don't use SO_REUSEADDR.
@
text
@d2 1
a2 1
 * Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
d48 1
a48 1
    static Class prefixImplClass = null;
@


1.4
log
@Use IPv4 (two stacks) implementation when IPv6 is not available and added IKVM_IPV6 environment support to override.
@
text
@d59 7
d68 17
a84 9
        java.security.AccessController.doPrivileged( new PrivilegedAction<Object>() {
                public Object run() {
                    version = 0;
                    try {
                        version = Float.parseFloat(System.getProperties().getProperty("os.version"));
                        preferIPv4Stack = Boolean.parseBoolean(
                                          System.getProperties().getProperty("java.net.preferIPv4Stack"));
                    } catch (NumberFormatException e ) {
                        assert false : e;
d86 1
a86 2
                    return null; // nothing to return
                } });
d104 8
a111 1
            useDualStackImpl = true;
d143 2
d146 1
a146 1
                return new DualStackPlainDatagramSocketImpl();
d148 1
a148 1
                return new TwoStacksPlainDatagramSocketImpl();
@


1.3
log
@Prepare for forking.
@
text
@d74 14
@


1.2
log
@Implemented IPv6 support for java.net package APIs.
@
text
@d2 24
a25 1
  Copyright (C) 2008 Jeroen Frijters
d27 2
a28 20
  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
d30 15
a44 1
package java.net;
d48 65
a112 3
    static DatagramSocketImpl createDatagramSocketImpl(boolean isMulticast) throws SocketException
    {
        return new PlainDatagramSocketImpl();
@


1.1
log
@Integrated OpenJDK 6 b10.
@
text
@@

