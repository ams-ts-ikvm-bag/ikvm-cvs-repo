head	1.5;
access;
symbols
	v8_1_5717_0:1.5
	v8_1:1.5.0.2
	v8_0_5449_1:1.4
	v8_0_5449_0:1.4
	v8_0:1.4.0.2
	v7_4_5196_0:1.3
	v7_4:1.3.0.2
	v7_3:1.2.0.8
	v7_2_4630_6:1.2
	v7_2_4630_5:1.2
	v7_2_4630_4:1.2
	v7_2_4630_3:1.2
	v7_2_4630_2:1.2
	v7_2_4630_1:1.2
	v7_2:1.2.0.6
	v7_1_4532_2:1.2
	v7_1_4532_1:1.2
	v7_1_4532_0:1.2
	v7_1:1.2.0.4
	v7_0_4335_3:1.2
	v7_0_4335_2:1.2
	v7_0_4335_1:1.2
	v7_0_4335_0:1.2
	v7_0:1.2.0.2;
locks; strict;
comment	@# @;


1.5
date	2015.06.09.09.28.43;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2014.05.19.12.43.39;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2013.08.14.12.39.36;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.25.14.31.55;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.25.05.01.20;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Integrated OpenJDK 8u45.
@
text
@/*
 * Copyright (c) 2007, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.net;

import java.io.FileDescriptor;
import static ikvm.internal.JNI.*;
import static ikvm.internal.Winsock.*;
import static java.net.net_util_md.*;

final class DualStackPlainDatagramSocketImpl_c
{
static final int TRUE = 1;
static final int FALSE = 0;

static final int JVM_IO_ERR = -1;
static final int JVM_IO_INTR = -2;

/*
#include <windows.h>
#include <winsock2.h>
#include "jni.h"
#include "net_util.h"
#include "java_net_DualStackPlainDatagramSocketImpl.h"

/*
 * This function "purges" all outstanding ICMP port unreachable packets
 * outstanding on a socket and returns JNI_TRUE if any ICMP messages
 * have been purged. The rational for purging is to emulate normal BSD
 * behaviour whereby receiving a "connection reset" status resets the
 * socket.
 */
static boolean purgeOutstandingICMP(JNIEnv env, cli.System.Net.Sockets.Socket fd)
{
    boolean got_icmp = false;
    byte[] buf = new byte[1];
    fd_set tbl = new fd_set();
    timeval t = new timeval();
    SOCKETADDRESS rmtaddr = null;

    /*
     * Peek at the queue to see if there is an ICMP port unreachable. If there
     * is then receive it.
     */
    FD_ZERO(tbl);
    FD_SET(fd, tbl);
    while(true) {
        if (select(tbl, null, null, t) <= 0) {
            break;
        }
        if (recvfrom(fd, buf, 1, MSG_PEEK,
                         rmtaddr) != JVM_IO_ERR) {
            break;
        }
        if (WSAGetLastError() != WSAECONNRESET) {
            /* some other error - we don't care here */
            break;
        }

        recvfrom(fd, buf, 1, 0, rmtaddr);
        got_icmp = JNI_TRUE;
    }

    return got_icmp;
}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketCreate
 * Signature: (Z)I
 */
static cli.System.Net.Sockets.Socket socketCreate
  (JNIEnv env, boolean v6Only /*unused*/) {
    cli.System.Net.Sockets.Socket fd;
    int rv, opt=0, t=TRUE;

    fd = socket(AF_INET6, SOCK_DGRAM, 0);
    if (fd == INVALID_SOCKET) {
        NET_ThrowNew(env, WSAGetLastError(), "Socket creation failed");
        return null;
    }

    rv = setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, opt);
    if (rv == SOCKET_ERROR) {
        NET_ThrowNew(env, WSAGetLastError(), "Socket creation failed");
        return null;
    }

    //SetHandleInformation((HANDLE)(UINT_PTR)fd, HANDLE_FLAG_INHERIT, FALSE);
    NET_SetSockOpt(fd, SOL_SOCKET, SO_BROADCAST, t);

    /* SIO_UDP_CONNRESET fixes a "bug" introduced in Windows 2000, which
     * returns connection reset errors on unconnected UDP sockets (as well
     * as connected sockets). The solution is to only enable this feature
     * when the socket is connected.
     */
    t = FALSE;
    WSAIoctl(fd ,SIO_UDP_CONNRESET ,false);

    return fd;
}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketBind
 * Signature: (ILjava/net/InetAddress;I)V
 */
static void socketBind
  (JNIEnv env, cli.System.Net.Sockets.Socket fd, InetAddress iaObj, int port, boolean exclBind) {
    SOCKETADDRESS sa;
    sa = new SOCKETADDRESS();
    int rv;

    if (NET_InetAddressToSockaddr(env, iaObj, port, sa,
                                 JNI_TRUE) != 0) {
        return;
    }
    rv = NET_WinBind(fd, sa, exclBind);

    if (rv == SOCKET_ERROR) {
        if (WSAGetLastError() == WSAEACCES) {
            WSASetLastError(WSAEADDRINUSE);
        }
        NET_ThrowNew(env, WSAGetLastError(), "Cannot bind");
    }
}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketConnect
 * Signature: (ILjava/net/InetAddress;I)V
 */
static void socketConnect
  (JNIEnv env, cli.System.Net.Sockets.Socket fd, InetAddress iaObj, int port) {
    SOCKETADDRESS sa;
    sa = new SOCKETADDRESS();
    int rv;
    int t = TRUE;

    if (NET_InetAddressToSockaddr(env, iaObj, port, sa,
                                   JNI_TRUE) != 0) {
        return;
    }

    rv = connect(fd, sa);
    if (rv == SOCKET_ERROR) {
        NET_ThrowNew(env, WSAGetLastError(), "connect");
        return;
    }

    /* see comment in socketCreate */
    WSAIoctl(fd, SIO_UDP_CONNRESET, true);
}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketDisconnect
 * Signature: (I)V
 */
static void socketDisconnect
  (JNIEnv env, cli.System.Net.Sockets.Socket fd ) {
    SOCKETADDRESS sa;
    sa = new SOCKETADDRESS();

    connect(fd, sa);

    /* see comment in socketCreate */
    WSAIoctl(fd, SIO_UDP_CONNRESET, false);
}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketClose
 * Signature: (I)V
 */
static void socketClose
  (JNIEnv env, cli.System.Net.Sockets.Socket fd) {
    NET_SocketClose(fd);
}


/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketLocalPort
 * Signature: (I)I
 */
static int socketLocalPort
  (JNIEnv env, cli.System.Net.Sockets.Socket fd) {
    SOCKETADDRESS sa;
    sa = new SOCKETADDRESS();

    if (getsockname(fd, sa) == SOCKET_ERROR) {
        NET_ThrowNew(env, WSAGetLastError(), "JVM_GetSockName");
        return -1;
    }
    return ntohs(GET_PORT(sa));
}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketLocalAddress
 * Signature: (I)Ljava/lang/Object;
 */
static InetAddress socketLocalAddress
  (JNIEnv env , cli.System.Net.Sockets.Socket fd) {
    SOCKETADDRESS sa;
    sa = new SOCKETADDRESS();
    InetAddress iaObj;
    int[] port = { 0 };

    if (getsockname(fd, sa) == SOCKET_ERROR) {
        NET_ThrowNew(env, WSAGetLastError(), "Error getting socket name");
        return null;
    }

    iaObj = NET_SockaddrToInetAddress(env, sa, port);
    return iaObj;
}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketReceiveOrPeekData
 * Signature: (ILjava/net/DatagramPacket;IZZ)I
 */
static int socketReceiveOrPeekData
  (JNIEnv env, cli.System.Net.Sockets.Socket fd, DatagramPacket dpObj,
   int timeout, boolean connected, boolean peek) {
    SOCKETADDRESS sa;
    sa = new SOCKETADDRESS();
    int port, rv, flags=0;
    boolean retry;
    long prevTime = 0;

    int packetBufferOffset, packetBufferLen;
    byte[] packetBuffer;

    /* if we are only peeking. Called from peekData */
    if (peek) {
        flags = MSG_PEEK;
    }

    packetBuffer = dpObj.buf;
    packetBufferOffset = dpObj.offset;
    packetBufferLen = dpObj.bufLength;
    /* Note: the buffer needn't be greater than 65,536 (0xFFFF)
    * the max size of an IP packet. Anything bigger is truncated anyway.
    *-/
    if (packetBufferLen > MAX_PACKET_LEN) {
        packetBufferLen = MAX_PACKET_LEN;
    }

    if (packetBufferLen > MAX_BUFFER_LEN) {
        fullPacket = (char *)malloc(packetBufferLen);
        if (!fullPacket) {
            JNU_ThrowOutOfMemoryError(env, "Native heap allocation failed");
            return -1;
        }
    } else {
        fullPacket = &(BUF[0]);
    }
    */

    do {
        retry = false;

        if (timeout != 0) {
            if (prevTime == 0) {
                prevTime = JVM_CurrentTimeMillis(env, 0);
            }
            rv = NET_Timeout(fd, timeout);
            if (rv <= 0) {
                if (rv == 0) {
                    JNU_ThrowByName(env,JNU_JAVANETPKG+"SocketTimeoutException",
                                    "Receive timed out");
                } else if (rv == JVM_IO_ERR) {
                    JNU_ThrowByName(env, JNU_JAVANETPKG+"SocketException",
                                    "Socket closed");
                } else if (rv == JVM_IO_INTR) {
                    JNU_ThrowByName(env, JNU_JAVAIOPKG+"InterruptedIOException",
                                    "operation interrupted");
                }
                return -1;
            }
        }

        /* receive the packet */
        rv = recvfrom(fd, packetBuffer, packetBufferOffset, packetBufferLen, flags,
                    sa);

        if (rv == SOCKET_ERROR && (WSAGetLastError() == WSAECONNRESET)) {
            /* An icmp port unreachable - we must receive this as Windows
             * does not reset the state of the socket until this has been
             * received.
             */
            purgeOutstandingICMP(env, fd);

            if (connected) {
                JNU_ThrowByName(env, JNU_JAVANETPKG+"PortUnreachableException",
                                "ICMP Port Unreachable");
                return -1;
            } else if (timeout != 0) {
                /* Adjust timeout */
                long newTime = JVM_CurrentTimeMillis(env, 0);
                timeout -= (int)(newTime - prevTime);
                if (timeout <= 0) {
                    JNU_ThrowByName(env, JNU_JAVANETPKG+"SocketTimeoutException",
                                    "Receive timed out");
                    return -1;
                }
                prevTime = newTime;
            }
            retry = true;
        }
    } while (retry);

    port = ntohs (GET_PORT(sa));

    /* truncate the data if the packet's length is too small */
    if (rv > packetBufferLen) {
        rv = packetBufferLen;
    }
    if (rv < 0) {
        if (WSAGetLastError() == WSAEMSGSIZE) {
            /* it is because the buffer is too small. It's UDP, it's
             * unreliable, it's all good. discard the rest of the
             * data..
             */
            rv = packetBufferLen;
        } else {
            /* failure */
            dpObj.length = 0;
        }
    }

    if (rv == -1) {
        JNU_ThrowByName(env, JNU_JAVANETPKG+"SocketException", "socket closed");
    } else if (rv == -2) {
        JNU_ThrowByName(env, JNU_JAVAIOPKG+"InterruptedIOException",
                        "operation interrupted");
    } else if (rv < 0) {
        NET_ThrowCurrent(env, "Datagram receive failed");
    } else {
        InetAddress packetAddress;
        /*
         * Check if there is an InetAddress already associated with this
         * packet. If so, we check if it is the same source address. We
         * can't update any existing InetAddress because it is immutable
         */
        packetAddress = dpObj.address;
        if (packetAddress != NULL) {
            if (!NET_SockaddrEqualsInetAddress(sa,
                                               packetAddress)) {
                /* force a new InetAddress to be created */
                packetAddress = null;
            }
        }
        if (packetAddress == NULL) {
            int[] tmp = { port };
            packetAddress = NET_SockaddrToInetAddress(sa, tmp);
            port = tmp[0];
            if (packetAddress != NULL) {
                /* stuff the new Inetaddress into the packet */
                dpObj.address = packetAddress;
            }
        }

        /* populate the packet */
        dpObj.port = port;
        dpObj.length = rv;
    }

    return port;
}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketSend
 * Signature: (I[BIILjava/net/InetAddress;IZ)V
 */
static void socketSend
  (JNIEnv env, cli.System.Net.Sockets.Socket fd, byte[] data, int offset, int length,
     InetAddress iaObj, int port, boolean connected) {
    SOCKETADDRESS sa;
    int rv;

    if (connected) {
        sa = null; /* arg to JVM_Sendto () null in this case */
    } else {
        sa = new SOCKETADDRESS();
        if (NET_InetAddressToSockaddr(env, iaObj, port, sa,
                                       JNI_TRUE) != 0) {
            return;
        }
    }

    /*
    if (length > MAX_BUFFER_LEN) {
        /* Note: the buffer needn't be greater than 65,536 (0xFFFF)
         * the max size of an IP packet. Anything bigger is truncated anyway.
         *-/
        if (length > MAX_PACKET_LEN) {
            length = MAX_PACKET_LEN;
        }
        fullPacket = (char *)malloc(length);
        if (!fullPacket) {
            JNU_ThrowOutOfMemoryError(env, "Native heap allocation failed");
            return;
        }
    } else {
        fullPacket = &(BUF[0]);
    }
    */

    rv = sendto(fd, data, offset, length, 0, sa);
    if (rv == SOCKET_ERROR) {
        if (rv == JVM_IO_ERR) {
            NET_ThrowNew(env, WSAGetLastError(), "Datagram send failed");
        } else if (rv == JVM_IO_INTR) {
            JNU_ThrowByName(env, JNU_JAVAIOPKG+"InterruptedIOException",
                            "operation interrupted");
        }
    }

}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketSetIntOption
 * Signature: (III)V
 */
static void socketSetIntOption
  (JNIEnv env, cli.System.Net.Sockets.Socket fd , int cmd, int value) {
    int[] level = { 0 }, opt = { 0 };

    if (NET_MapSocketOption(cmd, level, opt) < 0) {
        JNU_ThrowByName(env, JNU_JAVANETPKG+"SocketException",
                                     "Invalid option");
        return;
    }

    if (NET_SetSockOpt(fd, level[0], opt[0], value) < 0) {
        NET_ThrowNew(env, WSAGetLastError(), "setsockopt");
    }
}

/*
 * Class:     java_net_DualStackPlainDatagramSocketImpl
 * Method:    socketGetIntOption
 * Signature: (II)I
 */
static int socketGetIntOption
  (JNIEnv env, cli.System.Net.Sockets.Socket fd, int cmd) {
    int[] level = { 0 }, opt = { 0 }, result = { 0 };

    if (NET_MapSocketOption(cmd, level, opt) < 0) {
        JNU_ThrowByName(env, JNU_JAVANETPKG+"SocketException",
                                     "Invalid option");
        return -1;
    }

    if (NET_GetSockOpt(fd, level[0], opt[0], result) < 0) {
        NET_ThrowNew(env, WSAGetLastError(), "getsockopt");
        return -1;
    }

    return result[0];
}
}
@


1.4
log
@First part of OpenJDK 8 integration.
@
text
@d382 4
a385 2
            /* stuff the new Inetaddress into the packet */
            dpObj.address = packetAddress;
@


1.3
log
@Merged OpenJDK 7u40 changes to use SO_EXCLUSIVEADDRUSE for datagram sockets that don't use SO_REUSEADDR.
@
text
@d2 1
a2 1
 * Copyright (c) 2007, Oracle and/or its affiliates. All rights reserved.
d266 6
a272 1
    /*
a273 6
        /* Note: the buffer needn't be greater than 65,536 (0xFFFF)
         * the max size of an IP packet. Anything bigger is truncated anyway.
         *-/
        if (packetBufferLen > MAX_PACKET_LEN) {
            packetBufferLen = MAX_PACKET_LEN;
        }
@


1.2
log
@Implemented dual stack sockets.
@
text
@d130 1
a130 1
  (JNIEnv env, cli.System.Net.Sockets.Socket fd, InetAddress iaObj, int port) {
d139 1
a139 2

    rv = bind(fd, sa);
d277 1
a277 1
            JNU_ThrowOutOfMemoryError(env, "heap allocation failed");
d426 1
a426 1
            JNU_ThrowOutOfMemoryError(env, "heap allocation failed");
@


1.1
log
@Prepare for forking.
@
text
@d25 16
d54 1
a54 1
static jboolean purgeOutstandingICMP(JNIEnv *env, jint fd)
d56 5
a60 6
    jboolean got_icmp = JNI_FALSE;
    char buf[1];
    fd_set tbl;
    struct timeval t = { 0, 0 };
    struct sockaddr_in rmtaddr;
    int addrlen = sizeof(rmtaddr);
d66 4
a69 4
    FD_ZERO(&tbl);
    FD_SET(fd, &tbl);
    while(1) {
        if (select(/*ignored*/fd+1, &tbl, 0, 0, &t) <= 0) {
d73 1
a73 1
                         (struct sockaddr *)&rmtaddr, &addrlen) != JVM_IO_ERR) {
d81 1
a81 1
        recvfrom(fd, buf, 1, 0,  (struct sockaddr *)&rmtaddr, &addrlen);
d93 4
a96 4
JNIEXPORT jint JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketCreate
  (JNIEnv *env, jclass clazz, jboolean v6Only /*unused*/) {
    int fd, rv, opt=0, t=TRUE;
    DWORD x1, x2; /* ignored result codes */
d98 1
a98 1
    fd = (int) socket(AF_INET6, SOCK_DGRAM, 0);
d101 1
a101 1
        return -1;
d104 1
a104 1
    rv = setsockopt(fd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &opt, sizeof(opt));
d107 1
a107 1
        return -1;
d110 2
a111 2
    SetHandleInformation((HANDLE)(UINT_PTR)fd, HANDLE_FLAG_INHERIT, FALSE);
    NET_SetSockOpt(fd, SOL_SOCKET, SO_BROADCAST, (char*)&t, sizeof(BOOL));
d119 1
a119 1
    WSAIoctl(fd ,SIO_UDP_CONNRESET ,&t ,sizeof(t) ,&x1 ,sizeof(x1) ,&x2 ,0 ,0);
d129 2
a130 2
JNIEXPORT void JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketBind
  (JNIEnv *env, jclass clazz, jint fd, jobject iaObj, jint port) {
d132 1
a133 1
    int sa_len = sizeof(sa);
d135 2
a136 2
    if (NET_InetAddressToSockaddr(env, iaObj, port, (struct sockaddr *)&sa,
                                 &sa_len, JNI_TRUE) != 0) {
d140 1
a140 1
    rv = bind(fd, (struct sockaddr *)&sa, sa_len);
d155 2
a156 2
JNIEXPORT void JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketConnect
  (JNIEnv *env, jclass clazz, jint fd, jobject iaObj, jint port) {
d158 1
a159 2
    int sa_len = sizeof(sa);
    DWORD x1, x2; /* ignored result codes */
d162 2
a163 2
    if (NET_InetAddressToSockaddr(env, iaObj, port, (struct sockaddr *)&sa,
                                   &sa_len, JNI_TRUE) != 0) {
d167 1
a167 1
    rv = connect(fd, (struct sockaddr *)&sa, sa_len);
d174 1
a174 1
    WSAIoctl(fd, SIO_UDP_CONNRESET, &t, sizeof(t), &x1, sizeof(x1), &x2, 0, 0);
d182 2
a183 2
JNIEXPORT void JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketDisconnect
  (JNIEnv *env, jclass clazz, jint fd ) {
d185 1
a185 3
    int sa_len = sizeof(sa);
    DWORD x1, x2; /* ignored result codes */
    int t = FALSE;
d187 1
a187 2
    memset(&sa, 0, sa_len);
    connect(fd, (struct sockaddr *)&sa, sa_len);
d190 1
a190 1
    WSAIoctl(fd, SIO_UDP_CONNRESET, &t, sizeof(t), &x1, sizeof(x1), &x2, 0, 0);
d198 2
a199 2
JNIEXPORT void JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketClose
  (JNIEnv *env, jclass clazz , jint fd) {
d209 2
a210 2
JNIEXPORT jint JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketLocalPort
  (JNIEnv *env, jclass clazz, jint fd) {
d212 1
a212 1
    int len = sizeof(sa);
d214 1
a214 1
    if (getsockname(fd, (struct sockaddr *)&sa, &len) == SOCKET_ERROR) {
d218 1
a218 1
    return (int) ntohs((u_short)GET_PORT(&sa));
d226 2
a227 2
JNIEXPORT jobject JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketLocalAddress
  (JNIEnv *env , jclass clazz, jint fd) {
d229 3
a231 3
    int len = sizeof(sa);
    jobject iaObj;
    int port;
d233 1
a233 1
    if (getsockname(fd, (struct sockaddr *)&sa, &len) == SOCKET_ERROR) {
d235 1
a235 1
        return NULL;
d238 1
a238 1
    iaObj = NET_SockaddrToInetAddress(env, (struct sockaddr *)&sa, &port);
d247 3
a249 3
JNIEXPORT jint JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketReceiveOrPeekData
  (JNIEnv *env, jclass clazz, jint fd, jobject dpObj,
   jint timeout, jboolean connected, jboolean peek) {
d251 1
a251 1
    int sa_len = sizeof(sa);
d253 2
a254 4
    char BUF[MAX_BUFFER_LEN];
    char *fullPacket;
    BOOL retry;
    jlong prevTime = 0;
d256 2
a257 2
    jint packetBufferOffset, packetBufferLen;
    jbyteArray packetBuffer;
d264 3
a266 3
    packetBuffer = (*env)->GetObjectField(env, dpObj, dp_bufID);
    packetBufferOffset = (*env)->GetIntField(env, dpObj, dp_offsetID);
    packetBufferLen = (*env)->GetIntField(env, dpObj, dp_bufLengthID);
d268 1
d272 1
a272 1
         */
d284 1
d287 1
a287 1
        retry = FALSE;
d289 1
a289 1
        if (timeout) {
d296 1
a296 1
                    JNU_ThrowByName(env,JNU_JAVANETPKG "SocketTimeoutException",
d299 1
a299 1
                    JNU_ThrowByName(env, JNU_JAVANETPKG "SocketException",
d302 1
a302 1
                    JNU_ThrowByName(env, JNU_JAVAIOPKG "InterruptedIOException",
a304 3
                if (packetBufferLen > MAX_BUFFER_LEN) {
                    free(fullPacket);
                }
d310 2
a311 2
        rv = recvfrom(fd, fullPacket, packetBufferLen, flags,
                    (struct sockaddr *)&sa, &sa_len);
d321 1
a321 1
                JNU_ThrowByName(env, JNU_JAVANETPKG "PortUnreachableException",
a322 2
                if (packetBufferLen > MAX_BUFFER_LEN)
                    free(fullPacket);
d324 1
a324 1
            } else if (timeout) {
d326 2
a327 2
                jlong newTime = JVM_CurrentTimeMillis(env, 0);
                timeout -= (jint)(newTime - prevTime);
d329 1
a329 1
                    JNU_ThrowByName(env, JNU_JAVANETPKG "SocketTimeoutException",
a330 2
                    if (packetBufferLen > MAX_BUFFER_LEN)
                        free(fullPacket);
d335 1
a335 1
            retry = TRUE;
d339 1
a339 1
    port = (int) ntohs ((u_short) GET_PORT((SOCKETADDRESS *)&sa));
d354 1
a354 1
            (*env)->SetIntField(env, dpObj, dp_lengthID, 0);
d359 1
a359 1
        JNU_ThrowByName(env, JNU_JAVANETPKG "SocketException", "socket closed");
d361 1
a361 1
        JNU_ThrowByName(env, JNU_JAVAIOPKG "InterruptedIOException",
d366 1
a366 1
        jobject packetAddress;
d372 1
a372 1
        packetAddress = (*env)->GetObjectField(env, dpObj, dp_addressID);
d374 1
a374 1
            if (!NET_SockaddrEqualsInetAddress(env, (struct sockaddr *)&sa,
d377 1
a377 1
                packetAddress = NULL;
d381 3
a383 2
            packetAddress = NET_SockaddrToInetAddress(env, (struct sockaddr *)&sa,
                                                      &port);
d385 1
a385 1
            (*env)->SetObjectField(env, dpObj, dp_addressID, packetAddress);
d389 2
a390 4
        (*env)->SetByteArrayRegion(env, packetBuffer, packetBufferOffset, rv,
                                   (jbyte *)fullPacket);
        (*env)->SetIntField(env, dpObj, dp_portID, port);
        (*env)->SetIntField(env, dpObj, dp_lengthID, rv);
a392 3
    if (packetBufferLen > MAX_BUFFER_LEN) {
        free(fullPacket);
    }
d401 3
a403 3
JNIEXPORT void JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketSend
  (JNIEnv *env, jclass clazz, jint fd, jbyteArray data, jint offset, jint length,
     jobject iaObj, jint port, jboolean connected) {
a404 4
    int sa_len = sizeof(sa);
    SOCKETADDRESS *sap = &sa;
    char BUF[MAX_BUFFER_LEN];
    char *fullPacket;
d408 1
a408 2
        sap = 0; /* arg to JVM_Sendto () null in this case */
        sa_len = 0;
d410 3
a412 2
        if (NET_InetAddressToSockaddr(env, iaObj, port, (struct sockaddr *)&sa,
                                       &sa_len, JNI_TRUE) != 0) {
d417 1
d421 1
a421 1
         */
d433 1
d435 1
a435 3
    (*env)->GetByteArrayRegion(env, data, offset, length,
                               (jbyte *)fullPacket);
    rv = sendto(fd, fullPacket, length, 0, (struct sockaddr *)sap, sa_len);
d440 1
a440 1
            JNU_ThrowByName(env, JNU_JAVAIOPKG "InterruptedIOException",
a444 3
    if (length > MAX_BUFFER_LEN) {
        free(fullPacket);
    }
d452 3
a454 3
JNIEXPORT void JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketSetIntOption
  (JNIEnv *env, jclass clazz, jint fd , jint cmd, jint value) {
    int level, opt;
d456 2
a457 2
    if (NET_MapSocketOption(cmd, &level, &opt) < 0) {
        JNU_ThrowByNameWithLastError(env, JNU_JAVANETPKG "SocketException",
d462 1
a462 1
    if (NET_SetSockOpt(fd, level, opt, (char *)&value, sizeof(value)) < 0) {
d472 3
a474 4
JNIEXPORT jint JNICALL Java_java_net_DualStackPlainDatagramSocketImpl_socketGetIntOption
  (JNIEnv *env, jclass clazz, jint fd, jint cmd) {
    int level, opt, result=0;
    int result_len = sizeof(result);
d476 2
a477 2
    if (NET_MapSocketOption(cmd, &level, &opt) < 0) {
        JNU_ThrowByNameWithLastError(env, JNU_JAVANETPKG "SocketException",
d482 1
a482 1
    if (NET_GetSockOpt(fd, level, opt, (void *)&result, &result_len) < 0) {
d487 2
a488 1
    return result;
@

