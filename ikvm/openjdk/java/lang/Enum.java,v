head	1.6;
access;
symbols
	v8_1_5717_0:1.6
	v8_1:1.6.0.4
	v8_0_5449_1:1.6
	v8_0_5449_0:1.6
	v8_0:1.6.0.2
	v7_4_5196_0:1.5
	v7_4:1.5.0.10
	v7_3:1.5.0.8
	v7_2_4630_6:1.5
	v7_2_4630_5:1.5
	v7_2_4630_4:1.5
	v7_2_4630_3:1.5
	v7_2_4630_2:1.5
	v0_46_0_4:1.4
	v7_2_4630_1:1.5
	v7_2:1.5.0.6
	v7_1_4532_2:1.5
	v7_1_4532_1:1.5
	v7_1_4532_0:1.5
	v7_1:1.5.0.4
	v7_0_4335_3:1.5
	v7_0_4335_2:1.5
	v7_0_4335_1:1.5
	v0_46_0_2:1.4
	v7_0_4335_0:1.5
	v7_0:1.5.0.2
	v0_46_0_1:1.4
	v0_46_0_0:1.4
	v0_46:1.4.0.2
	v0_44_0_6:1.3
	v0_44_0_5:1.3
	v0_44_0_4:1.3
	v0_44_0_3:1.3
	v0_44_0_2:1.3
	v0_42_0_7:1.2
	v0_44_0_1:1.3
	v0_44_0_0:1.3
	v0_44:1.3.0.2
	v0_42_0_6:1.2
	v0_42_0_5:1.2
	v0_42_0_4:1.2
	v0_42_0_3:1.2
	v0_42_0_2:1.2
	v0_42_0_1:1.2
	v0_42_0_0:1.2
	v0_42:1.2.0.2;
locks; strict;
comment	@# @;


1.6
date	2014.05.19.12.43.38;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.19.12.14.33;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.24.16.40.22;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.12.04.17.40;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2009.07.29.09.36.56;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2009.07.29.08.35.43;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.6
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 2003, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package java.lang;

import java.io.Serializable;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectStreamException;
import cli.System.Runtime.Serialization.IObjectReference;
import cli.System.Runtime.Serialization.SerializationException;
import cli.System.Runtime.Serialization.SerializationInfo;
import cli.System.Runtime.Serialization.StreamingContext;

/**
 * This is the common base class of all Java language enumeration types.
 *
 * More information about enums, including descriptions of the
 * implicitly declared methods synthesized by the compiler, can be
 * found in section 8.9 of
 * <cite>The Java&trade; Language Specification</cite>.
 *
 * <p> Note that when using an enumeration type as the type of a set
 * or as the type of the keys in a map, specialized and efficient
 * {@@linkplain java.util.EnumSet set} and {@@linkplain
 * java.util.EnumMap map} implementations are available.
 *
 * @@param <E> The enum type subclass
 * @@author  Josh Bloch
 * @@author  Neal Gafter
 * @@see     Class#getEnumConstants()
 * @@see     java.util.EnumSet
 * @@see     java.util.EnumMap
 * @@since   1.5
 */
@@cli.System.SerializableAttribute.Annotation
public abstract class Enum<E extends Enum<E>>
        implements Comparable<E>, Serializable {
    /**
     * The name of this enum constant, as declared in the enum declaration.
     * Most programmers should use the {@@link #toString} method rather than
     * accessing this field.
     */
    private final String name;

    /**
     * Returns the name of this enum constant, exactly as declared in its
     * enum declaration.
     *
     * <b>Most programmers should use the {@@link #toString} method in
     * preference to this one, as the toString method may return
     * a more user-friendly name.</b>  This method is designed primarily for
     * use in specialized situations where correctness depends on getting the
     * exact name, which will not vary from release to release.
     *
     * @@return the name of this enum constant
     */
    public final String name() {
        return name;
    }

    /**
     * The ordinal of this enumeration constant (its position
     * in the enum declaration, where the initial constant is assigned
     * an ordinal of zero).
     *
     * Most programmers will have no use for this field.  It is designed
     * for use by sophisticated enum-based data structures, such as
     * {@@link java.util.EnumSet} and {@@link java.util.EnumMap}.
     */
    private final int ordinal;

    /**
     * Returns the ordinal of this enumeration constant (its position
     * in its enum declaration, where the initial constant is assigned
     * an ordinal of zero).
     *
     * Most programmers will have no use for this method.  It is
     * designed for use by sophisticated enum-based data structures, such
     * as {@@link java.util.EnumSet} and {@@link java.util.EnumMap}.
     *
     * @@return the ordinal of this enumeration constant
     */
    public final int ordinal() {
        return ordinal;
    }

    /**
     * Sole constructor.  Programmers cannot invoke this constructor.
     * It is for use by code emitted by the compiler in response to
     * enum type declarations.
     *
     * @@param name - The name of this enum constant, which is the identifier
     *               used to declare it.
     * @@param ordinal - The ordinal of this enumeration constant (its position
     *         in the enum declaration, where the initial constant is assigned
     *         an ordinal of zero).
     */
    protected Enum(String name, int ordinal) {
        this.name = name;
        this.ordinal = ordinal;
    }

    /**
     * Returns the name of this enum constant, as contained in the
     * declaration.  This method may be overridden, though it typically
     * isn't necessary or desirable.  An enum type should override this
     * method when a more "programmer-friendly" string form exists.
     *
     * @@return the name of this enum constant
     */
    public String toString() {
        return name;
    }

    /**
     * Returns true if the specified object is equal to this
     * enum constant.
     *
     * @@param other the object to be compared for equality with this object.
     * @@return  true if the specified object is equal to this
     *          enum constant.
     */
    public final boolean equals(Object other) {
        return this==other;
    }

    /**
     * Returns a hash code for this enum constant.
     *
     * @@return a hash code for this enum constant.
     */
    public final int hashCode() {
        return super.hashCode();
    }

    /**
     * Throws CloneNotSupportedException.  This guarantees that enums
     * are never cloned, which is necessary to preserve their "singleton"
     * status.
     *
     * @@return (never returns)
     */
    protected final Object clone() throws CloneNotSupportedException {
        throw new CloneNotSupportedException();
    }

    /**
     * Compares this enum with the specified object for order.  Returns a
     * negative integer, zero, or a positive integer as this object is less
     * than, equal to, or greater than the specified object.
     *
     * Enum constants are only comparable to other enum constants of the
     * same enum type.  The natural order implemented by this
     * method is the order in which the constants are declared.
     */
    public final int compareTo(E o) {
        Enum<?> other = (Enum<?>)o;
        Enum<E> self = this;
        if (self.getClass() != other.getClass() && // optimization
            self.getDeclaringClass() != other.getDeclaringClass())
            throw new ClassCastException();
        return self.ordinal - other.ordinal;
    }

    /**
     * Returns the Class object corresponding to this enum constant's
     * enum type.  Two enum constants e1 and  e2 are of the
     * same enum type if and only if
     *   e1.getDeclaringClass() == e2.getDeclaringClass().
     * (The value returned by this method may differ from the one returned
     * by the {@@link Object#getClass} method for enum constants with
     * constant-specific class bodies.)
     *
     * @@return the Class object corresponding to this enum constant's
     *     enum type
     */
    @@SuppressWarnings("unchecked")
    public final Class<E> getDeclaringClass() {
        Class<?> clazz = getClass();
        Class<?> zuper = clazz.getSuperclass();
        return (zuper == Enum.class) ? (Class<E>)clazz : (Class<E>)zuper;
    }

    /**
     * Returns the enum constant of the specified enum type with the
     * specified name.  The name must match exactly an identifier used
     * to declare an enum constant in this type.  (Extraneous whitespace
     * characters are not permitted.)
     *
     * <p>Note that for a particular enum type {@@code T}, the
     * implicitly declared {@@code public static T valueOf(String)}
     * method on that enum may be used instead of this method to map
     * from a name to the corresponding enum constant.  All the
     * constants of an enum type can be obtained by calling the
     * implicit {@@code public static T[] values()} method of that
     * type.
     *
     * @@param <T> The enum type whose constant is to be returned
     * @@param enumType the {@@code Class} object of the enum type from which
     *      to return a constant
     * @@param name the name of the constant to return
     * @@return the enum constant of the specified enum type with the
     *      specified name
     * @@throws IllegalArgumentException if the specified enum type has
     *         no constant with the specified name, or the specified
     *         class object does not represent an enum type
     * @@throws NullPointerException if {@@code enumType} or {@@code name}
     *         is null
     * @@since 1.5
     */
    public static <T extends Enum<T>> T valueOf(Class<T> enumType,
                                                String name) {
        T result = enumType.enumConstantDirectory().get(name);
        if (result != null)
            return result;
        if (name == null)
            throw new NullPointerException("Name is null");
        throw new IllegalArgumentException(
            "No enum constant " + enumType.getCanonicalName() + "." + name);
    }

    /**
     * enum classes cannot have finalize methods.
     */
    protected final void finalize() { }

    /**
     * prevent default deserialization
     */
    private void readObject(ObjectInputStream in) throws IOException,
        ClassNotFoundException {
        throw new InvalidObjectException("can't deserialize enum");
    }

    private void readObjectNoData() throws ObjectStreamException {
        throw new InvalidObjectException("can't deserialize enum");
    }
    
    // [IKVM] .NET serialization support starts here
    // Note that we don't have a security demand, because the info is harmless.
    @@cli.IKVM.Attributes.HideFromJavaAttribute.Annotation
    @@cli.System.Security.SecurityCriticalAttribute.Annotation
    public final void GetObjectData(SerializationInfo info, StreamingContext context)
    {
        info.AddValue("enumType", getDeclaringClass());
        info.AddValue("name", name);
        info.SetType(ikvm.runtime.Util.getInstanceTypeFromClass(EnumSerializationProxy.class));
    }
}

@@cli.System.SerializableAttribute.Annotation
final class EnumSerializationProxy implements IObjectReference
{
    private Class enumType;
    private String name;
    
    @@cli.System.Security.SecurityCriticalAttribute.Annotation
    public Object GetRealObject(StreamingContext context)
    {
        try
        {
            return Enum.valueOf(enumType, name);
        }
        catch (IllegalArgumentException x)
        {
            ikvm.runtime.Util.throwException(new SerializationException("Enum value " + name + " not found in " + enumType, x));
            return null;
        }
    }
}
@


1.5
log
@Updated java.lang.Enum to OpenJDK 7.
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2009, Oracle and/or its affiliates. All rights reserved.
d181 2
a182 2
        Enum other = (Enum)o;
        Enum self = this;
d201 1
d203 3
a205 3
        Class clazz = getClass();
        Class zuper = clazz.getSuperclass();
        return (zuper == Enum.class) ? clazz : zuper;
@


1.4
log
@Integrated OpenJDK 6 b21.
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2007, Oracle and/or its affiliates. All rights reserved.
d41 11
d55 2
d213 9
d242 1
a242 1
            "No enum const " + enumType +"." + name);
d255 1
a255 1
            throw new InvalidObjectException("can't deserialize enum");
d259 1
a259 1
            throw new InvalidObjectException("can't deserialize enum");
@


1.3
log
@Prep for .NET 4.0 security model:
- serialization methods must be critical.
@
text
@d2 1
a2 1
 * Copyright 2003-2007 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.2
log
@Implemented support for .NET serialization of Java enums.
(The CreateEnumEnum move in FakeTypes.cs is because java.lang.Enum now has a dependency on custom attribute annotations.)
@
text
@d243 1
d258 1
@


1.1
log
@Prepare for forking java/lang/Enum.java.
@
text
@d33 4
d46 1
d239 30
@

