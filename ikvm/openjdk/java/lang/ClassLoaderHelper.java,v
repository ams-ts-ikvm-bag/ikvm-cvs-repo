head	1.3;
access;
symbols
	v8_1_5717_0:1.3
	v8_1:1.3.0.4
	v8_0_5449_1:1.3
	v8_0_5449_0:1.3
	v8_0:1.3.0.2
	v7_4_5196_0:1.2
	v7_4:1.2.0.8
	v7_3:1.2.0.6
	v7_2_4630_6:1.2
	v7_2_4630_5:1.2
	v7_2_4630_4:1.2
	v7_2_4630_3:1.2
	v7_2_4630_2:1.2
	v7_2_4630_1:1.2
	v7_2:1.2.0.4
	v7_1_4532_2:1.2
	v7_1_4532_1:1.2
	v7_1_4532_0:1.2
	v7_1:1.2.0.2;
locks; strict;
comment	@# @;


1.3
date	2014.04.30.10.11.09;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2012.05.23.14.25.32;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2012.05.23.10.52.35;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Merge OpenJDK 8 change and reduce differences by restructuring a bit.
@
text
@/*
 * Copyright (c) 2012, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */
package java.lang;

import java.io.File;

class ClassLoaderHelper {

    private ClassLoaderHelper() {}

    /**
     * Returns an alternate path name for the given file
     * such that if the original pathname did not exist, then the
     * file may be located at the alternate location.
     * For mac, this replaces the final .dylib suffix with .jnilib
     */
    static File mapAlternativeName(File lib) {
        if (!ikvm.internal.Util.MACOSX) {
            return null;
        }
        String name = lib.toString();
        int index = name.lastIndexOf('.');
        if (index < 0) {
            return null;
        }
        return new File(name.substring(0, index) + ".jnilib");
    }
}
@


1.2
log
@First part of forked file merge of OpenJDK 7u4 changes.
@
text
@d40 1
a40 8
        if (ikvm.internal.Util.MACOSX) {
            String name = lib.toString();
            int index = name.toLowerCase().lastIndexOf(".dylib");
            if (index < 0) {
                return null;
            }
            return new File(name.substring(0, index) + ".jnilib");
        } else {
d43 6
@


1.1
log
@Prepare for forking.
@
text
@d40 8
a47 3
        String name = lib.toString();
        int index = name.toLowerCase().lastIndexOf(".dylib");
        if (index < 0) {
a49 1
        return new File(name.substring(0, index) + ".jnilib");
@

