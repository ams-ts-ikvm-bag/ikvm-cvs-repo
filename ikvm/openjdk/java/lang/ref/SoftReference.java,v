head	1.6;
access;
symbols
	v8_1_5717_0:1.6
	v8_1:1.6.0.6
	v8_0_5449_1:1.6
	v8_0_5449_0:1.6
	v8_0:1.6.0.4
	v7_4_5196_0:1.6
	v7_4:1.6.0.2
	v7_3:1.5.0.8
	v7_2_4630_6:1.5
	v7_2_4630_5:1.5
	v7_2_4630_4:1.5
	v7_2_4630_3:1.5
	v7_2_4630_2:1.5
	v0_46_0_4:1.4
	v7_2_4630_1:1.5
	v7_2:1.5.0.6
	v7_1_4532_2:1.5
	v7_1_4532_1:1.5
	v7_1_4532_0:1.5
	v7_1:1.5.0.4
	v7_0_4335_3:1.5
	v7_0_4335_2:1.5
	v7_0_4335_1:1.5
	v0_46_0_2:1.4
	v7_0_4335_0:1.5
	v7_0:1.5.0.2
	v0_40_0_6:1.3
	v0_40_0_5:1.3
	v0_46_0_1:1.4
	v0_46_0_0:1.4
	v0_46:1.4.0.2
	v0_36_0_14:1.1
	v0_44_0_6:1.3
	v0_44_0_5:1.3
	v0_44_0_4:1.3
	v0_44_0_3:1.3
	v0_44_0_2:1.3
	v0_42_0_7:1.3
	v0_44_0_1:1.3
	v0_44_0_0:1.3
	v0_44:1.3.0.8
	v0_42_0_6:1.3
	v0_42_0_5:1.3
	v0_42_0_4:1.3
	v0_42_0_3:1.3
	v0_42_0_2:1.3
	v0_42_0_1:1.3
	v0_42_0_0:1.3
	v0_42:1.3.0.6
	v0_40_0_3:1.3
	v0_40_0_2:1.3
	v0_40_0_1:1.3
	v0_40_0_0:1.3
	v0_40:1.3.0.4
	v0_36_0_13:1.1
	v0_38_0_1:1.3
	v0_38_0_0:1.3
	v0_38:1.3.0.2
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2014.03.05.09.39.07;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2011.06.29.13.28.05;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.24.16.40.22;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.12.09.09.43;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.05.21;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.08.29.06.21.28;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Change Reference, SoftReference and ReferenceQueue to make ReferenceQueue more efficient.
@
text
@/*
 * Copyright (c) 1997, 2003, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package java.lang.ref;


/**
 * Soft reference objects, which are cleared at the discretion of the garbage
 * collector in response to memory demand.  Soft references are most often used
 * to implement memory-sensitive caches.
 *
 * <p> Suppose that the garbage collector determines at a certain point in time
 * that an object is <a href="package-summary.html#reachability">softly
 * reachable</a>.  At that time it may choose to clear atomically all soft
 * references to that object and all soft references to any other
 * softly-reachable objects from which that object is reachable through a chain
 * of strong references.  At the same time or at some later time it will
 * enqueue those newly-cleared soft references that are registered with
 * reference queues.
 *
 * <p> All soft references to softly-reachable objects are guaranteed to have
 * been cleared before the virtual machine throws an
 * <code>OutOfMemoryError</code>.  Otherwise no constraints are placed upon the
 * time at which a soft reference will be cleared or the order in which a set
 * of such references to different objects will be cleared.  Virtual machine
 * implementations are, however, encouraged to bias against clearing
 * recently-created or recently-used soft references.
 *
 * <p> Direct instances of this class may be used to implement simple caches;
 * this class or derived subclasses may also be used in larger data structures
 * to implement more sophisticated caches.  As long as the referent of a soft
 * reference is strongly reachable, that is, is actually in use, the soft
 * reference will not be cleared.  Thus a sophisticated cache can, for example,
 * prevent its most recently used entries from being discarded by keeping
 * strong referents to those entries, leaving the remaining entries to be
 * discarded at the discretion of the garbage collector.
 *
 * @@author   Mark Reinhold
 * @@since    1.2
 */

public class SoftReference<T> extends Reference<T> {

    /**
     * Timestamp clock, updated by the garbage collector
     */
    static private long clock;

    /**
     * Timestamp updated by each invocation of the get method.  The VM may use
     * this field when selecting soft references to be cleared, but it is not
     * required to do so.
     */
    private long timestamp;

    /**
     * Creates a new soft reference that refers to the given object.  The new
     * reference is not registered with any queue.
     *
     * @@param referent object the new soft reference will refer to
     */
    public SoftReference(T referent) {
        this(referent, null);
    }

    /**
     * Creates a new soft reference that refers to the given object and is
     * registered with the given queue.
     *
     * @@param referent object the new soft reference will refer to
     * @@param q the queue with which the reference is to be registered,
     *          or <tt>null</tt> if registration is not required
     *
     */
    public SoftReference(T referent, ReferenceQueue<? super T> q) {
        super(referent, q);
        setStrongRef(referent);
    }

    /**
     * Returns this reference object's referent.  If this reference object has
     * been cleared, either by the program or by the garbage collector, then
     * this method returns <code>null</code>.
     *
     * @@return   The object to which this reference refers, or
     *           <code>null</code> if this reference object has been cleared
     */
    public T get() {
        T o = strongRef;
        if (o != null) {
            return o;
        }
        o = super.get();
        setStrongRef(o);
        return o;
    }

    private void setStrongRef(T referent)
    {
        if (referent != null) {
            strongRef = referent;
            if (!(referent instanceof Class && noclassgc())) {
                new Object() {
                    protected void finalize() {
                        strongRef = null;
                    }
                };
            }
        }
    }
}
@


1.5
log
@Updated java.lang.ref package to OpenJDK 7.
@
text
@d85 1
a85 2
        super(referent);
        strongRef = referent;
d99 1
a99 1
        strongRef = referent;
d111 6
a116 2
        T o = super.get();
        strongRef = o;
d120 13
@


1.4
log
@Integrated OpenJDK 6 b21.
@
text
@d66 2
a67 1
    /* Timestamp clock, updated by the garbage collector
d71 2
a72 1
    /* Timestamp updated by each invocation of the get method.  The VM may use
@


1.3
log
@Merged OpenJDK 6 b10 whitespace and comment changes.
@
text
@d2 1
a2 1
 * Copyright 1997-2003 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.2
log
@Converted tabs to spaces.
@
text
@a59 1
 * @@version  1.41, 05/05/07
@


1.1
log
@New SoftReference implementation.
@
text
@d84 2
a85 2
	super(referent);
	strongRef = referent;
d98 2
a99 2
	super(referent, q);
	strongRef = referent;
d111 3
a113 3
	T o = super.get();
	strongRef = o;
	return o;
@

