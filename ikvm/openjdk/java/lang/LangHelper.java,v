head	1.21;
access;
symbols
	v8_1_5717_0:1.21
	v8_1:1.21.0.4
	v8_0_5449_1:1.21
	v8_0_5449_0:1.21
	v8_0:1.21.0.2
	v7_4_5196_0:1.19
	v7_4:1.19.0.4
	v7_3:1.19.0.2
	v7_2_4630_6:1.15
	v7_2_4630_5:1.15
	v7_2_4630_4:1.15
	v7_2_4630_3:1.15
	v7_2_4630_2:1.15
	v0_46_0_4:1.12
	v7_2_4630_1:1.15
	v7_2:1.15.0.2
	v7_1_4532_2:1.14
	v7_1_4532_1:1.14
	v7_1_4532_0:1.14
	v7_1:1.14.0.2
	v7_0_4335_3:1.13
	v7_0_4335_2:1.13
	v7_0_4335_1:1.13
	v0_46_0_2:1.12
	v7_0_4335_0:1.13
	v7_0:1.13.0.2
	v0_40_0_6:1.10
	v0_40_0_5:1.10
	v0_46_0_1:1.12
	v0_46_0_0:1.12
	v0_46:1.12.0.6
	v0_36_0_14:1.4.2.2
	v0_44_0_6:1.12
	v0_44_0_5:1.12
	v0_44_0_4:1.12
	v0_44_0_3:1.12
	v0_44_0_2:1.12
	v0_42_0_7:1.12
	v0_44_0_1:1.12
	v0_44_0_0:1.12
	v0_44:1.12.0.4
	v0_42_0_6:1.12
	v0_42_0_5:1.12
	v0_42_0_4:1.12
	v0_42_0_3:1.12
	v0_42_0_2:1.12
	v0_42_0_1:1.12
	v0_42_0_0:1.12
	v0_42:1.12.0.2
	v0_40_0_3:1.10
	v0_40_0_2:1.10
	v0_40_0_1:1.10
	v0_40_0_0:1.10
	v0_40:1.10.0.4
	v0_36_0_13:1.4.2.2
	v0_38_0_1:1.10
	v0_38_0_0:1.10
	v0_38:1.10.0.2
	v0_36_0_9:1.4.2.2
	v0_36_0_7:1.4.2.2
	v0_36_0_5:1.4.2.2
	v0_36_0_4:1.4.2.1
	v0_36_0_3:1.4.2.1
	v0_36_0_2:1.4.2.1
	v0_36_0_1:1.4.2.1
	v0_36_0_0:1.4
	v0_36:1.4.0.2;
locks; strict;
comment	@# @;


1.21
date	2014.06.04.14.32.10;	author jfrijters;	state Exp;
branches;
next	1.20;

1.20
date	2014.05.19.12.43.38;	author jfrijters;	state Exp;
branches;
next	1.19;

1.19
date	2013.02.28.07.43.17;	author jfrijters;	state Exp;
branches;
next	1.18;

1.18
date	2013.02.23.08.27.18;	author jfrijters;	state Exp;
branches;
next	1.17;

1.17
date	2013.02.21.13.49.03;	author jfrijters;	state Exp;
branches;
next	1.16;

1.16
date	2013.02.21.13.31.03;	author jfrijters;	state Exp;
branches;
next	1.15;

1.15
date	2012.08.31.11.24.28;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2012.05.23.09.43.53;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2011.06.29.16.30.05;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2009.07.03.06.57.06;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2009.07.03.05.55.58;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2008.06.11.09.05.16;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2008.04.23.04.25.21;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2007.12.27.15.16.49;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2007.10.25.12.56.23;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2007.10.22.05.13.08;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2007.09.07.12.37.26;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2007.08.16.14.05.02;	author jfrijters;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2007.06.09.08.33.09;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.05.06.57.18;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.24.09.23.03;	author jfrijters;	state Exp;
branches;
next	;

1.4.2.1
date	2007.09.13.07.30.07;	author jfrijters;	state Exp;
branches;
next	1.4.2.2;

1.4.2.2
date	2007.12.04.06.04.32;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.21
log
@Simplified AnnotationType meta annotation handling.
@
text
@/*
  Copyright (C) 2007-2014 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/

package java.lang;

import java.lang.annotation.Annotation;
import java.lang.reflect.Executable;
import java.security.AccessControlContext;
import java.util.Map;
import sun.nio.ch.Interruptible;
import sun.reflect.annotation.AnnotationType;

@@ikvm.lang.Internal
public class LangHelper
{
    public static sun.misc.JavaLangAccess getJavaLangAccess()
    {
        return new sun.misc.JavaLangAccess() {
            public sun.reflect.ConstantPool getConstantPool(Class klass) {
                return klass.getConstantPool();
            }
            public boolean casAnnotationType(Class<?> klass, AnnotationType oldType, AnnotationType newType) {
                return klass.casAnnotationType(oldType, newType);
            }
            public AnnotationType getAnnotationType(Class klass) {
                return klass.getAnnotationType();
            }
            public Map<Class<? extends Annotation>, Annotation> getDeclaredAnnotationMap(Class<?> klass) {
                return klass.getDeclaredAnnotationMap();
            }
            public byte[] getRawClassAnnotations(Class<?> klass) {
                throw new InternalError();
            }
            public byte[] getRawClassTypeAnnotations(Class<?> klass) {
                return klass.getRawTypeAnnotations();
            }
            public byte[] getRawExecutableTypeAnnotations(Executable executable) {
                return Class.getExecutableTypeAnnotationBytes(executable);
            }
            public <E extends Enum<E>>
                    E[] getEnumConstantsShared(Class<E> klass) {
                return klass.getEnumConstantsShared();
            }
            public void blockedOn(Thread t, Interruptible b) {
                t.blockedOn(b);
            }
            public void registerShutdownHook(int slot, boolean registerShutdownInProgress, Runnable hook) {
                Shutdown.add(slot, registerShutdownInProgress, hook);
            }
            public int getStackTraceDepth(Throwable t) {
                return t.getStackTraceDepth();
            }
            public StackTraceElement getStackTraceElement(Throwable t, int i) {
                return t.getStackTraceElement(i);
            }
            public String newStringUnsafe(char[] chars) {
                return String.valueOf(chars);
            }
            public Thread newThreadWithAcc(Runnable target, AccessControlContext acc) {
                return new Thread(target, acc);
            }
            public void invokeFinalize(Object o) throws Throwable {
                // we don't actually support invoking the finalize method explicitly
            }
        };
    }
}
@


1.20
log
@First part of OpenJDK 8 integration.
@
text
@a36 3
    static native sun.reflect.ConstantPool getConstantPool(Class klass);
    static native byte[] getRawClassAnnotations(Class<?> klass);

d41 1
a41 3
                // this returns a special purpose constant pool for use with getRawClassAnnotations only
                // and is only used for meta annotations
                return LangHelper.getConstantPool(klass);
d53 1
a53 2
                // this only returns the meta annotations Retention and Inherited
                return LangHelper.getRawClassAnnotations(klass);
@


1.19
log
@Made boot class package handling simpler (more OpenJDK based). The package information is now read from the manifest instead of hard coded.
@
text
@d2 1
a2 1
  Copyright (C) 2007-2011 Jeroen Frijters
d27 4
d37 3
d44 3
a46 1
                return null;
d48 2
a49 2
            public void setAnnotationType(Class klass, AnnotationType type) {
                klass.setAnnotationType(type);
d54 13
d83 8
a90 2
            public int getStringHash32(String string) {
                return StringHelper.hash32(string);
@


1.18
log
@Moved AssemblyClassLoader package definition to runtime.
@
text
@a26 7
import ikvm.runtime.AssemblyClassLoader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.AccessController;
import java.util.Enumeration;
import java.util.Map;
a28 1
import sun.security.action.GetPropertyAction;
a32 48
    private static boolean addedSystemPackages;

    private static void addSystemPackage(Map pkgMap)
    {
        // NOTE caller must have acquired lock on pkgMap
        if (!addedSystemPackages)
        {
            addedSystemPackages = true;
            String[] pkgs = getBootClassPackages();
            for (int i = 0; i < pkgs.length; i++)
            {
                pkgMap.put(pkgs[i],
                    new Package(pkgs[i],
                    VMSystemProperties.SPEC_TITLE,                 // specTitle
                    VMSystemProperties.SPEC_VERSION,               // specVersion
                    VMSystemProperties.SPEC_VENDOR,                // specVendor
                    "IKVM.NET OpenJDK",                            // implTitle
                    PropertyConstants.openjdk_version,             // implVersion
                    "Oracle Corporation & others",                 // implVendor
                    null,                                          // sealBase
                    null));                                        // class loader
            }
        }
    }
    
    private static native String[] getBootClassPackages();

    /* this method gets called by Package.getSystemPackage() via a redefined method in map.xml */
    static Package getSystemPackage(Map pkgs, String name)
    {
        synchronized (pkgs)
        {
            addSystemPackage(pkgs);
            return (Package)pkgs.get(name);
        }
    }

    /* this method gets called by Package.getSystemPackages() via a redefined method in map.xml */
    static Package[] getSystemPackages(Map pkgs)
    {
        synchronized (pkgs)
        {
            addSystemPackage(pkgs);
            return (Package[])pkgs.values().toArray(new Package[pkgs.size()]);

        }
    }

@


1.17
log
@Removed map.xml patching of bootstrap resource loading methods in java.lang.ClassLoader.
@
text
@d49 1
a49 1
            String[] pkgs = AssemblyClassLoader.GetPackages(getBootstrapAssembly());
d65 2
a88 5
    private static cli.System.Reflection.Assembly getBootstrapAssembly()
    {
        return ikvm.runtime.Util.getInstanceTypeFromClass(Object.class).get_Assembly();
    }

@


1.16
log
@Removed remains of generic class loader support from AssemblyClassLoader.
@
text
@a91 10
    static URL getBootstrapResource(String name)
    {
        return AssemblyClassLoader.getResource(getBootstrapAssembly(), name);
    }

    static Enumeration getBootstrapResources(String name) throws IOException
    {
        return AssemblyClassLoader.getResources(getBootstrapAssembly(), name);
    }
    
@


1.15
log
@Merged OpenJDK 7u6.
@
text
@d94 1
a94 1
        return AssemblyClassLoader.getResource(null, getBootstrapAssembly(), name);
d99 1
a99 1
        return AssemblyClassLoader.getResources(null, getBootstrapAssembly(), name);
@


1.14
log
@Updated system property that still referred to Sun Microsystems instead of Oracle Corporation.
@
text
@d130 3
@


1.13
log
@Updated sun.misc.JavaLangAccess to OpenJDK 7.
@
text
@d59 1
a59 1
                    "Sun Microsystems, Inc. & others",             // implVendor
@


1.12
log
@- Set runtime version during build, instead of computing it a runtime.
- Set OpenJDK version in openjdk.build instead of VMSystemProperty source.
@
text
@d2 1
a2 1
  Copyright (C) 2007, 2008 Jeroen Frijters
d121 9
@


1.11
log
@Moved VMSystemProperties from gnu.classpath to java.lang.
@
text
@a49 1
            String openJdkVersion = AccessController.doPrivileged(new GetPropertyAction("openjdk.version", "unknown"));
d58 1
a58 1
                    openJdkVersion,                                // implVersion
@


1.10
log
@Converted tabs to spaces.
@
text
@a26 1
import gnu.classpath.VMSystemProperties;
@


1.9
log
@Refactored class library initialization.
@
text
@d50 2
a51 2
	    String[] pkgs = AssemblyClassLoader.GetPackages(getBootstrapAssembly());
	    String openJdkVersion = AccessController.doPrivileged(new GetPropertyAction("openjdk.version", "unknown"));
d56 3
a58 3
		    VMSystemProperties.SPEC_TITLE,                 // specTitle
		    VMSystemProperties.SPEC_VERSION,               // specVersion
		    VMSystemProperties.SPEC_VENDOR,                // specVendor
d84 1
a84 1
	    return (Package[])pkgs.values().toArray(new Package[pkgs.size()]);
d91 1
a91 1
	return ikvm.runtime.Util.getInstanceTypeFromClass(Object.class).get_Assembly();
d96 1
a96 1
	return AssemblyClassLoader.getResource(null, getBootstrapAssembly(), name);
d101 1
a101 1
	return AssemblyClassLoader.getResources(null, getBootstrapAssembly(), name);
d106 1
a106 1
	return new sun.misc.JavaLangAccess() {
d108 1
a108 1
		return null;
d117 1
a117 1
		    E[] getEnumConstantsShared(Class<E> klass) {
@


1.8
log
@- Moved some calls to methods with a LinkDemand (that fails in partial trust) to a separate methods.
- Added stuff to map.xml to remove the need for reflection in VM / Library bootstrap.
- Inverted IKVM.Runtime.JNI dependency in stack walking code.
@
text
@d2 1
a2 1
  Copyright (C) 2007 Jeroen Frijters
d35 2
d39 2
a40 1
class LangHelper
d103 22
@


1.7
log
@Made AssemblyClassLoader public and moved it to ikvm.runtime package.
@
text
@a99 10

    // this method is called from the System.<clinit> method in map.xml
    static void init()
    {
	cli.System.AppDomain.get_CurrentDomain().add_ProcessExit(new cli.System.EventHandler(new cli.System.EventHandler.Method() {
	    public void Invoke(Object sender, cli.System.EventArgs e) {
		Shutdown.shutdown();
	    }
	}));
    }
@


1.6
log
@Changed AssemblyClassLoader to be useable as a delegation parent for custom assembly class loaders.
@
text
@d28 1
d47 1
a47 1
	    String[] pkgs = ikvm.internal.AssemblyClassLoader.GetPackages(getBootstrapAssembly());
d93 1
a93 1
	return ikvm.internal.AssemblyClassLoader.getResource(null, getBootstrapAssembly(), name);
d98 1
a98 1
	return ikvm.internal.AssemblyClassLoader.getResources(null, getBootstrapAssembly(), name);
@


1.5
log
@Core packages aren't sealed.
@
text
@d46 1
a46 1
            String[] pkgs = ikvm.internal.AssemblyClassLoader.GetPackages(null);
d85 5
d92 1
a92 1
	return ikvm.internal.AssemblyClassLoader.getResource(null, name);
d97 1
a97 1
	return ikvm.internal.AssemblyClassLoader.getResources(null, name);
@


1.4
log
@Refactored system properties initialization.
@
text
@a46 8
            URL sealBase = null;
            try
            {
                sealBase = new URL(cli.System.Reflection.Assembly.GetExecutingAssembly().get_CodeBase());
            }
            catch (MalformedURLException _)
            {
            }
d58 1
a58 1
                    sealBase,                                      // sealBase
@


1.4.2.1
log
@Ported fixes from trunk. Changed version to 0.36.0.1.
@
text
@d47 8
d66 1
a66 1
                    null,                                          // sealBase
@


1.4.2.2
log
@Backported fixes and changed version to 0.36.0.5
@
text
@a27 1
import ikvm.runtime.AssemblyClassLoader;
d46 1
a46 1
	    String[] pkgs = AssemblyClassLoader.GetPackages(getBootstrapAssembly());
a84 5
    private static cli.System.Reflection.Assembly getBootstrapAssembly()
    {
	return ikvm.runtime.Util.getInstanceTypeFromClass(Object.class).get_Assembly();
    }

d87 1
a87 1
	return AssemblyClassLoader.getResource(null, getBootstrapAssembly(), name);
d92 1
a92 1
	return AssemblyClassLoader.getResources(null, getBootstrapAssembly(), name);
@


1.3
log
@- Integrated OpenJDK's java.lang.System and friends.
- Fixed a couple of OpenJDK Thread issues.
@
text
@d27 1
d31 1
d34 1
d55 1
d60 6
a65 6
                    "Java Platform API Specification",             // specTitle
                    "1.6",                                         // specVersion
                    "Sun Microsystems, Inc.",                      // specVendor
                    "Hybrid GNU Classpath / OpenJDK",              // implTitle
                    gnu.classpath.Configuration.CLASSPATH_VERSION, // implVersion
                    "Free Software Foundation & Sun Microsystems", // implVendor
@


1.2
log
@Integrated OpenJDK's java.lang.Thread
@
text
@d99 2
a100 1
    static
d102 3
a104 3
        sun.misc.SharedSecrets.setJavaLangAccess(new sun.misc.JavaLangAccess() {
	    public sun.reflect.ConstantPool getConstantPool(Class klass) {
		return klass.getConstantPool();
d106 1
a106 14
	    public void setAnnotationType(Class klass, sun.reflect.annotation.AnnotationType type) {
		klass.setAnnotationType(type);
	    }
	    public sun.reflect.annotation.AnnotationType getAnnotationType(Class klass) {
		return klass.getAnnotationType();
	    }
	    public <E extends Enum<E>>
		    E[] getEnumConstantsShared(Class<E> klass) {
		return klass.getEnumConstantsShared();
	    }
	    public void blockedOn(Thread t, sun.nio.ch.Interruptible b) {
		t.blockedOn(b);
	    }
	});
@


1.1
log
@First batch of OpenJDK integration code.
@
text
@d116 1
a116 1
		throw new Error("not implemented");
@

