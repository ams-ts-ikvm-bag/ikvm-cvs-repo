head	1.3;
access;
symbols
	v7_4_5196_0:1.2
	v7_4:1.2.0.10
	v7_3:1.2.0.8
	v7_2_4630_6:1.2
	v7_2_4630_5:1.2
	v7_2_4630_4:1.2
	v7_2_4630_3:1.2
	v7_2_4630_2:1.2
	v7_2_4630_1:1.2
	v7_2:1.2.0.6
	v7_1_4532_2:1.2
	v7_1_4532_1:1.2
	v7_1_4532_0:1.2
	v7_1:1.2.0.4
	v7_0_4335_3:1.2
	v7_0_4335_2:1.2
	v7_0_4335_1:1.2
	v7_0_4335_0:1.2
	v7_0:1.2.0.2;
locks; strict;
comment	@# @;


1.3
date	2014.05.14.14.25.06;	author jfrijters;	state dead;
branches;
next	1.2;

1.2
date	2011.08.09.11.55.35;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.09.11.28.38;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Remove unused file.
@
text
@/*
 * Copyright (c) 2008, 2011, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package java.lang.invoke;

/**
 * The flavor of method handle which emulates invokespecial or invokestatic.
 * @@author jrose
 */
class DirectMethodHandle extends MethodHandle {
    //inherited oop    vmtarget;    // methodOop or virtual class/interface oop

    // Constructors in this class *must* be package scoped or private.
    DirectMethodHandle(MethodType mtype, MemberName m, boolean doDispatch, Class<?> lookupClass) {
        super(mtype);

        assert(m.isMethod() || !doDispatch && m.isConstructor());
        if (!m.isResolved())
            throw new InternalError();

        vmtarget = createDelegate(mtype, m, doDispatch, lookupClass);
    }

    private static native Object createDelegate(MethodType type, MemberName m, boolean doDispatch, Class<?> lookupClass);

    boolean isValid() {
        return vmtarget != null;
    }
}
@


1.2
log
@Moved BoundMethodHandle and DirectMethodHandle initialization into the respective classes to avoid the MethodHandleNatives dependency and untyped "native" signatures.
@
text
@@


1.1
log
@Prepare for forking.
@
text
@a27 2
import static java.lang.invoke.MethodHandleNatives.Constants.*;

a33 2
    private final int  vmindex;     // method index within class or interface
    { vmindex = VM_INDEX_UNINITIALIZED; }  // JVM may change this
d43 1
a43 1
        MethodHandleNatives.init(this, (Object) m, doDispatch, lookupClass);
d46 2
d49 1
a49 1
        return (vmindex != VM_INDEX_UNINITIALIZED);
@

