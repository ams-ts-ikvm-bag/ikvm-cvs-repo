head	1.10;
access;
symbols
	v0_36_0_14:1.7.2.2
	v0_36_0_13:1.7.2.2
	v0_36_0_9:1.7.2.2
	v0_36_0_7:1.7.2.2
	v0_36_0_5:1.7.2.2
	v0_36_0_4:1.7.2.1
	v0_36_0_3:1.7.2.1
	v0_36_0_2:1.7.2.1
	v0_36_0_1:1.7
	v0_36_0_0:1.7
	v0_36:1.7.0.2;
locks; strict;
comment	@# @;


1.10
date	2007.12.19.11.28.12;	author jfrijters;	state dead;
branches;
next	1.9;

1.9
date	2007.10.25.12.56.23;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2007.09.19.09.35.57;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2007.08.17.09.12.51;	author jfrijters;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2007.08.16.14.05.02;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2007.08.15.12.04.25;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2007.06.09.08.33.09;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2007.06.05.06.57.18;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.29.16.27.09;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.24.09.23.03;	author jfrijters;	state Exp;
branches;
next	;

1.7.2.1
date	2007.09.20.13.54.23;	author jfrijters;	state Exp;
branches;
next	1.7.2.2;

1.7.2.2
date	2007.12.04.06.04.32;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.10
log
@Restructured VM <-> Library interface to take advantage of InternalsVisibleTo to remove public methods and reflection usage.
@
text
@/*
  Copyright (C) 2004, 2005, 2006, 2007 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/

package java.lang;

import cli.System.Reflection.BindingFlags;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.security.AccessController;
import java.security.PrivilegedAction;
import ikvm.internal.AnnotationAttributeBase;
import ikvm.lang.CIL;
import ikvm.lang.Internal;
import ikvm.runtime.AssemblyClassLoader;

@@Internal
public class LibraryVMInterfaceImpl implements ikvm.internal.LibraryVMInterface
{
    private static final cli.System.Reflection.ConstructorInfo classConstructor;
    private static final cli.System.Reflection.FieldInfo classTypeWrapperField;
    private static final cli.System.Reflection.FieldInfo classProtectionDomainField;
    private static final cli.System.Reflection.FieldInfo classLoaderWrapperField;
    // this flag is set by Shutdown.runAllFinalizers() in map.xml
    static volatile boolean runFinalizersOnExitFlag;

    static
    {
	cli.System.Type classType = cli.System.Type.GetType("java.lang.Class");
	classConstructor = classType.GetConstructor(BindingFlags.wrap(BindingFlags.NonPublic | BindingFlags.Instance), null, new cli.System.Type[0], null);
	classTypeWrapperField = classType.GetField("typeWrapper", BindingFlags.wrap(BindingFlags.NonPublic | BindingFlags.Instance));
	classProtectionDomainField = classType.GetField("pd", BindingFlags.wrap(BindingFlags.NonPublic | BindingFlags.Instance));

	cli.System.Type classLoaderType = cli.System.Type.GetType("java.lang.ClassLoader");
	classLoaderWrapperField = classLoaderType.GetField("wrapper", BindingFlags.wrap(BindingFlags.NonPublic | BindingFlags.Instance));
    }

    public Object newClass(Object wrapper, Object protectionDomain, Object classLoader)
    {
	Object clazz = classConstructor.Invoke(null);
	classTypeWrapperField.SetValue(clazz, wrapper);
	classProtectionDomainField.SetValue(clazz, protectionDomain);
	return clazz;
    }

    // implemented in map.xml
    public native Object getWrapperFromClass(Object clazz);

    // implemented in map.xml
    public native Object getWrapperFromClassLoader(Object classLoader);

    public void setWrapperForClassLoader(Object classLoader, Object wrapper)
    {
	classLoaderWrapperField.SetValue(classLoader, wrapper);
    }

    public Object box(Object val)
    {
        if(val instanceof cli.System.Byte)
        {
            return new Byte(CIL.unbox_byte(val));
        }
        else if(val instanceof cli.System.Boolean)
        {
            return new Boolean(CIL.unbox_boolean(val));
        }
        else if(val instanceof cli.System.Int16)
        {
            return new Short(CIL.unbox_short(val));
        }
        else if(val instanceof cli.System.Char)
        {
            return new Character(CIL.unbox_char(val));
        }
        else if(val instanceof cli.System.Int32)
        {
            return new Integer(CIL.unbox_int(val));
        }
        else if(val instanceof cli.System.Single)
        {
            return new Float(CIL.unbox_float(val));
        }
        else if(val instanceof cli.System.Int64)
        {
            return new Long(CIL.unbox_long(val));
        }
        else if(val instanceof cli.System.Double)
        {
            return new Double(CIL.unbox_double(val));
        }
        else
        {
            throw new IllegalArgumentException();
        }
    }
    
    public Object unbox(Object val)
    {
        if(val instanceof Byte)
        {
            return CIL.box_byte(((Byte)val).byteValue());
        }
        else if(val instanceof Boolean)
        {
            return CIL.box_boolean(((Boolean)val).booleanValue());
        }
        else if(val instanceof Short)
        {
            return CIL.box_short(((Short)val).shortValue());
        }
        else if(val instanceof Character)
        {
            return CIL.box_char(((Character)val).charValue());
        }
        else if(val instanceof Integer)
        {
            return CIL.box_int(((Integer)val).intValue());
        }
        else if(val instanceof Float)
        {
            return CIL.box_float(((Float)val).floatValue());
        }
        else if(val instanceof Long)
        {
            return CIL.box_long(((Long)val).longValue());
        }
        else if(val instanceof Double)
        {
            return CIL.box_double(((Double)val).doubleValue());
        }
        else
        {
            throw new IllegalArgumentException();
        }
    }

    public Throwable mapException(Throwable t)
    {
        return ExceptionHelper.MapExceptionFast(t, true);
    }

    public cli.System.IntPtr getDirectBufferAddress(Object buffer)
    {
        return cli.System.IntPtr.op_Explicit(((sun.nio.ch.DirectBuffer)buffer).address());
    }
    
    public int getDirectBufferCapacity(Object buffer)
    {
        return ((java.nio.Buffer)buffer).capacity();
    }

    public void setProperties(cli.System.Collections.Hashtable props)
    {
        gnu.classpath.VMSystemProperties.props = props;
    }

    public boolean runFinalizersOnExit()
    {
        return runFinalizersOnExitFlag;
    }

    public Object newAnnotation(Object classLoader, Object definition)
    {
        return AnnotationAttributeBase.newAnnotation((ClassLoader)classLoader, definition);
    }

    public Object newAnnotationElementValue(Object classLoader, Object expectedClass, Object definition)
    {
        try
        {
            return AnnotationAttributeBase.decodeElementValue(definition, (Class)expectedClass, (ClassLoader)classLoader);
        }
        catch (IllegalAccessException x)
        {
            // TODO this shouldn't be here
            return null;
        }
    }

    public Object newAssemblyClassLoader(final cli.System.Reflection.Assembly assembly)
    {
        return AccessController.doPrivileged(new PrivilegedAction() {
            public Object run() {
                return new AssemblyClassLoader(assembly);
            }
        });
    }

    public void initProperties(java.util.Properties props)
    {
	gnu.classpath.VMSystemProperties.initOpenJDK(props);
    }

    public StackTraceElement[] getStackTrace(cli.System.Diagnostics.StackTrace stack)
    {
	return ExceptionHelper.getStackTrace(stack, Integer.MAX_VALUE);
    }
}
@


1.9
log
@Made AssemblyClassLoader public and moved it to ikvm.runtime package.
@
text
@@


1.8
log
@Changed LibraryVMInterfaceImpl.getWrapperFromClass() and getWrapperFromClassLoader() from using reflection to a map.xml implementation to improve performance.
It turns out that Constructor.newInstance() calls Class.getModifiers() which indirectly uses getWrapperFromClass() and using reflection significantly affected deserialization performance.
@
text
@a34 1
import ikvm.internal.AssemblyClassLoader;
d37 1
@


1.7
log
@- Implemented Thread.dumpThreads() and Thread.getThreads().
- Added a couple more fake native libraries to VFS.
@
text
@d68 2
a69 4
    public Object getWrapperFromClass(Object clazz)
    {
	return classTypeWrapperField.GetValue(clazz);
    }
d71 2
a72 4
    public Object getWrapperFromClassLoader(Object classLoader)
    {
	return classLoaderWrapperField.GetValue(classLoader);
    }
@


1.7.2.1
log
@Backported fixes from trunk. Changed version to 0.36.0.2.
@
text
@d68 4
a71 2
    // implemented in map.xml
    public native Object getWrapperFromClass(Object clazz);
d73 4
a76 2
    // implemented in map.xml
    public native Object getWrapperFromClassLoader(Object classLoader);
@


1.7.2.2
log
@Backported fixes and changed version to 0.36.0.5
@
text
@d35 1
a37 1
import ikvm.runtime.AssemblyClassLoader;
@


1.6
log
@Refactored system properties initialization.
@
text
@d219 5
@


1.5
log
@Integrated OpenJDK java.nio package.
@
text
@d214 5
@


1.4
log
@- Integrated OpenJDK's java.lang.System and friends.
- Fixed a couple of OpenJDK Thread issues.
@
text
@a167 5
    public Object newDirectByteBuffer(cli.System.IntPtr address, int capacity)
    {
        return java.nio.VMDirectByteBuffer.NewDirectByteBuffer(address, capacity);
    }

d170 1
a170 1
        return java.nio.VMDirectByteBuffer.GetDirectBufferAddress((java.nio.Buffer)buffer);
@


1.3
log
@Integrated OpenJDK's java.lang.Thread
@
text
@d46 2
a61 4
	if(protectionDomain == null && classLoader instanceof AssemblyClassLoader)
	{
	    protectionDomain = ((AssemblyClassLoader)classLoader).getProtectionDomain();
	}
d190 1
a190 1
        return VMRuntime.runFinalizersOnExitFlag;
@


1.2
log
@Integrated OpenJDK's java.lang.reflect.* classes (except for Array).
@
text
@a169 15
    public void jniWaitUntilLastThread()
    {
        VMThread.jniWaitUntilLastThread();
    }

    public void jniDetach()
    {
        VMThread.jniDetach();
    }

    public void setThreadGroup(Object group)
    {
        VMThread.setThreadGroup((ThreadGroup)group);
    }

@


1.1
log
@First batch of OpenJDK integration code.
@
text
@a28 1
import java.lang.reflect.VMFieldImpl;
a69 15
    public Object newField(Object clazz, Object wrapper)
    {
        return VMFieldImpl.newField((Class)clazz, wrapper);
    }

    public Object newConstructor(Object clazz, Object wrapper)
    {
        return new Constructor((Class)clazz, wrapper);
    }

    public Object newMethod(Object clazz, Object wrapper)
    {
        return new Method((Class)clazz, wrapper);
    }

a74 17
    public Object getWrapperFromField(Object field)
    {
        return ((Field)field).impl.fieldCookie;
    }

    public Object getWrapperFromMethodOrConstructor(Object methodOrConstructor)
    {
        if(methodOrConstructor instanceof Method)
        {
            return ((Method)methodOrConstructor).methodCookie;
        }
        else
        {
            return ((Constructor)methodOrConstructor).methodCookie;
        }
    }

@

