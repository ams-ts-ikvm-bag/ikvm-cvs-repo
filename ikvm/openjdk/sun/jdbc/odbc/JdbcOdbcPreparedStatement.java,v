head	1.3;
access;
symbols
	v8_1_5717_0:1.3
	v8_1:1.3.0.22
	v8_0_5449_1:1.3
	v8_0_5449_0:1.3
	v8_0:1.3.0.20
	v7_4_5196_0:1.3
	v7_4:1.3.0.18
	v7_3:1.3.0.16
	v7_2_4630_6:1.3
	v7_2_4630_5:1.3
	v7_2_4630_4:1.3
	v7_2_4630_3:1.3
	v7_2_4630_2:1.3
	v0_46_0_4:1.3
	v7_2_4630_1:1.3
	v7_2:1.3.0.14
	v7_1_4532_2:1.3
	v7_1_4532_1:1.3
	v7_1_4532_0:1.3
	v7_1:1.3.0.12
	v7_0_4335_3:1.3
	v7_0_4335_2:1.3
	v7_0_4335_1:1.3
	v0_46_0_2:1.3
	v7_0_4335_0:1.3
	v7_0:1.3.0.10
	v0_40_0_6:1.3
	v0_40_0_5:1.3
	v0_46_0_1:1.3
	v0_46_0_0:1.3
	v0_46:1.3.0.8
	v0_44_0_6:1.3
	v0_44_0_5:1.3
	v0_44_0_4:1.3
	v0_44_0_3:1.3
	v0_44_0_2:1.3
	v0_42_0_7:1.3
	v0_44_0_1:1.3
	v0_44_0_0:1.3
	v0_44:1.3.0.6
	v0_42_0_6:1.3
	v0_42_0_5:1.3
	v0_42_0_4:1.3
	v0_42_0_3:1.3
	v0_42_0_2:1.3
	v0_42_0_1:1.3
	v0_42_0_0:1.3
	v0_42:1.3.0.4
	v0_40_0_3:1.3
	v0_40_0_2:1.3
	v0_40_0_1:1.3
	v0_40_0_0:1.3
	v0_40:1.3.0.2;
locks; strict;
comment	@# @;


1.3
date	2009.02.01.10.39.43;	author smallsql;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.25.09.03.24;	author smallsql;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.15.21.40.00;	author smallsql;	state Exp;
branches;
next	;


desc
@@


1.3
log
@many database metadata implement and updatable resultset added
@
text
@/*
  Copyright (C) 2009 Volker Berlin (i-net software)

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
 */
package sun.jdbc.odbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.Array;
import java.sql.Blob;
import java.sql.Clob;
import java.sql.Date;
import java.sql.NClob;
import java.sql.ParameterMetaData;
import java.sql.PreparedStatement;
import java.sql.Ref;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.RowId;
import java.sql.SQLException;
import java.sql.SQLXML;
import java.sql.Time;
import java.sql.Timestamp;
import java.sql.Types;
import java.util.Calendar;

import cli.System.Data.*;
import cli.System.Data.Common.*;
import cli.System.Data.Odbc.*;

/**
 * @@author Volker Berlin
 */
public class JdbcOdbcPreparedStatement extends JdbcOdbcStatement implements PreparedStatement{

    public JdbcOdbcPreparedStatement(JdbcOdbcConnection jdbcConn, OdbcCommand command, String sql, int resultSetType, int resultSetConcurrency){
        super(jdbcConn, command, resultSetType, resultSetConcurrency);
        command.set_CommandText(sql);
        command.Prepare();
    }


    public void addBatch() throws SQLException{
        // TODO Auto-generated method stub

    }


    public void clearParameters(){
        DbParameterCollection params = command.get_Parameters();
        params.Clear();
    }


    public boolean execute() throws SQLException{
        return super.execute(null);
    }


    public ResultSet executeQuery() throws SQLException{
        return super.executeQuery(null);
    }


    public int executeUpdate() throws SQLException{
        return super.executeUpdate(null);
    }


    public ResultSetMetaData getMetaData() throws SQLException{
        ResultSet rs = getResultSet();
        if(rs != null){
            rs.getMetaData();
        }
        DbDataReader reader = command.ExecuteReader(CommandBehavior.wrap(CommandBehavior.SchemaOnly));
        JdbcOdbcResultSetMetaData metadata = new JdbcOdbcResultSetMetaData(reader);
        reader.Close();
        return metadata;
    }


    public ParameterMetaData getParameterMetaData(){
        throw new UnsupportedOperationException();
    }


    public void setArray(int parameterIndex, Array x) throws SQLException{
        setObject(parameterIndex, x, Types.ARRAY);
    }


    public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException{
        setObject(parameterIndex, x, Types.LONGVARCHAR);
    }


    public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException{
        setObject(parameterIndex, x, Types.LONGVARCHAR, length);
    }


    public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException{
        setObject(parameterIndex, x, Types.LONGVARCHAR, (int)length);
    }


    public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException{
        setObject(parameterIndex, x, Types.DECIMAL);
    }


    public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException{
        setObject(parameterIndex, x, Types.LONGVARBINARY);
    }


    public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException{
        setObject(parameterIndex, x, Types.LONGVARBINARY, length);
    }


    public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException{
        setObject(parameterIndex, x, Types.LONGVARBINARY, (int)length);
    }


    public void setBlob(int parameterIndex, Blob x) throws SQLException{
        setObject(parameterIndex, x, Types.BLOB);
    }


    public void setBlob(int parameterIndex, InputStream x) throws SQLException{
        setObject(parameterIndex, x, Types.BLOB);
    }


    public void setBlob(int parameterIndex, InputStream x, long length) throws SQLException{
        setObject(parameterIndex, x, Types.BLOB, (int)length);
    }


    public void setBoolean(int parameterIndex, boolean x) throws SQLException{
        setObject(parameterIndex, Boolean.valueOf(x), Types.BOOLEAN);
    }


    public void setByte(int parameterIndex, byte x) throws SQLException{
        setObject(parameterIndex, Byte.valueOf(x), Types.TINYINT);
    }


    public void setBytes(int parameterIndex, byte[] x) throws SQLException{
        setObject(parameterIndex, x, Types.BINARY);
    }


    public void setCharacterStream(int parameterIndex, Reader x) throws SQLException{
        setObject(parameterIndex, x, Types.LONGVARCHAR);
    }


    public void setCharacterStream(int parameterIndex, Reader x, int length) throws SQLException{
        setObject(parameterIndex, x, Types.NCLOB, length);
    }


    public void setCharacterStream(int parameterIndex, Reader x, long length) throws SQLException{
        setObject(parameterIndex, x, Types.LONGVARCHAR, (int)length);
    }


    public void setClob(int parameterIndex, Clob x) throws SQLException{
        setObject(parameterIndex, x, Types.CLOB);
    }


    public void setClob(int parameterIndex, Reader x) throws SQLException{
        setObject(parameterIndex, x, Types.CLOB);
    }


    public void setClob(int parameterIndex, Reader x, long length) throws SQLException{
        setObject(parameterIndex, x, Types.CLOB, (int)length);
    }


    public void setDate(int parameterIndex, Date x) throws SQLException{
        setObject(parameterIndex, x, Types.DATE);
    }


    public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException{
        JdbcOdbcUtils.convertCalendarToLocalDate(x, cal);
        setObject(parameterIndex, x, Types.DATE);
    }


    public void setDouble(int parameterIndex, double x) throws SQLException{
        setObject(parameterIndex, Double.valueOf(x), Types.DOUBLE);
    }


    public void setFloat(int parameterIndex, float x) throws SQLException{
        setObject(parameterIndex, Float.valueOf(x), Types.FLOAT);
    }


    public void setInt(int parameterIndex, int x) throws SQLException{
        setObject(parameterIndex, Integer.valueOf(x), Types.INTEGER);
    }


    public void setLong(int parameterIndex, long x) throws SQLException{
        setObject(parameterIndex, Long.valueOf(x), Types.BIGINT);
    }


    public void setNCharacterStream(int parameterIndex, Reader x) throws SQLException{
        setObject(parameterIndex, x, Types.LONGNVARCHAR);
    }


    public void setNCharacterStream(int parameterIndex, Reader x, long length) throws SQLException{
        setObject(parameterIndex, x, Types.LONGNVARCHAR, (int)length);
    }


    public void setNClob(int parameterIndex, NClob x) throws SQLException{
        setObject(parameterIndex, x, Types.NCLOB);
    }


    public void setNClob(int parameterIndex, Reader x) throws SQLException{
        setObject(parameterIndex, x, Types.NCLOB);
    }


    public void setNClob(int parameterIndex, Reader x, long length) throws SQLException{
        setObject(parameterIndex, x, Types.NCLOB, (int)length);
    }


    public void setNString(int parameterIndex, String x) throws SQLException{
        setObject(parameterIndex, x, Types.NVARCHAR);
    }


    public void setNull(int parameterIndex, int sqlType) throws SQLException{
        setObject(parameterIndex, null, sqlType);
    }


    public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException{
        setObject(parameterIndex, null, sqlType);
    }


    public void setObject(int parameterIndex, Object x) throws SQLException{
        setObject(parameterIndex, x, Types.OTHER, -1);
    }


    public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException{
        setObject(parameterIndex, x, targetSqlType, -1);
    }


    public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException{
        DbParameter para = getPara(parameterIndex);
        para.set_Value(JdbcOdbcUtils.convertJava2Net(x, scaleOrLength));
        if(para.get_Direction().Value == ParameterDirection.Output){
            para.set_Direction(ParameterDirection.wrap(ParameterDirection.InputOutput));
        }
        
        if(targetSqlType != Types.OTHER){
            para.set_DbType(DbType.wrap(JdbcOdbcUtils.convertJdbc2AdoNetType(targetSqlType)));
        }
        
        if(scaleOrLength >= 0){
            switch(targetSqlType){
                case Types.DECIMAL:
                case Types.NUMERIC:
                    para.set_Scale((byte)scaleOrLength);
            }
        }
    }


    public void setRef(int parameterIndex, Ref x) throws SQLException{
        setObject(parameterIndex, x, Types.REF);
    }


    public void setRowId(int parameterIndex, RowId x) throws SQLException{
        setObject(parameterIndex, x, Types.ROWID);
    }


    public void setSQLXML(int parameterIndex, SQLXML x) throws SQLException{
        setObject(parameterIndex, x, Types.SQLXML);
    }


    public void setShort(int parameterIndex, short x) throws SQLException{
        setObject(parameterIndex, Short.valueOf(x), Types.SMALLINT);
    }


    public void setString(int parameterIndex, String x) throws SQLException{
        setObject(parameterIndex, x, Types.VARCHAR);
    }


    public void setTime(int parameterIndex, Time x) throws SQLException{
        setObject(parameterIndex, x, Types.TIME);
    }


    public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException{
        JdbcOdbcUtils.convertCalendarToLocalDate(x, cal);
        setObject(parameterIndex, x, Types.TIME);
    }


    public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException{
        setObject(parameterIndex, x, Types.TIMESTAMP);
    }


    public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException{
        JdbcOdbcUtils.convertCalendarToLocalDate(x, cal);
        setObject(parameterIndex, x, Types.TIMESTAMP);
    }


    public void setURL(int parameterIndex, URL x) throws SQLException{
        setObject(parameterIndex, x, Types.DATALINK);
    }


    public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException{
        setObject(parameterIndex, x, Types.LONGNVARCHAR, length);
    }


    /**
     * Get the DbParameter from the current command. If the parameter does not exits in the collection then add it.
     * 
     * @@param parameterIndex
     *            The JDBC parameter index starting with 1
     * @@return the DbParameter for the index.
     * @@throws SQLException
     *             If any error occur.
     */
    protected DbParameter getPara(int parameterIndex) throws SQLException{
        try{
            DbParameterCollection params = command.get_Parameters();
            while(params.get_Count() < parameterIndex){
                params.Add(command.CreateParameter());
            }
            return params.get_Item(parameterIndex - 1);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }
}
@


1.2
log
@250 TODO in JDBC-ODBC-Bridge fixt
@
text
@d48 3
a50 5
import cli.System.DBNull;
import cli.System.Data.ParameterDirection;
import cli.System.Data.Common.DbCommand;
import cli.System.Data.Common.DbParameter;
import cli.System.Data.Common.DbParameterCollection;
d57 2
a58 2
    public JdbcOdbcPreparedStatement(JdbcOdbcConnection jdbcConn, DbCommand command, String sql){
        super(jdbcConn, command);
d70 3
a72 3
    public void clearParameters() throws SQLException{
        // TODO Auto-generated method stub

d92 8
a99 2
        // TODO Auto-generated method stub
        return null;
d103 1
a103 1
    public ParameterMetaData getParameterMetaData() throws SQLException{
d280 1
a280 5
        DbParameter para = getPara(parameterIndex);
        para.set_Value(x == null ? DBNull.Value : x);
        if(para.get_Direction().Value == ParameterDirection.Output){
            para.set_Direction(ParameterDirection.wrap(ParameterDirection.InputOutput));
        }
d285 1
a285 2
        // TODO Auto-generated method stub
        setObject(parameterIndex, x);
d290 17
a306 2
        // TODO Auto-generated method stub
        setObject(parameterIndex, x);
@


1.1
log
@First Step of the JDBC ODBC Bridge
@
text
@d45 1
d48 2
d51 2
a52 2


d62 1
d65 1
d68 1
a68 1
        
d71 1
d74 1
a74 1
        
d77 1
d79 1
a79 2
        // TODO Auto-generated method stub
        return false;
d82 1
d84 1
a84 2
        // TODO Auto-generated method stub
        return null;
d87 1
d89 1
a89 2
        // TODO Auto-generated method stub
        return 0;
d92 1
d98 1
d100 1
a100 2
        // TODO Auto-generated method stub
        return null;
d103 1
d105 1
a105 2
        // TODO Auto-generated method stub
        
d108 1
d110 1
a110 2
        // TODO Auto-generated method stub
        
d113 1
d115 1
a115 2
        // TODO Auto-generated method stub
        
d118 1
d120 1
a120 2
        // TODO Auto-generated method stub
        
d123 1
d125 1
a125 2
        // TODO Auto-generated method stub
        
d128 1
d130 1
a130 2
        // TODO Auto-generated method stub
        
d133 1
d135 1
a135 2
        // TODO Auto-generated method stub
        
d138 1
d140 1
a140 2
        // TODO Auto-generated method stub
        
d143 1
d145 1
a145 2
        // TODO Auto-generated method stub
        
d148 3
a150 3
    public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException{
        // TODO Auto-generated method stub
        
d153 3
a155 3
    public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException{
        // TODO Auto-generated method stub
        
d158 1
d160 1
a160 2
        // TODO Auto-generated method stub
        
d163 1
d165 1
a165 2
        // TODO Auto-generated method stub
        
d168 1
d170 1
a170 2
        // TODO Auto-generated method stub
        
d173 3
a175 3
    public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException{
        // TODO Auto-generated method stub
        
d178 3
a180 3
    public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException{
        // TODO Auto-generated method stub
        
d183 3
a185 3
    public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException{
        // TODO Auto-generated method stub
        
d188 1
d190 1
a190 2
        // TODO Auto-generated method stub
        
d193 3
a195 3
    public void setClob(int parameterIndex, Reader reader) throws SQLException{
        // TODO Auto-generated method stub
        
d198 3
a200 3
    public void setClob(int parameterIndex, Reader reader, long length) throws SQLException{
        // TODO Auto-generated method stub
        
d203 1
d205 1
a205 2
        // TODO Auto-generated method stub
        
d208 1
d210 2
a211 2
        // TODO Auto-generated method stub
        
d214 1
d216 1
a216 2
        // TODO Auto-generated method stub
        
d219 1
d221 1
a221 2
        // TODO Auto-generated method stub
        
d224 1
d226 1
a226 2
        // TODO Auto-generated method stub
        
d229 1
d231 1
a231 2
        // TODO Auto-generated method stub
        
d234 3
a236 3
    public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException{
        // TODO Auto-generated method stub
        
d239 3
a241 3
    public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException{
        // TODO Auto-generated method stub
        
d244 3
a246 3
    public void setNClob(int parameterIndex, NClob value) throws SQLException{
        // TODO Auto-generated method stub
        
d249 3
a251 3
    public void setNClob(int parameterIndex, Reader reader) throws SQLException{
        // TODO Auto-generated method stub
        
d254 3
a256 3
    public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException{
        // TODO Auto-generated method stub
        
d259 3
a261 3
    public void setNString(int parameterIndex, String value) throws SQLException{
        // TODO Auto-generated method stub
        
d264 1
d266 1
a266 2
        // TODO Auto-generated method stub
        
d269 1
d271 1
a271 2
        // TODO Auto-generated method stub
        
d274 1
d276 5
a280 2
        // TODO Auto-generated method stub
        
d283 1
d286 1
a286 1
        
d289 1
d292 1
a292 1
        
d295 1
d297 1
a297 2
        // TODO Auto-generated method stub
        
d300 1
d302 1
a302 2
        // TODO Auto-generated method stub
        
d305 3
a307 3
    public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException{
        // TODO Auto-generated method stub
        
d310 1
d312 1
a312 2
        // TODO Auto-generated method stub
        
d315 1
d317 1
a317 2
        // TODO Auto-generated method stub
        
d320 1
d322 1
a322 2
        // TODO Auto-generated method stub
        
d325 1
d327 2
a328 2
        // TODO Auto-generated method stub
        
d331 1
d333 1
a333 2
        // TODO Auto-generated method stub
        
d336 1
d338 2
a339 2
        // TODO Auto-generated method stub
        
d342 1
d344 1
a344 2
        // TODO Auto-generated method stub
        
d347 1
d349 1
a349 2
        // TODO Auto-generated method stub
        
d352 21
@

