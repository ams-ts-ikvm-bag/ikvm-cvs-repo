head	1.5;
access;
symbols
	v8_1_5717_0:1.5
	v8_1:1.5.0.14
	v8_0_5449_1:1.5
	v8_0_5449_0:1.5
	v8_0:1.5.0.12
	v7_4_5196_0:1.5
	v7_4:1.5.0.10
	v7_3:1.5.0.8
	v7_2_4630_6:1.5
	v7_2_4630_5:1.5
	v7_2_4630_4:1.5
	v7_2_4630_3:1.5
	v7_2_4630_2:1.5
	v0_46_0_4:1.4
	v7_2_4630_1:1.5
	v7_2:1.5.0.6
	v7_1_4532_2:1.5
	v7_1_4532_1:1.5
	v7_1_4532_0:1.5
	v7_1:1.5.0.4
	v7_0_4335_3:1.5
	v7_0_4335_2:1.5
	v7_0_4335_1:1.5
	v0_46_0_2:1.4
	v7_0_4335_0:1.5
	v7_0:1.5.0.2
	v0_40_0_6:1.4
	v0_40_0_5:1.4
	v0_46_0_1:1.4
	v0_46_0_0:1.4
	v0_46:1.4.0.8
	v0_44_0_6:1.4
	v0_44_0_5:1.4
	v0_44_0_4:1.4
	v0_44_0_3:1.4
	v0_44_0_2:1.4
	v0_42_0_7:1.4
	v0_44_0_1:1.4
	v0_44_0_0:1.4
	v0_44:1.4.0.6
	v0_42_0_6:1.4
	v0_42_0_5:1.4
	v0_42_0_4:1.4
	v0_42_0_3:1.4
	v0_42_0_2:1.4
	v0_42_0_1:1.4
	v0_42_0_0:1.4
	v0_42:1.4.0.4
	v0_40_0_3:1.4
	v0_40_0_2:1.4
	v0_40_0_1:1.4
	v0_40_0_0:1.4
	v0_40:1.4.0.2;
locks; strict;
comment	@# @;


1.5
date	2011.06.21.19.42.45;	author smallsql;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.01.10.39.43;	author smallsql;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.25.09.03.24;	author smallsql;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.18.21.47.51;	author smallsql;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.15.21.40.00;	author smallsql;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated ODBC Bridge to OpenJDK7 part 2
@
text
@/*
  Copyright (C) 2009, 2011 Volker Berlin (i-net software)

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
 */
package sun.jdbc.odbc;

import java.sql.*;

import cli.System.Data.*;
import cli.System.Data.Common.*;
import cli.System.Data.Odbc.*;

/**
 * This JDBC Driver is a wrapper to the ODBC.NET Data Provider.
 */
public class JdbcOdbcStatement implements Statement{

    private final JdbcOdbcConnection jdbcConn;

    protected final OdbcCommand command;

    private final int resultSetType;
    
    private final int resultSetConcurrency;
    
    private DbDataReader reader;
    
    private ResultSet rs;
    
    private int updateCount;
    
    private boolean isClosed;
    
    private ResultSet moreResults;

    public JdbcOdbcStatement(JdbcOdbcConnection jdbcConn, OdbcCommand command, int resultSetType, int resultSetConcurrency){
        this.jdbcConn = jdbcConn;
        this.command = command;
        this.resultSetType = resultSetType;
        this.resultSetConcurrency = resultSetConcurrency;
    }


    public void addBatch(String sql) throws SQLException{
        // TODO Auto-generated method stub

    }


    public void cancel() throws SQLException{
        try{
            command.Cancel();
        }catch(Throwable ex){
            throw JdbcOdbcUtils.createSQLException(ex);
        }
    }


    public void clearBatch() throws SQLException{
        // TODO Auto-generated method stub

    }


    public void clearWarnings() throws SQLException{
        // TODO Auto-generated method stub

    }


    public void close() throws SQLException{
        isClosed = true;
        if(rs != null){
            rs.close();
        }
        if(reader != null){
            reader.Close();
        }
        command.Dispose();
    }


    public boolean execute(String sql) throws SQLException{
        try{
            if(sql != null){
                command.set_CommandText(sql);
            }
            command.ExecuteNonQuery();
            return false;
        }catch(Throwable ex){
            throw JdbcOdbcUtils.createSQLException(ex);
        }
    }


    public boolean execute(String sql, int autoGeneratedKeys){
        throw new UnsupportedOperationException();
    }


    public boolean execute(String sql, int[] columnIndexes){
        throw new UnsupportedOperationException();
    }


    public boolean execute(String sql, String[] columnNames){
        throw new UnsupportedOperationException();
    }


    public int[] executeBatch() throws SQLException{
        // TODO Auto-generated method stub
        return null;
    }


    public ResultSet executeQuery(String sql) throws SQLException{
        try{
            if(sql != null){
                command.set_CommandText(sql);
            }
            if(resultSetConcurrency == ResultSet.CONCUR_UPDATABLE){
                rs = new JdbcOdbcUpdateableResultSet(command);
            }else{
                if(resultSetType == ResultSet.TYPE_FORWARD_ONLY){
                    reader = command.ExecuteReader();
                    rs = new JdbcOdbcResultSet(this, reader);
                }else{
                    OdbcDataAdapter da = new OdbcDataAdapter(command);
                    DataTable dt = new DataTable();
                    da.Fill(dt);
                    rs = new JdbcOdbcDTResultSet(dt);
                }
            }
            return rs;
        }catch(Throwable ex){
            throw JdbcOdbcUtils.createSQLException(ex);
        }
    }


    public int executeUpdate(String sql) throws SQLException{
        try{
            if(sql != null){
                command.set_CommandText(sql);
            }
            updateCount = command.ExecuteNonQuery();
            return updateCount;
        }catch(Throwable ex){
            throw JdbcOdbcUtils.createSQLException(ex);
        }
    }


    public int executeUpdate(String sql, int autoGeneratedKeys){
        throw new UnsupportedOperationException();
    }


    public int executeUpdate(String sql, int[] columnIndexes){
        throw new UnsupportedOperationException();
    }


    public int executeUpdate(String sql, String[] columnNames){
        throw new UnsupportedOperationException();
    }


    public Connection getConnection(){
        return jdbcConn;
    }


    public int getFetchDirection(){
        return ResultSet.FETCH_UNKNOWN;
    }


    public int getFetchSize(){
        return 0;
    }


    public ResultSet getGeneratedKeys(){
        throw new UnsupportedOperationException();
    }


    public int getMaxFieldSize() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
    }


    public int getMaxRows() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
    }


    public boolean getMoreResults() throws SQLException{
        try{
            if(moreResults != null){
                rs = moreResults;
                moreResults = null;
                return true;
            }
            boolean isNext = reader.NextResult();
            if(isNext){
                rs = new JdbcOdbcResultSet(this, reader);
                return true;
            }
            rs = null;
            return false;
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public boolean getMoreResults(int current) throws SQLException{
        // TODO Auto-generated method stub
        return false;
    }


    public int getQueryTimeout(){
        return command.get_CommandTimeout();
    }


    public ResultSet getResultSet(){
        return rs;
    }


    public int getResultSetConcurrency(){
        return resultSetConcurrency;
    }


    public int getResultSetHoldability() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
    }


    public int getResultSetType(){
        return resultSetType;
    }


    public int getUpdateCount(){
        return updateCount;
    }


    public SQLWarning getWarnings() throws SQLException{
        // TODO Auto-generated method stub
        return null;
    }


    public boolean isClosed(){
        return isClosed;
    }


    public void setCursorName(String name) throws SQLException{
        // TODO Auto-generated method stub

    }


    public void setEscapeProcessing(boolean enable) throws SQLException{
        // TODO Auto-generated method stub

    }


    public void setFetchDirection(int direction){
        // ignore it
    }


    public void setFetchSize(int rows){
        // ignore it
    }


    public void setMaxFieldSize(int max) throws SQLException{
        // TODO Auto-generated method stub

    }


    public void setMaxRows(int max) throws SQLException{
        // TODO Auto-generated method stub

    }


    public boolean isPoolable(){
        return false;
    }


    public void setPoolable(boolean poolable) throws SQLException{
        // ignore it
    }


    public void setQueryTimeout(int seconds){
        command.set_CommandTimeout(seconds);
    }


    public boolean isWrapperFor(Class<?> iface){
        return iface.isAssignableFrom(this.getClass());
    }


    public <T>T unwrap(Class<T> iface) throws SQLException{
        if(isWrapperFor(iface)){
            return (T)this;
        }
        throw new SQLException(this.getClass().getName() + " does not implements " + iface.getName() + ".", "01000");
    }
    
    /**
     * Close the DbDataReader if there are no more results.
     * This give some blocking free without calling close() explicit.
     * If there are more results then we need to save it.
     */
    void closeReaderIfPossible(){
        ResultSet currentRs = rs;
        boolean isMoreResults;
        try{
            isMoreResults = getMoreResults();
        }catch(SQLException ex){
            isMoreResults = false;
        }
        if(!isMoreResults){
            reader.Close(); //this give the ODBC cursor free
        }else{
            moreResults = rs;
        }
        rs = currentRs;
    }


    /**
     * {@@inheritDoc}
     */
	public void closeOnCompletion() throws SQLException {
	}


    /**
     * {@@inheritDoc}
     */
	public boolean isCloseOnCompletion() throws SQLException {
		return false;
	}

}
@


1.4
log
@many database metadata implement and updatable resultset added
@
text
@d2 1
a2 1
  Copyright (C) 2009 Volker Berlin (i-net software)
d371 15
@


1.3
log
@250 TODO in JDBC-ODBC-Bridge fixt
@
text
@d28 1
d30 1
d39 1
a39 1
    protected final DbCommand command;
d41 4
d55 1
a55 1
    public JdbcOdbcStatement(JdbcOdbcConnection jdbcConn, DbCommand command){
d58 2
d141 13
a153 2
            reader = command.ExecuteReader();
            rs = new JdbcOdbcResultSet(this, reader);
d194 2
a195 3
    public int getFetchDirection() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d199 1
a199 2
    public int getFetchSize() throws SQLException{
        // TODO Auto-generated method stub
d257 2
a258 3
    public int getResultSetConcurrency() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d268 2
a269 3
    public int getResultSetType() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d301 2
a302 3
    public void setFetchDirection(int direction) throws SQLException{
        // TODO Auto-generated method stub

d306 2
a307 3
    public void setFetchSize(int rows) throws SQLException{
        // TODO Auto-generated method stub

d323 1
a323 2
    public boolean isPoolable() throws SQLException{
        // TODO Auto-generated method stub
d329 1
a329 2
        // TODO Auto-generated method stub

@


1.2
log
@JDBC-ODBC-Bridge Step 2
@
text
@d37 1
a37 1
    private final DbCommand command;
d39 9
d82 8
a89 1
    public void close(){
d96 5
a100 3
            command.set_CommandText(sql);
            DbDataReader reader = command.ExecuteReader();
            return reader != null;
d107 1
a107 1
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException{
d112 1
a112 1
    public boolean execute(String sql, int[] columnIndexes) throws SQLException{
d117 1
a117 1
    public boolean execute(String sql, String[] columnNames) throws SQLException{
d130 6
a135 2
            command.set_CommandText(sql);
            return new JdbcOdbcResultSet(this, command.ExecuteReader());
d144 5
a148 2
            command.set_CommandText(sql);
            return command.ExecuteNonQuery();
d205 16
a220 2
        // TODO Auto-generated method stub
        return false;
d235 2
a236 3
    public ResultSet getResultSet() throws SQLException{
        // TODO Auto-generated method stub
        return null;
d258 2
a259 3
    public int getUpdateCount() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d269 2
a270 3
    public boolean isClosed() throws SQLException{
        // TODO Auto-generated method stub
        return false;
d338 21
@


1.1
log
@First Step of the JDBC ODBC Bridge
@
text
@d31 1
a31 1
 * This JDBC Driver is a wrapper to the ODBC.NET Data Provider
d55 2
a56 2
        }catch(Exception ex){
            throw new SQLException(ex);
d83 2
a84 2
        }catch(Exception ex){
            throw new SQLException(ex);
d114 2
a115 2
        }catch(Exception ex){
            throw new SQLException(ex);
d124 2
a125 2
        }catch(Exception ex){
            throw new SQLException(ex);
d191 2
a192 3
    public int getQueryTimeout() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d286 2
a287 3
    public void setQueryTimeout(int seconds) throws SQLException{
        // TODO Auto-generated method stub

@

