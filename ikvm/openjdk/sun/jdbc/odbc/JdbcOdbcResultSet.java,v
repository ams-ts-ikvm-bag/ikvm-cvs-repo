head	1.5;
access;
symbols
	v8_1_5717_0:1.5
	v8_1:1.5.0.14
	v8_0_5449_1:1.5
	v8_0_5449_0:1.5
	v8_0:1.5.0.12
	v7_4_5196_0:1.5
	v7_4:1.5.0.10
	v7_3:1.5.0.8
	v7_2_4630_6:1.5
	v7_2_4630_5:1.5
	v7_2_4630_4:1.5
	v7_2_4630_3:1.5
	v7_2_4630_2:1.5
	v0_46_0_4:1.4
	v7_2_4630_1:1.5
	v7_2:1.5.0.6
	v7_1_4532_2:1.5
	v7_1_4532_1:1.5
	v7_1_4532_0:1.5
	v7_1:1.5.0.4
	v7_0_4335_3:1.5
	v7_0_4335_2:1.5
	v7_0_4335_1:1.5
	v0_46_0_2:1.4
	v7_0_4335_0:1.5
	v7_0:1.5.0.2
	v0_40_0_6:1.4
	v0_40_0_5:1.4
	v0_46_0_1:1.4
	v0_46_0_0:1.4
	v0_46:1.4.0.8
	v0_44_0_6:1.4
	v0_44_0_5:1.4
	v0_44_0_4:1.4
	v0_44_0_3:1.4
	v0_44_0_2:1.4
	v0_42_0_7:1.4
	v0_44_0_1:1.4
	v0_44_0_0:1.4
	v0_44:1.4.0.6
	v0_42_0_6:1.4
	v0_42_0_5:1.4
	v0_42_0_4:1.4
	v0_42_0_3:1.4
	v0_42_0_2:1.4
	v0_42_0_1:1.4
	v0_42_0_0:1.4
	v0_42:1.4.0.4
	v0_40_0_3:1.4
	v0_40_0_2:1.4
	v0_40_0_1:1.4
	v0_40_0_0:1.4
	v0_40:1.4.0.2;
locks; strict;
comment	@# @;


1.5
date	2011.06.21.19.42.45;	author smallsql;	state Exp;
branches;
next	1.4;

1.4
date	2009.02.01.10.39.43;	author smallsql;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.25.09.03.24;	author smallsql;	state Exp;
branches;
next	1.2;

1.2
date	2009.01.18.21.47.51;	author smallsql;	state Exp;
branches;
next	1.1;

1.1
date	2009.01.15.21.40.00;	author smallsql;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Updated ODBC Bridge to OpenJDK7 part 2
@
text
@/*
  Copyright (C) 2009, 2011 Volker Berlin (i-net software)

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
 */
package sun.jdbc.odbc;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.sql.*;

import cli.System.Data.Common.*;

/**
 * This JDBC Driver is a wrapper to the ODBC.NET Data Provider. This ResultSet based on a DataReader.
 */
public class JdbcOdbcResultSet extends JdbcOdbcObject implements ResultSet{

    private DbDataReader reader;

    private final JdbcOdbcStatement statement;

    private final int holdability;

    private final int concurrency;

    private int fetchSize;

    private int row;

    private final int resultSetType;

    private ResultSetMetaData metaData;


    /**
     * Create a ResultSet that based on a DbDataReader
     * 
     * @@param statement
     *            the statement for getStatement(), can be null
     * @@param reader
     *            the reader for the data access, if it null then the resultset is closed.
     */
    public JdbcOdbcResultSet(JdbcOdbcStatement statement, DbDataReader reader){
        this.statement = statement;
        this.reader = reader;
        this.resultSetType = TYPE_FORWARD_ONLY;
        this.concurrency = CONCUR_READ_ONLY;
        this.holdability = HOLD_CURSORS_OVER_COMMIT;
    }


    /**
     * A constructor for extended classes. All methods that use the reader must be overridden if you use this
     * constructor.
     * 
     * @@param statement
     *            the statement for getStatement(), can be null
     * @@param resultSetType
     *            a result set type; one of ResultSet.TYPE_FORWARD_ONLY, ResultSet.TYPE_SCROLL_INSENSITIVE, or
     *            ResultSet.TYPE_SCROLL_SENSITIVE
     * @@param concurrency
     *            a concurrency type; one of ResultSet.CONCUR_READ_ONLY or ResultSet.CONCUR_UPDATABLE
     */
    protected JdbcOdbcResultSet(JdbcOdbcStatement statement, int resultSetType, int concurrency){
        this.statement = statement;
        this.reader = null;
        this.resultSetType = resultSetType;
        this.concurrency = concurrency;
        this.holdability = HOLD_CURSORS_OVER_COMMIT;
    }


    public boolean absolute(int rowPosition) throws SQLException{
        throwForwardOnly();
        return false; // for Compiler
    }


    public void afterLast() throws SQLException{
        throwForwardOnly();
    }


    public void beforeFirst() throws SQLException{
        throwForwardOnly();
    }


    public void cancelRowUpdates() throws SQLException{
        throwReadOnly();
    }


    public void clearWarnings() throws SQLException{
        // TODO Auto-generated method stub

    }


    public void close(){
        reader = null;
        statement.closeReaderIfPossible();
    }


    public void deleteRow() throws SQLException{
        throwReadOnly();
    }


    @@Override
    public int findColumn(String columnLabel) throws SQLException{
        try{
            return getReader().GetOrdinal(columnLabel) + 1;
        }catch(ArrayIndexOutOfBoundsException ex){
            throw new SQLException("Column '" + columnLabel + "' not found.", "S0022", ex);
        }
    }


    public boolean first() throws SQLException{
        throwForwardOnly();
        return false; // for compiler
    }


    public int getConcurrency(){
        return concurrency;
    }


    public String getCursorName() throws SQLException{
        // TODO Auto-generated method stub
        return null;
    }


    public int getFetchDirection(){
        return FETCH_UNKNOWN;
    }


    public int getFetchSize(){
        return fetchSize;
    }


    public int getHoldability(){
        return holdability;
    }


    public ResultSetMetaData getMetaData() throws SQLException{
        if(metaData == null){
            metaData = new JdbcOdbcResultSetMetaData(getReader());
        }
        return metaData;
    }


    public int getRow() throws SQLException{
        getReader(); // checking for is closed
        return row;
    }


    public Statement getStatement(){
        return statement;
    }


    public int getType(){
        return resultSetType;
    }


    public SQLWarning getWarnings() throws SQLException{
        // TODO Auto-generated method stub
        return null;
    }


    public void insertRow() throws SQLException{
        throwReadOnly();
    }


    public boolean isAfterLast() throws SQLException{
        throwForwardOnly();
        return false; // only for compiler
    }


    public boolean isBeforeFirst() throws SQLException{
        throwForwardOnly();
        return false; // only for compiler
    }


    public boolean isClosed(){
        return reader == null;
    }


    public boolean isFirst() throws SQLException{
        throwForwardOnly();
        return false; // only for compiler
    }


    public boolean isLast() throws SQLException{
        throwForwardOnly();
        return false; // only for compiler
    }


    public boolean last() throws SQLException{
        throwForwardOnly();
        return false; // only for compiler
    }


    public void moveToCurrentRow() throws SQLException{
        throwReadOnly();
    }


    public void moveToInsertRow() throws SQLException{
        throwReadOnly();
    }


    public boolean next() throws SQLException{
        DbDataReader dataReader = getReader();
        //if we after the last row then we close the reader
        //to prevent an error on repeating call of next() after the end
        //that we check also get_IsClosed()
        if(!dataReader.get_IsClosed() && dataReader.Read()){
            row++;
            return true;
        }
        row = 0;
        statement.closeReaderIfPossible();
        return false;
    }


    public boolean previous() throws SQLException{
        throwForwardOnly();
        return false; // only for compiler
    }


    public void refreshRow() throws SQLException{
        throwForwardOnly();
    }


    public boolean relative(int rowPositions) throws SQLException{
        throwForwardOnly();
        return false; // only for compiler
    }


    public boolean rowDeleted() throws SQLException{
        throwReadOnly();
        return false; // only for compiler
    }


    public boolean rowInserted() throws SQLException{
        throwReadOnly();
        return false; // only for compiler
    }


    public boolean rowUpdated() throws SQLException{
        throwReadOnly();
        return false; // only for compiler
    }


    public void setFetchDirection(int direction){
        // ignore it
    }


    public void setFetchSize(int rows){
        // ignore it
    }


    public void updateArray(int columnIndex, Array x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateArray(String columnLabel, Array x) throws SQLException{
        updateArray(findColumn(columnLabel), x);
    }


    public void updateAsciiStream(int columnIndex, InputStream x, int length) throws SQLException{
        updateObject(columnIndex, x, length);
    }


    public void updateAsciiStream(String columnLabel, InputStream x, int length) throws SQLException{
        updateObject(findColumn(columnLabel), x, length);
    }


    public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException{
        updateObject(columnIndex, x, (int)length);
    }


    public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException{
        updateObject(findColumn(columnLabel), x, (int)length);
    }


    public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateBigDecimal(String columnLabel, BigDecimal x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateBinaryStream(int columnIndex, InputStream x, int length) throws SQLException{
        updateObject(columnIndex, x, length);
    }


    public void updateBinaryStream(String columnLabel, InputStream x, int length) throws SQLException{
        updateObject(findColumn(columnLabel), x, length);
    }


    public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException{
        updateObject(columnIndex, x, (int)length);
    }


    public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException{
        updateObject(findColumn(columnLabel), x, (int)length);
    }


    public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateBlob(int columnIndex, Blob x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateBlob(String columnLabel, Blob x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateBlob(int columnIndex, InputStream x, long length) throws SQLException{
        updateObject(columnIndex, x, (int)length);
    }


    public void updateBlob(String columnLabel, InputStream x, long length) throws SQLException{
        updateObject(findColumn(columnLabel), x, (int)length);
    }


    public void updateBlob(int columnIndex, InputStream x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateBlob(String columnLabel, InputStream x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateBoolean(int columnIndex, boolean x) throws SQLException{
        updateObject(columnIndex, Boolean.valueOf(x));
    }


    public void updateBoolean(String columnLabel, boolean x) throws SQLException{
        updateObject(findColumn(columnLabel), Boolean.valueOf(x));
    }


    public void updateByte(int columnIndex, byte x) throws SQLException{
        updateObject(columnIndex, Byte.valueOf(x));
    }


    public void updateByte(String columnLabel, byte x) throws SQLException{
        updateObject(findColumn(columnLabel), Byte.valueOf(x));
    }


    public void updateBytes(int columnIndex, byte[] x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateBytes(String columnLabel, byte[] x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateCharacterStream(int columnIndex, Reader x, int length) throws SQLException{
        updateObject(columnIndex, x, length);
    }


    public void updateCharacterStream(String columnLabel, Reader x, int length) throws SQLException{
        updateObject(findColumn(columnLabel), x, length);
    }


    public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException{
        updateObject(columnIndex, x, (int)length);
    }


    public void updateCharacterStream(String columnLabel, Reader x, long length) throws SQLException{
        updateObject(findColumn(columnLabel), x, (int)length);
    }


    public void updateCharacterStream(int columnIndex, Reader x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateCharacterStream(String columnLabel, Reader x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateClob(int columnIndex, Clob x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateClob(String columnLabel, Clob x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateClob(int columnIndex, Reader x, long length) throws SQLException{
        updateObject(columnIndex, x, (int)length);
    }


    public void updateClob(String columnLabel, Reader x, long length) throws SQLException{
        updateObject(findColumn(columnLabel), x, (int)length);
    }


    public void updateClob(int columnIndex, Reader x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateClob(String columnLabel, Reader x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateDate(int columnIndex, Date x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateDate(String columnLabel, Date x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateDouble(int columnIndex, double x) throws SQLException{
        updateObject(columnIndex, Double.valueOf(x));
    }


    public void updateDouble(String columnLabel, double x) throws SQLException{
        updateObject(findColumn(columnLabel), Double.valueOf(x));
    }


    public void updateFloat(int columnIndex, float x) throws SQLException{
        updateObject(columnIndex, Float.valueOf(x));
    }


    public void updateFloat(String columnLabel, float x) throws SQLException{
        updateObject(findColumn(columnLabel), Float.valueOf(x));
    }


    public void updateInt(int columnIndex, int x) throws SQLException{
        updateObject(columnIndex, Integer.valueOf(x));
    }


    public void updateInt(String columnLabel, int x) throws SQLException{
        updateObject(findColumn(columnLabel), Integer.valueOf(x));
    }


    public void updateLong(int columnIndex, long x) throws SQLException{
        updateObject(columnIndex, Long.valueOf(x));
    }


    public void updateLong(String columnLabel, long x) throws SQLException{
        updateObject(findColumn(columnLabel), Long.valueOf(x));
    }


    public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException{
        updateObject(columnIndex, x, (int)length);
    }


    public void updateNCharacterStream(String columnLabel, Reader x, long length) throws SQLException{
        updateObject(findColumn(columnLabel), x, (int)length);
    }


    public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateNCharacterStream(String columnLabel, Reader x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateNClob(int columnIndex, NClob x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateNClob(String columnLabel, NClob x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateNClob(int columnIndex, Reader x, long length) throws SQLException{
        updateObject(columnIndex, x, (int)length);
    }


    public void updateNClob(String columnLabel, Reader x, long length) throws SQLException{
        updateObject(findColumn(columnLabel), x, (int)length);
    }


    public void updateNClob(int columnIndex, Reader x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateNClob(String columnLabel, Reader x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateNString(int columnIndex, String x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateNString(String columnLabel, String x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateNull(int columnIndex) throws SQLException{
        updateObject(columnIndex, null);
    }


    public void updateNull(String columnLabel) throws SQLException{
        updateObject(findColumn(columnLabel), null);
    }


    public void updateObject(int columnIndex, Object x, int scaleOrLength) throws SQLException{
        throwReadOnly();
    }


    public void updateObject(int columnIndex, Object x) throws SQLException{
        updateObject(columnIndex, x, -1);
    }


    public void updateObject(String columnLabel, Object x, int scaleOrLength) throws SQLException{
        updateObject(findColumn(columnLabel), x, scaleOrLength);
    }


    public void updateObject(String columnLabel, Object x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateRef(int columnIndex, Ref x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateRef(String columnLabel, Ref x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateRow() throws SQLException{
        throwReadOnly();
    }


    public void updateRowId(int columnIndex, RowId x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateRowId(String columnLabel, RowId x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateSQLXML(int columnIndex, SQLXML x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateSQLXML(String columnLabel, SQLXML x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateShort(int columnIndex, short x) throws SQLException{
        updateObject(columnIndex, Short.valueOf(x));
    }


    public void updateShort(String columnLabel, short x) throws SQLException{
        updateObject(findColumn(columnLabel), Short.valueOf(x));
    }


    public void updateString(int columnIndex, String x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateString(String columnLabel, String x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateTime(int columnIndex, Time x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateTime(String columnLabel, Time x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public void updateTimestamp(int columnIndex, Timestamp x) throws SQLException{
        updateObject(columnIndex, x);
    }


    public void updateTimestamp(String columnLabel, Timestamp x) throws SQLException{
        updateObject(findColumn(columnLabel), x);
    }


    public boolean isWrapperFor(Class<?> iface){
        return iface.isAssignableFrom(this.getClass());
    }


    public <T>T unwrap(Class<T> iface) throws SQLException{
        if(isWrapperFor(iface)){
            return (T)this;
        }
        throw new SQLException(this.getClass().getName() + " does not implements " + iface.getName() + ".", "01000");
    }


    private void throwForwardOnly() throws SQLException{
        throw new SQLException("ResultSet is forward only.", "24000");
    }


    private void throwReadOnly() throws SQLException{
        throw new SQLException("ResultSet is read only.", "24000");
    }


    /**
     * Check if this ResultSet is closed before access to the DbDataReader
     * 
     * @@return
     * @@throws SQLException
     */
    private DbDataReader getReader() throws SQLException{
        if(reader == null){
            throw new SQLException("ResultSet is closed.", "24000");
        }
        return reader;
    }


    /**
     * {@@inheritDoc}
     */
    @@Override
    protected Object getObjectImpl(int columnIndex) throws SQLException{
        try{
            DbDataReader datareader = getReader();
            try{
                return datareader.get_Item(columnIndex-1);
            }catch(ArrayIndexOutOfBoundsException aioobe){
                throw new SQLException( "Invalid column number ("+columnIndex+"). A number between 1 and "+datareader.get_FieldCount()+" is valid.", "S1002", aioobe);
            }
        }catch(Throwable ex){
            throw JdbcOdbcUtils.createSQLException(ex);
        }
    }


	/**
	 * {@@inheritDoc}
	 */
	public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}


	/**
	 * {@@inheritDoc}
	 */
	public <T> T getObject(String columnLabel, Class<T> type)
			throws SQLException {
		throw new SQLFeatureNotSupportedException();
	}

}
@


1.4
log
@many database metadata implement and updatable resultset added
@
text
@d2 1
a2 1
  Copyright (C) 2009 Volker Berlin (i-net software)
d782 17
@


1.3
log
@250 TODO in JDBC-ODBC-Bridge fixt
@
text
@d314 1
a314 1
        throwReadOnly();
d319 1
a319 1
        throwReadOnly();
d324 1
a324 1
        throwReadOnly();
d329 1
a329 1
        throwReadOnly();
d334 1
a334 1
        throwReadOnly();
d339 1
a339 1
        throwReadOnly();
d344 1
a344 1
        throwReadOnly();
d349 1
a349 1
        throwReadOnly();
d354 1
a354 1
        throwReadOnly();
d359 1
a359 1
        throwReadOnly();
d364 1
a364 1
        throwReadOnly();
d369 1
a369 1
        throwReadOnly();
d374 1
a374 1
        throwReadOnly();
d379 1
a379 1
        throwReadOnly();
d384 1
a384 1
        throwReadOnly();
d389 1
a389 1
        throwReadOnly();
d394 1
a394 1
        throwReadOnly();
d399 1
a399 1
        throwReadOnly();
d403 2
a404 2
    public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException{
        throwReadOnly();
d408 2
a409 2
    public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException{
        throwReadOnly();
d413 2
a414 2
    public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException{
        throwReadOnly();
d418 2
a419 2
    public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException{
        throwReadOnly();
d424 1
a424 1
        throwReadOnly();
d429 1
a429 1
        throwReadOnly();
d434 1
a434 1
        throwReadOnly();
d439 1
a439 1
        throwReadOnly();
d444 1
a444 1
        throwReadOnly();
d449 1
a449 1
        throwReadOnly();
d454 1
a454 1
        throwReadOnly();
d458 2
a459 2
    public void updateCharacterStream(String columnLabel, Reader reader, int length) throws SQLException{
        throwReadOnly();
d464 1
a464 1
        throwReadOnly();
d468 2
a469 2
    public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException{
        throwReadOnly();
d474 1
a474 1
        throwReadOnly();
d478 2
a479 2
    public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException{
        throwReadOnly();
d484 1
a484 1
        throwReadOnly();
d489 1
a489 1
        throwReadOnly();
d493 2
a494 2
    public void updateClob(int columnIndex, Reader reader, long length) throws SQLException{
        throwReadOnly();
d498 2
a499 2
    public void updateClob(String columnLabel, Reader reader, long length) throws SQLException{
        throwReadOnly();
d503 2
a504 2
    public void updateClob(int columnIndex, Reader reader) throws SQLException{
        throwReadOnly();
d508 2
a509 2
    public void updateClob(String columnLabel, Reader reader) throws SQLException{
        throwReadOnly();
d514 1
a514 1
        throwReadOnly();
d519 1
a519 1
        throwReadOnly();
d524 1
a524 1
        throwReadOnly();
d529 1
a529 1
        throwReadOnly();
d534 1
a534 1
        throwReadOnly();
d539 1
a539 1
        throwReadOnly();
d544 1
a544 1
        throwReadOnly();
d549 1
a549 1
        throwReadOnly();
d554 1
a554 1
        throwReadOnly();
d559 1
a559 1
        throwReadOnly();
d564 1
a564 1
        throwReadOnly();
d568 2
a569 2
    public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException{
        throwReadOnly();
d574 1
a574 1
        throwReadOnly();
d578 2
a579 2
    public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException{
        throwReadOnly();
d583 2
a584 2
    public void updateNClob(int columnIndex, NClob clob) throws SQLException{
        throwReadOnly();
d588 2
a589 2
    public void updateNClob(String columnLabel, NClob clob) throws SQLException{
        throwReadOnly();
d593 2
a594 2
    public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException{
        throwReadOnly();
d598 2
a599 2
    public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException{
        throwReadOnly();
d603 2
a604 2
    public void updateNClob(int columnIndex, Reader reader) throws SQLException{
        throwReadOnly();
d608 2
a609 2
    public void updateNClob(String columnLabel, Reader reader) throws SQLException{
        throwReadOnly();
d613 2
a614 2
    public void updateNString(int columnIndex, String string) throws SQLException{
        throwReadOnly();
d618 2
a619 2
    public void updateNString(String columnLabel, String string) throws SQLException{
        throwReadOnly();
d624 1
a624 1
        throwReadOnly();
d629 1
a629 1
        throwReadOnly();
d639 1
a639 1
        throwReadOnly();
d644 1
a644 1
        throwReadOnly();
d649 1
a649 1
        throwReadOnly();
d654 1
a654 1
        throwReadOnly();
d659 1
a659 1
        throwReadOnly();
d669 1
a669 1
        throwReadOnly();
d674 1
a674 1
        throwReadOnly();
d678 2
a679 2
    public void updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException{
        throwReadOnly();
d683 2
a684 2
    public void updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException{
        throwReadOnly();
d689 1
a689 1
        throwReadOnly();
d694 1
a694 1
        throwReadOnly();
d699 1
a699 1
        throwReadOnly();
d704 1
a704 1
        throwReadOnly();
d709 1
a709 1
        throwReadOnly();
d714 1
a714 1
        throwReadOnly();
d719 1
a719 1
        throwReadOnly();
d724 1
a724 1
        throwReadOnly();
d775 1
a775 1
                throw new SQLException( "Invalid column number ("+columnIndex+"). A number between 1 and "+datareader.get_FieldCount()+" is valid.", "S1002");
@


1.2
log
@JDBC-ODBC-Bridge Step 2
@
text
@a25 1
import java.io.ByteArrayInputStream;
a27 2
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
a28 1
import java.net.URL;
a29 2
import java.util.Calendar;
import java.util.Map;
d31 1
a31 14
import cli.System.Convert;
import cli.System.DBNull;
import cli.System.IConvertible;
import cli.System.Int16;
import cli.System.Int32;
import cli.System.Int64;
import cli.System.OverflowException;
import cli.System.Single;
import cli.System.TimeSpan;
import cli.System.Data.DataTable;
import cli.System.Data.SchemaType;
import cli.System.Data.Common.DbDataAdapter;
import cli.System.Data.Common.DbDataReader;
import cli.System.Data.Odbc.OdbcDataAdapter;
d36 1
a36 1
public class JdbcOdbcResultSet implements ResultSet{
d38 1
a38 1
    private final DbDataReader reader;
a41 2
    private boolean wasNull;

d52 2
d55 8
d66 24
a89 3
        holdability = HOLD_CURSORS_OVER_COMMIT;
        concurrency = CONCUR_READ_ONLY;
        resultSetType = TYPE_FORWARD_ONLY;
d93 2
a94 2
    public boolean absolute(int row) throws SQLException{
        throwReadOnly();
d100 1
a100 1
        throwReadOnly();
d105 1
a105 1
        throwReadOnly();
d120 3
a122 3
    public void close() throws SQLException{
        // TODO Auto-generated method stub

d131 1
d133 5
a137 1
        return reader.GetOrdinal(columnLabel) + 1;
d142 1
a142 1
        throwReadOnly();
a146 188
    public Array getArray(int columnIndex){
        throw new UnsupportedOperationException();
    }


    public Array getArray(String columnLabel) throws SQLException{
        return getArray(findColumn(columnLabel));
    }


    public InputStream getAsciiStream(int columnIndex) throws SQLException{
        try{
            String str = getString(columnIndex);
            if(str == null){
                return null;
            }
            return new ByteArrayInputStream(str.getBytes("Ascii"));
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public InputStream getAsciiStream(String columnLabel) throws SQLException{
        return getAsciiStream(findColumn(columnLabel));
    }


    public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException{
        BigDecimal dec = getBigDecimal(columnIndex);
        if(dec == null){
            return null;
        }
        if(dec.scale() != scale){
            return dec.setScale(scale, BigDecimal.ROUND_HALF_EVEN);
        }
        return dec;
    }


    public BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException{
        return getBigDecimal(findColumn(columnLabel), scale);
    }


    public BigDecimal getBigDecimal(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return null;
            }
            String str = obj.toString();
            return new BigDecimal(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public BigDecimal getBigDecimal(String columnLabel) throws SQLException{
        return getBigDecimal(findColumn(columnLabel));
    }


    public InputStream getBinaryStream(int columnIndex) throws SQLException{
        byte[] data = getBytes(columnIndex);
        if(data == null){
            return null;
        }
        return new ByteArrayInputStream(data);
    }


    public InputStream getBinaryStream(String columnLabel) throws SQLException{
        return getBinaryStream(findColumn(columnLabel));
    }


    public Blob getBlob(int columnIndex){
        throw new UnsupportedOperationException();
    }


    public Blob getBlob(String columnLabel) throws SQLException{
        return getBlob(findColumn(columnLabel));
    }


    public boolean getBoolean(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return false;
            }
            if(obj instanceof IConvertible){
                return Convert.ToBoolean(obj);
            }
            String str = obj.toString();
            if(str.length() > 0){
                // special handling for boolean representation in old databases
                char ch = str.charAt(0);
                if(ch == 'T' || ch == 't'){
                    return true;
                }
                if(ch == 'F' || ch == 'f'){
                    return true;
                }
            }
            return cli.System.Boolean.Parse(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public boolean getBoolean(String columnLabel) throws SQLException{
        return getBoolean(findColumn(columnLabel));
    }


    public byte getByte(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return 0;
            }
            if(obj instanceof IConvertible){
                return Convert.ToByte(obj);
            }
            String str = obj.toString();
            return cli.System.Byte.Parse(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public byte getByte(String columnLabel) throws SQLException{
        return getByte(findColumn(columnLabel));
    }


    public byte[] getBytes(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return null;
            }
            if(obj instanceof byte[]){
                return (byte[])obj;
            }
            String str = obj.toString();
            return str.getBytes(); // which encoding?
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public byte[] getBytes(String columnLabel) throws SQLException{
        return getBytes(findColumn(columnLabel));
    }


    public Reader getCharacterStream(int columnIndex) throws SQLException{
        String str = getString(columnIndex);
        if(str == null){
            return null;
        }
        return new StringReader(str);
    }


    public Reader getCharacterStream(String columnLabel) throws SQLException{
        return getCharacterStream(findColumn(columnLabel));
    }


    public Clob getClob(int columnIndex){
        throw new UnsupportedOperationException();
    }


    public Clob getClob(String columnLabel) throws SQLException{
        return getClob(findColumn(columnLabel));
    }


a157 71
    public Date getDate(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return null;
            }
            if(obj instanceof cli.System.DateTime){
                cli.System.DateTime dt = (cli.System.DateTime)obj;
                return new Date(dt.get_Year() - 1900, dt.get_Month() - 1, dt.get_Day());
            }
            String str = obj.toString();
            return Date.valueOf(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public Date getDate(String columnLabel) throws SQLException{
        return getDate(findColumn(columnLabel));
    }


    public Date getDate(int columnIndex, Calendar cal) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return null;
            }
            if(obj instanceof cli.System.DateTime){
                cal.setTimeInMillis(JdbcOdbcUtils.getJavaMillis((cli.System.DateTime)obj));
                int year = cal.get(Calendar.YEAR) - 1900;
                int month = cal.get(Calendar.MONTH) - 1;
                int day = cal.get(Calendar.DAY_OF_MONTH);
                return new Date(year, month, day);
            }
            String str = obj.toString();
            return Date.valueOf(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public Date getDate(String columnLabel, Calendar cal) throws SQLException{
        return getDate(findColumn(columnLabel), cal);
    }


    public double getDouble(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return 0;
            }
            if(obj instanceof IConvertible){
                return Convert.ToDouble(obj);
            }
            String str = obj.toString();
            return cli.System.Double.Parse(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public double getDouble(String columnLabel) throws SQLException{
        return getDouble(findColumn(columnLabel));
    }


a167 22
    public float getFloat(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return 0;
            }
            if(obj instanceof IConvertible){
                return Convert.ToSingle(obj);
            }
            String str = obj.toString();
            return Single.Parse(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public float getFloat(String columnLabel) throws SQLException{
        return getFloat(findColumn(columnLabel));
    }


d173 3
a175 35
    public int getInt(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return 0;
            }
            if(obj instanceof IConvertible){
                return Convert.ToInt32(obj);
            }
            String str = obj.toString();
            return Int32.Parse(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public int getInt(String columnLabel) throws SQLException{
        return getInt(findColumn(columnLabel));
    }


    public long getLong(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return 0;
            }
            if(obj instanceof IConvertible){
                return Convert.ToInt64(obj);
            }
            String str = obj.toString();
            return Int64.Parse(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
d177 1
d181 2
a182 71
    public long getLong(String columnLabel) throws SQLException{
        return getLong(findColumn(columnLabel));
    }


    public ResultSetMetaData getMetaData(){
        return new JdbcOdbcResultSetMetaData(reader);
    }


    public Reader getNCharacterStream(int columnIndex) throws SQLException{
        return getCharacterStream(columnIndex);
    }


    public Reader getNCharacterStream(String columnLabel) throws SQLException{
        return getCharacterStream(columnLabel);
    }


    public NClob getNClob(int columnIndex){
        throw new UnsupportedOperationException();
    }


    public NClob getNClob(String columnLabel) throws SQLException{
        return getNClob(findColumn(columnLabel));
    }


    public String getNString(int columnIndex) throws SQLException{
        return getString(columnIndex);
    }


    public String getNString(String columnLabel) throws SQLException{
        return getString(columnLabel);
    }


    public Object getObject(int columnIndex) throws SQLException{
        return JdbcOdbcUtils.convertNet2Java(getObjectImpl(columnIndex));
    }


    public Object getObject(String columnLabel) throws SQLException{
        return getObject(findColumn(columnLabel));
    }


    public Object getObject(int columnIndex, Map<String, Class<?>> map){
        throw new UnsupportedOperationException();
    }


    public Object getObject(String columnLabel, Map<String, Class<?>> map) throws SQLException{
        return getObject(findColumn(columnLabel), map);
    }


    public Ref getRef(int columnIndex){
        throw new UnsupportedOperationException();
    }


    public Ref getRef(String columnLabel) throws SQLException{
        return getRef(findColumn(columnLabel));
    }


    public int getRow(){
a186 42
    public RowId getRowId(int columnIndex){
        throw new UnsupportedOperationException();
    }


    public RowId getRowId(String columnLabel) throws SQLException{
        return getRowId(findColumn(columnLabel));
    }


    public SQLXML getSQLXML(int columnIndex){
        throw new UnsupportedOperationException();
    }


    public SQLXML getSQLXML(String columnLabel) throws SQLException{
        return getSQLXML(findColumn(columnLabel));
    }


    public short getShort(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return 0;
            }
            if(obj instanceof IConvertible){
                return Convert.ToInt16(obj);
            }
            String str = obj.toString();
            return Int16.Parse(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public short getShort(String columnLabel) throws SQLException{
        return getShort(findColumn(columnLabel));
    }


a191 90
    public String getString(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return null;
            }
            return obj.toString();
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public String getString(String columnLabel) throws SQLException{
        return getString(findColumn(columnLabel));
    }


    public Time getTime(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return null;
            }
            if(obj instanceof cli.System.DateTime){
                cli.System.DateTime dt = (cli.System.DateTime)obj;
                return new Time(dt.get_Hour(), dt.get_Minute() - 1, dt.get_Second());
            }
            if(obj instanceof cli.System.TimeSpan){
                cli.System.TimeSpan ts = (cli.System.TimeSpan)obj;
                return new Time(ts.get_Hours(), ts.get_Minutes() - 1, ts.get_Seconds());
            }
            String str = obj.toString();
            return Time.valueOf(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public Time getTime(String columnLabel) throws SQLException{
        return getTime(findColumn(columnLabel));
    }


    public Time getTime(int columnIndex, Calendar cal) throws SQLException{
        // TODO Auto-generated method stub
        return null;
    }


    public Time getTime(String columnLabel, Calendar cal) throws SQLException{
        return getTime(findColumn(columnLabel), cal);
    }


    public Timestamp getTimestamp(int columnIndex) throws SQLException{
        try{
            Object obj = getObjectImpl(columnIndex);
            if(wasNull){
                return null;
            }
            if(obj instanceof cli.System.DateTime){
                cli.System.DateTime dt = (cli.System.DateTime)obj;
                return new Timestamp(JdbcOdbcUtils.getJavaMillis(dt));
            }
            String str = obj.toString();
            return Timestamp.valueOf(str);
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public Timestamp getTimestamp(String columnLabel) throws SQLException{
        return getTimestamp(findColumn(columnLabel));
    }


    public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException{
        // TODO Auto-generated method stub
        return null;
    }


    public Timestamp getTimestamp(String columnLabel, Calendar cal) throws SQLException{
        return getTimestamp(findColumn(columnLabel), cal);
    }


a196 24
    public URL getURL(int columnIndex){
        throw new UnsupportedOperationException();
    }


    public URL getURL(String columnLabel) throws SQLException{
        return getURL(findColumn(columnLabel));
    }


    public InputStream getUnicodeStream(int columnIndex) throws SQLException{
        try{
            return new ByteArrayInputStream(getString(columnIndex).getBytes("UTF16"));
        }catch(Throwable th){
            throw JdbcOdbcUtils.createSQLException(th);
        }
    }


    public InputStream getUnicodeStream(String columnLabel) throws SQLException{
        return getUnicodeStream(findColumn(columnLabel));
    }


d209 1
a209 1
        throwReadOnly();
d215 1
a215 1
        throwReadOnly();
d220 2
a221 3
    public boolean isClosed() throws SQLException{
        // TODO Auto-generated method stub
        return false;
d226 1
a226 1
        throwReadOnly();
d232 1
a232 1
        throwReadOnly();
d238 1
a238 1
        throwReadOnly();
d254 5
a258 1
        if(reader.Read()){
d263 1
d269 1
a269 1
        throwReadOnly();
d275 1
a275 1
        throwReadOnly();
d279 2
a280 2
    public boolean relative(int rows) throws SQLException{
        throwReadOnly();
a727 5
    public boolean wasNull(){
        return wasNull;
    }


d741 28
d771 5
a775 5
            columnIndex--;
            Object obj = reader.get_Item(columnIndex);
            if(obj == null || obj == DBNull.Value){
                wasNull = true;
                return null;
a776 1
            return obj;
a781 5

    private void throwReadOnly() throws SQLException{
        throw new SQLException("ResultSet is read only.");
    }

@


1.1
log
@First Step of the JDBC ODBC Bridge
@
text
@d26 1
d29 2
d37 12
d50 1
d53 1
a53 1
 * This JDBC Driver is a wrapper to the ODBC.NET Data Provider
d63 10
d77 3
d84 2
a85 2
        // TODO Auto-generated method stub
        return false;
d90 1
a90 2
        // TODO Auto-generated method stub

d95 1
a95 2
        // TODO Auto-generated method stub

d100 1
a100 2
        // TODO Auto-generated method stub

d117 1
a117 2
        // TODO Auto-generated method stub

d127 2
a128 2
        // TODO Auto-generated method stub
        return false;
d132 2
a133 3
    public Array getArray(int columnIndex) throws SQLException{
        // TODO Auto-generated method stub
        return null;
d138 1
a138 2
        // TODO Auto-generated method stub
        return null;
d143 9
a151 2
        // TODO Auto-generated method stub
        return null;
d156 1
a156 2
        // TODO Auto-generated method stub
        return null;
d161 8
a168 2
        // TODO Auto-generated method stub
        return null;
d173 1
a173 2
        // TODO Auto-generated method stub
        return null;
d178 10
a187 2
        // TODO Auto-generated method stub
        return null;
d192 1
a192 2
        // TODO Auto-generated method stub
        return null;
d197 5
a201 2
        // TODO Auto-generated method stub
        return null;
d206 1
a206 2
        // TODO Auto-generated method stub
        return null;
d210 2
a211 3
    public Blob getBlob(int columnIndex) throws SQLException{
        // TODO Auto-generated method stub
        return null;
d216 1
a216 2
        // TODO Auto-generated method stub
        return null;
d221 23
a243 2
        // TODO Auto-generated method stub
        return false;
d248 1
a248 2
        // TODO Auto-generated method stub
        return false;
d254 2
a255 3
            columnIndex--;
            if(reader.IsDBNull(columnIndex)){
                wasNull = true;
d258 7
a264 3
            return reader.GetByte(columnIndex);
        }catch(Exception ex){
            throw new SQLException(ex);
d276 2
a277 3
            columnIndex--;
            if(reader.IsDBNull(columnIndex)){
                wasNull = true;
d280 7
a286 6
            int count = (int)reader.GetBytes(columnIndex, 0, null, 0, 0);
            byte[] buffer = new byte[count];
            reader.GetBytes(columnIndex, 0, buffer, 0, buffer.length);
            return buffer;
        }catch(Exception ex){
            throw new SQLException(ex);
d297 5
a301 2
        // TODO Auto-generated method stub
        return null;
d306 1
a306 2
        // TODO Auto-generated method stub
        return null;
d310 2
a311 3
    public Clob getClob(int columnIndex) throws SQLException{
        // TODO Auto-generated method stub
        return null;
d316 1
a316 2
        // TODO Auto-generated method stub
        return null;
d320 2
a321 3
    public int getConcurrency() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d332 14
a345 2
        // TODO Auto-generated method stub
        return null;
d350 1
a350 2
        // TODO Auto-generated method stub
        return null;
d355 17
a371 2
        // TODO Auto-generated method stub
        return null;
d376 1
a376 2
        // TODO Auto-generated method stub
        return null;
d382 2
a383 3
            columnIndex--;
            if(reader.IsDBNull(columnIndex)){
                wasNull = true;
d386 7
a392 3
            return reader.GetDouble(columnIndex);
        }catch(Exception ex){
            throw new SQLException(ex);
d402 2
a403 3
    public int getFetchDirection() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d407 2
a408 3
    public int getFetchSize() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d414 2
a415 3
            columnIndex--;
            if(reader.IsDBNull(columnIndex)){
                wasNull = true;
d418 7
a424 3
            return reader.GetFloat(columnIndex);
        }catch(Exception ex){
            throw new SQLException(ex);
d434 2
a435 3
    public int getHoldability() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d441 2
a442 3
            columnIndex--;
            if(reader.IsDBNull(columnIndex)){
                wasNull = true;
d445 7
a451 3
            return reader.GetInt32(columnIndex);
        }catch(Exception ex){
            throw new SQLException(ex);
d463 2
a464 3
            columnIndex--;
            if(reader.IsDBNull(columnIndex)){
                wasNull = true;
d467 7
a473 3
            return reader.GetInt64(columnIndex);
        }catch(Exception ex){
            throw new SQLException(ex);
d484 1
a484 1
        return new JdbcOdbcResultSetMetaData(reader, reader.GetSchemaTable());
d489 1
a489 2
        // TODO Auto-generated method stub
        return null;
d494 1
a494 2
        // TODO Auto-generated method stub
        return null;
d498 2
a499 3
    public NClob getNClob(int columnIndex) throws SQLException{
        // TODO Auto-generated method stub
        return null;
d504 1
a504 2
        // TODO Auto-generated method stub
        return null;
d509 1
a509 2
        // TODO Auto-generated method stub
        return null;
d514 1
a514 2
        // TODO Auto-generated method stub
        return null;
d519 1
a519 2
        // TODO Auto-generated method stub
        return null;
d524 1
a524 2
        // TODO Auto-generated method stub
        return null;
d528 2
a529 3
    public Object getObject(int columnIndex, Map<String, Class<?>> map) throws SQLException{
        // TODO Auto-generated method stub
        return null;
d534 1
a534 2
        // TODO Auto-generated method stub
        return null;
d538 2
a539 3
    public Ref getRef(int columnIndex) throws SQLException{
        // TODO Auto-generated method stub
        return null;
d544 1
a544 2
        // TODO Auto-generated method stub
        return null;
d548 2
a549 3
    public int getRow() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d553 2
a554 3
    public RowId getRowId(int columnIndex) throws SQLException{
        // TODO Auto-generated method stub
        return null;
d559 1
a559 2
        // TODO Auto-generated method stub
        return null;
d563 2
a564 3
    public SQLXML getSQLXML(int columnIndex) throws SQLException{
        // TODO Auto-generated method stub
        return null;
d569 1
a569 2
        // TODO Auto-generated method stub
        return null;
d575 2
a576 3
            columnIndex--;
            if(reader.IsDBNull(columnIndex)){
                wasNull = true;
d579 7
a585 3
            return reader.GetInt16(columnIndex);
        }catch(Exception ex){
            throw new SQLException(ex);
d601 9
a609 2
        // TODO Auto-generated method stub
        return null;
d614 1
a614 2
        // TODO Auto-generated method stub
        return null;
d619 18
a636 2
        // TODO Auto-generated method stub
        return null;
d641 1
a641 2
        // TODO Auto-generated method stub
        return null;
d652 1
a652 2
        // TODO Auto-generated method stub
        return null;
d657 14
a670 2
        // TODO Auto-generated method stub
        return null;
d675 1
a675 2
        // TODO Auto-generated method stub
        return null;
d686 1
a686 2
        // TODO Auto-generated method stub
        return null;
d690 2
a691 3
    public int getType() throws SQLException{
        // TODO Auto-generated method stub
        return 0;
d695 2
a696 3
    public URL getURL(int columnIndex) throws SQLException{
        // TODO Auto-generated method stub
        return null;
d701 1
a701 2
        // TODO Auto-generated method stub
        return null;
d706 5
a710 2
        // TODO Auto-generated method stub
        return null;
d715 1
a715 2
        // TODO Auto-generated method stub
        return null;
d726 1
a726 2
        // TODO Auto-generated method stub

d731 2
a732 2
        // TODO Auto-generated method stub
        return false;
d737 2
a738 2
        // TODO Auto-generated method stub
        return false;
d749 2
a750 2
        // TODO Auto-generated method stub
        return false;
d755 2
a756 2
        // TODO Auto-generated method stub
        return false;
d761 2
a762 2
        // TODO Auto-generated method stub
        return false;
d767 1
a767 2
        // TODO Auto-generated method stub

d772 1
a772 2
        // TODO Auto-generated method stub

d777 6
a782 1
        return reader.Read();
d787 2
a788 2
        // TODO Auto-generated method stub
        return false;
d793 1
a793 2
        // TODO Auto-generated method stub

d798 2
a799 2
        // TODO Auto-generated method stub
        return false;
d804 2
a805 2
        // TODO Auto-generated method stub
        return false;
d810 2
a811 2
        // TODO Auto-generated method stub
        return false;
d816 2
a817 2
        // TODO Auto-generated method stub
        return false;
d821 2
a822 3
    public void setFetchDirection(int direction) throws SQLException{
        // TODO Auto-generated method stub

d826 2
a827 3
    public void setFetchSize(int rows) throws SQLException{
        // TODO Auto-generated method stub

d832 1
a832 2
        // TODO Auto-generated method stub

d837 1
a837 2
        // TODO Auto-generated method stub

d842 1
a842 2
        // TODO Auto-generated method stub

d847 1
a847 2
        // TODO Auto-generated method stub

d852 1
a852 2
        // TODO Auto-generated method stub

d857 1
a857 2
        // TODO Auto-generated method stub

d862 1
a862 2
        // TODO Auto-generated method stub

d867 1
a867 2
        // TODO Auto-generated method stub

d872 1
a872 2
        // TODO Auto-generated method stub

d877 1
a877 2
        // TODO Auto-generated method stub

d882 1
a882 2
        // TODO Auto-generated method stub

d887 1
a887 2
        // TODO Auto-generated method stub

d892 1
a892 2
        // TODO Auto-generated method stub

d897 1
a897 2
        // TODO Auto-generated method stub

d902 1
a902 2
        // TODO Auto-generated method stub

d907 1
a907 2
        // TODO Auto-generated method stub

d912 1
a912 2
        // TODO Auto-generated method stub

d917 1
a917 2
        // TODO Auto-generated method stub

d922 1
a922 2
        // TODO Auto-generated method stub

d927 1
a927 2
        // TODO Auto-generated method stub

d932 1
a932 2
        // TODO Auto-generated method stub

d937 1
a937 2
        // TODO Auto-generated method stub

d942 1
a942 2
        // TODO Auto-generated method stub

d947 1
a947 2
        // TODO Auto-generated method stub

d952 1
a952 2
        // TODO Auto-generated method stub

d957 1
a957 2
        // TODO Auto-generated method stub

d962 1
a962 2
        // TODO Auto-generated method stub

d967 1
a967 2
        // TODO Auto-generated method stub

d972 1
a972 2
        // TODO Auto-generated method stub

d977 1
a977 2
        // TODO Auto-generated method stub

d982 1
a982 2
        // TODO Auto-generated method stub

d987 1
a987 2
        // TODO Auto-generated method stub

d992 1
a992 2
        // TODO Auto-generated method stub

d997 1
a997 2
        // TODO Auto-generated method stub

d1002 1
a1002 2
        // TODO Auto-generated method stub

d1007 1
a1007 2
        // TODO Auto-generated method stub

d1012 1
a1012 2
        // TODO Auto-generated method stub

d1017 1
a1017 2
        // TODO Auto-generated method stub

d1022 1
a1022 2
        // TODO Auto-generated method stub

d1027 1
a1027 2
        // TODO Auto-generated method stub

d1032 1
a1032 2
        // TODO Auto-generated method stub

d1037 1
a1037 2
        // TODO Auto-generated method stub

d1042 1
a1042 2
        // TODO Auto-generated method stub

d1047 1
a1047 2
        // TODO Auto-generated method stub

d1052 1
a1052 2
        // TODO Auto-generated method stub

d1057 1
a1057 2
        // TODO Auto-generated method stub

d1062 1
a1062 2
        // TODO Auto-generated method stub

d1067 1
a1067 2
        // TODO Auto-generated method stub

d1072 1
a1072 2
        // TODO Auto-generated method stub

d1077 1
a1077 2
        // TODO Auto-generated method stub

d1082 1
a1082 2
        // TODO Auto-generated method stub

d1087 1
a1087 2
        // TODO Auto-generated method stub

d1092 1
a1092 2
        // TODO Auto-generated method stub

d1097 1
a1097 2
        // TODO Auto-generated method stub

d1102 1
a1102 2
        // TODO Auto-generated method stub

d1107 1
a1107 2
        // TODO Auto-generated method stub

d1112 1
a1112 2
        // TODO Auto-generated method stub

d1117 1
a1117 2
        // TODO Auto-generated method stub

d1122 1
a1122 2
        // TODO Auto-generated method stub

d1127 1
a1127 2
        // TODO Auto-generated method stub

d1132 1
a1132 2
        // TODO Auto-generated method stub

d1137 1
a1137 2
        // TODO Auto-generated method stub

d1142 1
a1142 2
        // TODO Auto-generated method stub

d1147 1
a1147 2
        // TODO Auto-generated method stub

d1152 1
a1152 2
        // TODO Auto-generated method stub

d1157 1
a1157 2
        // TODO Auto-generated method stub

d1162 1
a1162 2
        // TODO Auto-generated method stub

d1167 1
a1167 2
        // TODO Auto-generated method stub

d1172 1
a1172 2
        // TODO Auto-generated method stub

d1177 1
a1177 2
        // TODO Auto-generated method stub

d1182 1
a1182 2
        // TODO Auto-generated method stub

d1187 1
a1187 2
        // TODO Auto-generated method stub

d1192 1
a1192 2
        // TODO Auto-generated method stub

d1197 1
a1197 2
        // TODO Auto-generated method stub

d1202 1
a1202 2
        // TODO Auto-generated method stub

d1207 1
a1207 2
        // TODO Auto-generated method stub

d1212 1
a1212 2
        // TODO Auto-generated method stub

d1217 1
a1217 2
        // TODO Auto-generated method stub

d1222 1
a1222 2
        // TODO Auto-generated method stub

d1227 1
a1227 2
        // TODO Auto-generated method stub

d1232 1
a1232 2
        // TODO Auto-generated method stub

d1237 1
a1237 2
        // TODO Auto-generated method stub

d1242 1
a1242 2
        // TODO Auto-generated method stub

d1263 20
@

