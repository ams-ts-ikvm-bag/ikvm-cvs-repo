head	1.5;
access;
symbols
	v8_1_5717_0:1.5
	v8_1:1.5.0.12
	v8_0_5449_1:1.5
	v8_0_5449_0:1.5
	v8_0:1.5.0.10
	v7_4_5196_0:1.5
	v7_4:1.5.0.8
	v7_3:1.5.0.6
	v7_2_4630_6:1.5
	v7_2_4630_5:1.5
	v7_2_4630_4:1.5
	v7_2_4630_3:1.5
	v7_2_4630_2:1.5
	v7_2_4630_1:1.5
	v7_2:1.5.0.4
	v7_1_4532_2:1.5
	v7_1_4532_1:1.5
	v7_1_4532_0:1.5
	v7_1:1.5.0.2
	v7_0_4335_3:1.4.2.1
	v7_0_4335_2:1.4.2.1
	v7_0_4335_1:1.4.2.1
	v7_0_4335_0:1.4
	v7_0:1.4.0.2;
locks; strict;
comment	@# @;


1.5
date	2011.11.25.08.11.46;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.10.25.09.20.27;	author jfrijters;	state Exp;
branches
	1.4.2.1;
next	1.3;

1.3
date	2011.10.06.12.14.43;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.12.12.12.33;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2011.07.12.05.58.28;	author jfrijters;	state Exp;
branches;
next	;

1.4.2.1
date	2012.01.03.12.16.37;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.5
log
@FileStore for non-accessible drive should throw exception when trying to create the FileStore, not when accessing the name() or type() properties.
@
text
@/*
  Copyright (C) 2011 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net

*/

package sun.nio.fs;

import cli.System.IO.DriveInfo;
import cli.System.IO.ErrorEventArgs;
import cli.System.IO.ErrorEventHandler;
import cli.System.IO.FileSystemEventArgs;
import cli.System.IO.FileSystemEventHandler;
import cli.System.IO.FileSystemWatcher;
import cli.System.IO.WatcherChangeTypes;
import java.io.IOException;
import java.nio.file.*;
import java.nio.file.attribute.*;
import java.nio.file.spi.FileSystemProvider;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.TimeUnit;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import static ikvm.internal.Util.WINDOWS;

final class NetFileSystem extends FileSystem
{
    private static final Set<String> attributes = Collections.unmodifiableSet(new HashSet<String>(Arrays.asList("basic")));
    private final NetFileSystemProvider provider;
    private final String separator = Character.toString(cli.System.IO.Path.DirectorySeparatorChar);

    NetFileSystem(NetFileSystemProvider provider)
    {
        this.provider = provider;
    }

    public FileSystemProvider provider()
    {
        return provider;
    }

    public void close() throws IOException
    {
        throw new UnsupportedOperationException();
    }

    public boolean isOpen()
    {
        return true;
    }

    public boolean isReadOnly()
    {
        return false;
    }

    public String getSeparator()
    {
        return separator;
    }

    public Iterable<Path> getRootDirectories()
    {
        SecurityManager sm = System.getSecurityManager();
        ArrayList<Path> list = new ArrayList<>();
        for (DriveInfo info : DriveInfo.GetDrives())
        {
            try
            {
                if (sm != null)
                {
                    sm.checkRead(info.get_Name());
                }
            }
            catch (SecurityException _)
            {
                continue;
            }
            list.add(getPath(info.get_Name()));
        }
        return list;
    }

    public Iterable<FileStore> getFileStores()
    {
        SecurityManager sm = System.getSecurityManager();
        if (sm != null)
        {
            try
            {
                sm.checkPermission(new RuntimePermission("getFileStoreAttributes"));
            }
            catch (SecurityException _)
            {
                return Collections.emptyList();
            }
        }
        ArrayList<FileStore> list = new ArrayList<>();
        for (DriveInfo info : DriveInfo.GetDrives())
        {
            try
            {
                if (sm != null)
                {
                    sm.checkRead(info.get_Name());
                }
            }
            catch (SecurityException _)
            {
                continue;
            }
            try
            {
                list.add(provider.getFileStore(info));
            }
            catch (IOException _)
            {
            }
        }
        return list;
    }

    public Set<String> supportedFileAttributeViews()
    {
        return attributes;
    }

    public Path getPath(String first, String... more)
    {
        if (more.length == 0)
        {
            return new NetPath(this, first);
        }
        else
        {
            StringBuilder sb = new StringBuilder(first);
            String sep = sb.length() == 0 ? "" : separator;
            for (String s : more)
            {
                if (s.length() != 0)
                {
                    sb.append(sep);
                    sb.append(s);
                    sep = separator;
                }
            }
            return new NetPath(this, sb.toString());
        }
    }

    public PathMatcher getPathMatcher(String syntaxAndPattern)
    {
        String regex;
        if (syntaxAndPattern.startsWith("glob:"))
        {
            String pattern = syntaxAndPattern.substring(5);
            if (WINDOWS)
            {
                regex = Globs.toWindowsRegexPattern(pattern);
            }
            else
            {
                regex = Globs.toUnixRegexPattern(pattern);
            }
        }
        else if (syntaxAndPattern.startsWith("regex:"))
        {
            regex = syntaxAndPattern.substring(6);
        }
        else if (syntaxAndPattern.indexOf(':') <= 0)
        {
            throw new IllegalArgumentException();
        }
        else
        {
            throw new UnsupportedOperationException();
        }
        final Pattern pattern = Pattern.compile(regex, WINDOWS ? Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE : 0);
        return new PathMatcher() {
            @@Override
            public boolean matches(Path path) {
                return pattern.matcher(path.toString()).matches();
            }
        };
    }

    public UserPrincipalLookupService getUserPrincipalLookupService()
    {
        throw new UnsupportedOperationException();
    }

    static final class NetWatchService implements WatchService
    {
        static final WatchEvent<?> overflowEvent = new WatchEvent<Object>() {
            public Object context() {
                return null;
            }
            public int count() {
                return 1;
            }
            public WatchEvent.Kind<Object> kind() {
                return StandardWatchEventKinds.OVERFLOW;
            }
        };
        private static final WatchKey CLOSED = new WatchKey() {
            public boolean isValid() { return false; }
            public List<WatchEvent<?>> pollEvents() { return null; }
            public boolean reset() { return false; }
            public void cancel() { }
            public Watchable watchable() { return null; }
        };
        private boolean closed;
        private final ArrayList<NetWatchKey> keys = new ArrayList<>();
        private final LinkedBlockingQueue<WatchKey> queue = new LinkedBlockingQueue<>();

        public synchronized void close()
        {
            if (!closed)
            {
                closed = true;
                for (NetWatchKey key : keys)
                {
                    key.close();
                }
                enqueue(CLOSED);
            }
        }

        private WatchKey checkClosed(WatchKey key)
        {
            if (key == CLOSED)
            {
                enqueue(CLOSED);
                throw new ClosedWatchServiceException();
            }
            return key;
        }

        public WatchKey poll()
        {
            return checkClosed(queue.poll());
        }

        public WatchKey poll(long timeout, TimeUnit unit) throws InterruptedException
        {
            return checkClosed(queue.poll(timeout, unit));
        }

        public WatchKey take() throws InterruptedException
        {
            return checkClosed(queue.take());
        }

        void enqueue(WatchKey key)
        {
            for (;;)
            {
                try
                {
                    queue.put(key);
                    return;
                }
                catch (InterruptedException _)
                {
                }
            }
        }

        private final class NetWatchKey implements WatchKey
        {
            private final NetPath path;
            private FileSystemWatcher fsw;
            private ArrayList<WatchEvent<?>> list = new ArrayList<>();
            private HashSet<String> modified = new HashSet<>();
            private boolean signaled;
            
            NetWatchKey(NetPath path)
            {
                this.path = path;
            }
            
            synchronized void init(final boolean create, final boolean delete, final boolean modify, final boolean overflow, final boolean subtree)
            {
                if (fsw != null)
                {
                    // we could reuse the FileSystemWatcher, but for now we just recreate it
                    // (and we run the risk of missing some events while we're doing that)
                    fsw.Dispose();
                    fsw = null;
                }
                fsw = new FileSystemWatcher(path.path);
                if (create)
                {
                    fsw.add_Created(new FileSystemEventHandler(new FileSystemEventHandler.Method() {
                        public void Invoke(Object sender, FileSystemEventArgs e) {
                            addEvent(createEvent(e), null);
                        }
                    }));
                }
                if (delete)
                {
                    fsw.add_Deleted(new FileSystemEventHandler(new FileSystemEventHandler.Method() {
                        public void Invoke(Object sender, FileSystemEventArgs e) {
                            addEvent(createEvent(e), null);
                        }
                    }));
                }
                if (modify)
                {
                    fsw.add_Changed(new FileSystemEventHandler(new FileSystemEventHandler.Method() {
                        public void Invoke(Object sender, FileSystemEventArgs e) {
                            synchronized (NetWatchKey.this) {
                                if (modified.contains(e.get_Name())) {
                                    // we already have an ENTRY_MODIFY event pending
                                    return;
                                }
                            }
                            addEvent(createEvent(e), e.get_Name());
                        }
                    }));
                }
                fsw.add_Error(new ErrorEventHandler(new ErrorEventHandler.Method() {
                    public void Invoke(Object sender, ErrorEventArgs e) {
                        if (e.GetException() instanceof cli.System.ComponentModel.Win32Exception
                            && ((cli.System.ComponentModel.Win32Exception)e.GetException()).get_ErrorCode() == -2147467259) {
                            // the directory we were watching was deleted
                            cancelledByError();
                        } else if (overflow) {
                            addEvent(overflowEvent, null);
                        }
                    }
                }));
                if (subtree)
                {
                    fsw.set_IncludeSubdirectories(true);
                }
                fsw.set_EnableRaisingEvents(true);
            }

            WatchEvent<?> createEvent(final FileSystemEventArgs e)
            {
                return new WatchEvent<Path>() {
                    public Path context() {
                        return new NetPath((NetFileSystem)path.getFileSystem(), e.get_Name());
                    }
                    public int count() {
                        return 1;
                    }
                    public WatchEvent.Kind<Path> kind() {
                        switch (e.get_ChangeType().Value) {
                            case WatcherChangeTypes.Created:
                                return StandardWatchEventKinds.ENTRY_CREATE;
                            case WatcherChangeTypes.Deleted:
                                return StandardWatchEventKinds.ENTRY_DELETE;
                            default:
                                return StandardWatchEventKinds.ENTRY_MODIFY;
                        }
                    }
                };
            }

            void cancelledByError()
            {
                cancel();
                synchronized (this)
                {
                    if (!signaled)
                    {
                        signaled = true;
                        enqueue(this);
                    }
                }
            }

            synchronized void addEvent(WatchEvent<?> event, String modified)
            {
                list.add(event);
                if (modified != null)
                {
                    this.modified.add(modified);
                }
                if (!signaled)
                {
                    signaled = true;
                    enqueue(this);
                }
            }

            public synchronized boolean isValid()
            {
                return fsw != null;
            }

            public synchronized List<WatchEvent<?>> pollEvents()
            {
                ArrayList<WatchEvent<?>> r = list;
                list = new ArrayList<>();
                modified.clear();
                return r;
            }

            public synchronized boolean reset()
            {
                if (fsw == null)
                {
                    return false;
                }
                if (signaled)
                {
                    if (list.size() == 0)
                    {
                        signaled = false;
                    }
                    else
                    {
                        enqueue(this);
                    }
                }
                return true;
            }

            void close()
            {
                if (fsw != null)
                {
                    fsw.Dispose();
                    fsw = null;
                }
            }

            public void cancel()
            {
                synchronized (NetWatchService.this)
                {
                    keys.remove(this);
                    close();
                }
            }

            public Watchable watchable()
            {
                return path;
            }
        }

        synchronized WatchKey register(NetPath path, boolean create, boolean delete, boolean modify, boolean overflow, boolean subtree)
        {
            if (closed)
            {
                throw new ClosedWatchServiceException();
            }
            NetWatchKey existing = null;
            for (NetWatchKey key : keys)
            {
                if (key.watchable().equals(path))
                {
                    existing = key;
                    break;
                }
            }
            if (existing == null)
            {
                existing = new NetWatchKey(path);
                keys.add(existing);
            }
            existing.init(create, delete, modify, overflow, subtree);
            return existing;
        }
    }

    public WatchService newWatchService() throws IOException
    {
        return new NetWatchService();
    }
}
@


1.4
log
@Added security manager checks.
@
text
@d135 7
a141 1
            list.add(provider.getFileStore(info));
@


1.4.2.1
log
@Backported fixes:
- FileStore for non-accessible drive should throw exception when trying to create the FileStore, not when accessing the name() or type() properties.
- Graphics2D.clip(null) should only throw NPE for a Component graphics.
- Don't crash when ikvmc -resource: or -externalresource: option doesn't contain an = sign.
- Handle Main-Class manifest value that spans multiple lines. Fix for bug #3461012.
- Informational messages should not be treated as error when -warnaserror is specified. Fix for #3443377.
- Don't enforce pre-1.5 class name rules in ikvmc (since HotSpot doesn't enforce any naming rules for classes loaded by the system (and boot) class loader, by default). Fix for #3443373.
- Fix for #3441959.
- Throwable.addSuppressed() didn't have a proper parameter name.
- mark getSpace0 with SecuritySafeCritical to avoid getting an exception with .NET 4
- Bug fix. Removed incorrect check for uninitialized objects on backward branch.
- Don't crash when ikvmc -resource: or -externalresource: option doesn't contain an = sign.
- Added AssemblyInformationalVersionAttribute to OpenJDK assemblies (to set the "Product Version"). Part of patch #3458997.
- Include copyright and metadata in IKVM.OpenJDK.Tools.dll. Part of patch #3458997.
- Bug fix. Don't call Finish on unloadable TypeWrapper.
- Bug fix. When constructing a generic class loader we can't use GetWrapperFromType() on the type arguments, because they might refer to a subtype that is currently being loaded.
- Fix. When decoding a NameSigAttribute it is possible that a type does not exist (i.e. is an unloadable) and that results in a warning emitted against the referenced assemblies class loader.
- Suppress annotation custom attributes when enumerating inner classes.
- IKVM.Reflection: Bug fix. Fixed copy/paste error. FieldInfo.IsAssembly should test for FieldAttributes.Assembly access, not FieldAttributes.Family.
@
text
@d135 1
a135 7
            try
            {
                list.add(provider.getFileStore(info));
            }
            catch (IOException _)
            {
            }
@


1.3
log
@Implemented remaining java.nio.file functionality.
@
text
@d87 1
d91 11
d109 12
d124 11
@


1.2
log
@More java.nio.file functionality.
@
text
@d27 7
a33 1
import ikvm.internal.NotYetImplementedError;
d38 1
d41 2
d44 1
d46 2
d87 6
a92 1
        throw new NotYetImplementedError();
d97 6
a102 1
        throw new NotYetImplementedError();
d135 32
a166 1
        throw new NotYetImplementedError();
d171 280
a450 1
        throw new NotYetImplementedError();
d455 1
a455 1
        throw new NotYetImplementedError();
@


1.1
log
@First small steps in java.nio.file implementation. Update sun.util.calendar.ZoneInfoFile to OpenJDK 7, because it can now use our java.nio.file implementation.
@
text
@d32 3
d39 1
d85 1
a85 1
        throw new NotYetImplementedError();
@

