head	1.11;
access;
symbols
	v8_1_5717_0:1.11
	v8_1:1.11.0.4
	v8_0_5449_1:1.11
	v8_0_5449_0:1.11
	v8_0:1.11.0.2
	v7_4_5196_0:1.10
	v7_4:1.10.0.2
	v7_3:1.9.0.4
	v7_2_4630_6:1.9
	v7_2_4630_5:1.9
	v7_2_4630_4:1.9
	v7_2_4630_3:1.9
	v7_2_4630_2:1.9
	v0_46_0_4:1.3
	v7_2_4630_1:1.9
	v7_2:1.9.0.2
	v7_1_4532_2:1.8
	v7_1_4532_1:1.8
	v7_1_4532_0:1.8
	v7_1:1.8.0.2
	v7_0_4335_3:1.7.2.1
	v7_0_4335_2:1.7
	v7_0_4335_1:1.7
	v0_46_0_2:1.3
	v7_0_4335_0:1.7
	v7_0:1.7.0.2
	v0_40_0_6:1.2
	v0_40_0_5:1.2
	v0_46_0_1:1.3
	v0_46_0_0:1.3
	v0_46:1.3.0.2
	v0_36_0_14:1.1
	v0_44_0_6:1.2
	v0_44_0_5:1.2
	v0_44_0_4:1.2
	v0_44_0_3:1.2
	v0_44_0_2:1.2
	v0_42_0_7:1.2
	v0_44_0_1:1.2
	v0_44_0_0:1.2
	v0_44:1.2.0.8
	v0_42_0_6:1.2
	v0_42_0_5:1.2
	v0_42_0_4:1.2
	v0_42_0_3:1.2
	v0_42_0_2:1.2
	v0_42_0_1:1.2
	v0_42_0_0:1.2
	v0_42:1.2.0.6
	v0_40_0_3:1.2
	v0_40_0_2:1.2
	v0_40_0_1:1.2
	v0_40_0_0:1.2
	v0_40:1.2.0.4
	v0_36_0_13:1.1
	v0_38_0_1:1.2
	v0_38_0_0:1.2
	v0_38:1.2.0.2
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.2;
locks; strict;
comment	@# @;


1.11
date	2014.05.19.12.43.41;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2014.02.07.14.14.12;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2012.08.29.07.22.25;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2012.03.18.10.54.16;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.19.09.09.50;	author jfrijters;	state Exp;
branches
	1.7.2.1;
next	1.6;

1.6
date	2011.08.18.12.45.17;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2011.08.18.12.06.22;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.07.15.09.05.27;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.24.16.40.23;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.05.59;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.20.09.17.26;	author jfrijters;	state Exp;
branches;
next	;

1.7.2.1
date	2012.03.19.07.54.51;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.11
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package sun.nio.ch;

import java.io.FileDescriptor;
import java.io.IOException;
import java.net.*;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.channels.spi.*;


/**
 * File-descriptor based I/O utilities that are shared by NIO classes.
 */

public class IOUtil {

    private IOUtil() { }                // No instantiation

    static boolean randomBytes(byte[] someBytes)
    {
        try
        {
            if (false) throw new cli.System.Security.Cryptography.CryptographicException();
            cli.System.Security.Cryptography.RNGCryptoServiceProvider csp = new cli.System.Security.Cryptography.RNGCryptoServiceProvider();
            csp.GetBytes(someBytes);
            return true;
        }
        catch (cli.System.Security.Cryptography.CryptographicException _)
        {
            return false;
        }
    }

    static void configureBlocking(FileDescriptor fd, boolean blocking) throws IOException
    {
        fd.setSocketBlocking(blocking);
    }

    // this is a dummy method to allow us to use unmodified socket channel impls
    static int fdVal(FileDescriptor fd)
    {
        return 0xbadc0de;
    }

    static int read(FileDescriptor fd, ByteBuffer dst, long position,
                    NativeDispatcher nd)
        throws IOException
    {
        if (dst.isReadOnly())
            throw new IllegalArgumentException("Read-only buffer");

        if (position != -1)
        {
            long prevpos = fd.getFilePointer();
            try
            {
                fd.seek(position);
                return read(fd, dst, -1, nd);
            }
            finally
            {
                fd.seek(prevpos);
            }
        }

        if (dst.hasArray())
        {
            byte[] buf = dst.array();
            int len = nd.read(fd, buf, dst.arrayOffset() + dst.position(), dst.remaining());
            if (len > 0)
            {
                dst.position(dst.position() + len);
            }
            return len;
        }
        else
        {
            byte[] buf = new byte[dst.remaining()];
            int len = nd.read(fd, buf, 0, buf.length);
            if (len > 0)
            {
                dst.put(buf, 0, len);
            }
            return len;
        }
    }

    static long read(FileDescriptor fd, ByteBuffer[] bufs, int offset, int length, NativeDispatcher nd)
        throws IOException
    {
        return nd.read(fd, bufs, offset, length);
    }

    static int write(FileDescriptor fd, ByteBuffer src, long position,
                     NativeDispatcher nd)
        throws IOException
    {
        if (position != -1)
        {
            long prevpos = fd.getFilePointer();
            try
            {
                fd.seek(position);
                return write(fd, src, -1, nd);
            }
            finally
            {
                fd.seek(prevpos);
            }
        }

        if (src.hasArray())
        {
            byte[] buf = src.array();
            int len = nd.write(fd, buf, src.arrayOffset() + src.position(), src.remaining());
            if (len > 0)
            {
                src.position(src.position() + len);
            }
            return len;
        }
        else
        {
            int pos = src.position();
            byte[] buf = new byte[src.remaining()];
            src.get(buf);
            src.position(pos);
            int len = nd.write(fd, buf, 0, buf.length);
            if (len > 0)
            {
                src.position(pos + len);
            }
            return len;
        }
    }

    static long write(FileDescriptor fd, ByteBuffer[] bufs, NativeDispatcher nd)
        throws IOException
    {
        return nd.write(fd, bufs, 0, bufs.length);
    }

    static long write(FileDescriptor fd, ByteBuffer[] bufs, int offset, int length, NativeDispatcher nd)
        throws IOException
    {
        return nd.write(fd, bufs, offset, length);
    }

    /**
     * Used to trigger loading of native libraries
     */
    public static void load() { }
}
@


1.10
log
@Merged OpenJDK 7u40 b34, except for java.lang.invoke and sun.invoke packages.
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2010, Oracle and/or its affiliates. All rights reserved.
d40 1
a40 1
class IOUtil {
d173 5
@


1.9
log
@Updated copyright year.
@
text
@d71 1
a71 1
                    NativeDispatcher nd, Object lock)
d79 2
a80 1
            synchronized (lock)
d82 6
a87 10
                long prevpos = fd.getFilePointer();
                try
                {
                    fd.seek(position);
                    return read(fd, dst, -1, nd, null);
                }
                finally
                {
                    fd.seek(prevpos);
                }
d120 1
a120 1
                     NativeDispatcher nd, Object lock)
d125 7
a131 1
            synchronized (lock)
d133 1
a133 10
                long prevpos = fd.getFilePointer();
                try
                {
                    fd.seek(position);
                    return write(fd, src, -1, nd, null);
                }
                finally
                {
                    fd.seek(prevpos);
                }
@


1.8
log
@Bug fix. When writing a direct ByteBuffer to a non-blocking socket and the write fails because there is no kernel buffer available, we should not advance the ByteBuffer position.
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2002, Oracle and/or its affiliates. All rights reserved.
@


1.7
log
@Implemented positional read/write.
@
text
@d158 1
@


1.7.2.1
log
@- Backported non-blocking direct ByteBuffer nio socket write bug fix.
- Updated version to 7.0.4335.3.
@
text
@a157 1
            src.position(pos);
@


1.6
log
@Moved FileChannelImpl read/write operations to NativeDispatcher.
@
text
@d76 1
d78 15
a92 1
            throw new ikvm.internal.NotYetImplementedError();
d127 15
a141 1
            throw new ikvm.internal.NotYetImplementedError();
@


1.5
log
@Indirect socket read/write operations via the NativeDispatcher.
@
text
@d111 3
@


1.4
log
@Updated bulk of java.nio to OpenJDK 7.
@
text
@a33 1
import cli.System.Net.Sockets.SocketFlags;
d82 1
a82 1
            int len = readImpl(fd, buf, dst.arrayOffset() + dst.position(), dst.remaining());
d92 1
a92 1
            int len = readImpl(fd, buf, 0, buf.length);
d101 2
a102 1
    private static int readImpl(FileDescriptor fd, byte[] buf, int offset, int length) throws IOException
d104 1
a104 29
        if (length == 0)
        {
            return 0;
        }
        try
        {
            if (false) throw new cli.System.Net.Sockets.SocketException();
            if (false) throw new cli.System.ObjectDisposedException("");
            int read = fd.getSocket().Receive(buf, offset, length, SocketFlags.wrap(SocketFlags.None));
            return read == 0 ? IOStatus.EOF : read;
        }
        catch (cli.System.Net.Sockets.SocketException x)
        {
            if (x.get_ErrorCode() == SocketUtil.WSAESHUTDOWN)
            {
                // the socket was shutdown, so we have to return EOF
                return IOStatus.EOF;
            }
            else if (x.get_ErrorCode() == SocketUtil.WSAEWOULDBLOCK)
            {
                // nothing to read and would block
                return IOStatus.UNAVAILABLE;
            }
            throw SocketUtil.convertSocketExceptionToIOException(x);
        }
        catch (cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
a106 3
    static native long read(FileDescriptor fd, ByteBuffer[] bufs, int offset, int length, NativeDispatcher nd)
        throws IOException;

d114 1
a114 1
            int len = writeImpl(fd, buf, src.arrayOffset() + src.position(), src.remaining());
d126 1
a126 1
            int len = writeImpl(fd, buf, 0, buf.length);
d135 2
a136 1
    private static int writeImpl(FileDescriptor fd, byte[] buf, int offset, int length) throws IOException
d138 1
a138 18
        try
        {
            if (false) throw new cli.System.Net.Sockets.SocketException();
            if (false) throw new cli.System.ObjectDisposedException("");
            return fd.getSocket().Send(buf, offset, length, SocketFlags.wrap(SocketFlags.None));
        }
        catch (cli.System.Net.Sockets.SocketException x)
        {
            if (x.get_ErrorCode() == SocketUtil.WSAEWOULDBLOCK)
            {
                return IOStatus.UNAVAILABLE;
            }
            throw SocketUtil.convertSocketExceptionToIOException(x);
        }
        catch (cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
d141 1
a141 1
    static long write(FileDescriptor fd, ByteBuffer[] bufs, NativeDispatcher nd)
d144 1
a144 1
        return write(fd, bufs, 0, bufs.length, nd);
a145 3

    static native long write(FileDescriptor fd, ByteBuffer[] bufs, int offset, int length, NativeDispatcher nd)
        throws IOException;
@


1.3
log
@Integrated OpenJDK 6 b21.
@
text
@d34 1
d62 1
a62 1
        Net.configureBlocking(fd, blocking);
d65 131
@


1.2
log
@Converted tabs to spaces.
@
text
@d2 1
a2 1
 * Copyright 2000-2002 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.1
log
@- Implemented DatagramChannelImpl and PipeImpl.
- More nio fixes.
@
text
@d42 1
a42 1
    private IOUtil() { }		// No instantiation
d46 11
a56 11
	try
	{
	    if (false) throw new cli.System.Security.Cryptography.CryptographicException();
	    cli.System.Security.Cryptography.RNGCryptoServiceProvider csp = new cli.System.Security.Cryptography.RNGCryptoServiceProvider();
	    csp.GetBytes(someBytes);
	    return true;
	}
	catch (cli.System.Security.Cryptography.CryptographicException _)
	{
	    return false;
	}
d61 1
a61 1
	Net.configureBlocking(fd, blocking);
@

