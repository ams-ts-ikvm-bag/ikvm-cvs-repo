head	1.5;
access;
symbols
	v8_1_5717_0:1.5
	v8_1:1.5.0.4
	v8_0_5449_1:1.5
	v8_0_5449_0:1.5
	v8_0:1.5.0.2
	v7_4_5196_0:1.4
	v7_4:1.4.0.2
	v7_3:1.3.0.8
	v7_2_4630_6:1.3
	v7_2_4630_5:1.3
	v7_2_4630_4:1.3
	v7_2_4630_3:1.3
	v7_2_4630_2:1.3
	v7_2_4630_1:1.3
	v7_2:1.3.0.6
	v7_1_4532_2:1.3
	v7_1_4532_1:1.3
	v7_1_4532_0:1.3
	v7_1:1.3.0.4
	v7_0_4335_3:1.3
	v7_0_4335_2:1.3
	v7_0_4335_1:1.3
	v7_0_4335_0:1.3
	v7_0:1.3.0.2;
locks; strict;
comment	@# @;


1.5
date	2014.05.19.12.43.41;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2014.02.07.14.14.12;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2011.08.18.12.06.22;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2011.08.18.11.36.45;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2011.08.18.11.30.53;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.5
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 2000, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package sun.nio.ch;

import java.io.*;
import java.nio.ByteBuffer;

/**
 * Allows different platforms to call different native methods
 * for read and write operations.
 */

abstract class NativeDispatcher
{
    abstract int read(FileDescriptor fd, byte[] buf, int offset, int length) throws IOException;

    /**
     * Returns {@@code true} if pread/pwrite needs to be synchronized with
     * position sensitive methods.
     */
    boolean needsPositionLock() {
        return false;
    }

    abstract int write(FileDescriptor fd, byte[] buf, int offset, int length) throws IOException;

    abstract long read(FileDescriptor fd, ByteBuffer[] bufs, int offset, int length) throws IOException;

    abstract long write(FileDescriptor fd, ByteBuffer[] bufs, int offset, int length) throws IOException;

    abstract void close(FileDescriptor fd) throws IOException;

    // Prepare the given fd for closing by duping it to a known internal fd
    // that's already closed.  This is necessary on some operating systems
    // (Solaris and Linux) to prevent fd recycling.
    //
    void preClose(FileDescriptor fd) throws IOException {
        // Do nothing by default; this is only needed on Unix
    }

}
@


1.4
log
@Merged OpenJDK 7u40 b34, except for java.lang.invoke and sun.invoke packages.
@
text
@d2 1
a2 1
 * Copyright (c) 2000, 2002, Oracle and/or its affiliates. All rights reserved.
@


1.3
log
@Indirect socket read/write operations via the NativeDispatcher.
@
text
@d40 8
@


1.2
log
@Reduce the number of differences in FileChannelImpl.
@
text
@d29 1
d38 7
@


1.1
log
@Prepare for forking.
@
text
@a37 24
    abstract int read(FileDescriptor fd, long address, int len)
        throws IOException;

    int pread(FileDescriptor fd, long address, int len,
                             long position, Object lock) throws IOException
    {
        throw new IOException("Operation Unsupported");
    }

    abstract long readv(FileDescriptor fd, long address, int len)
        throws IOException;

    abstract int write(FileDescriptor fd, long address, int len)
        throws IOException;

    int pwrite(FileDescriptor fd, long address, int len,
                             long position, Object lock) throws IOException
    {
        throw new IOException("Operation Unsupported");
    }

    abstract long writev(FileDescriptor fd, long address, int len)
        throws IOException;

@

