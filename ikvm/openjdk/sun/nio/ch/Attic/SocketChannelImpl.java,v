head	1.12;
access;
symbols
	v0_46_0_4:1.9
	v0_46_0_2:1.9
	v0_40_0_6:1.7
	v0_40_0_5:1.7
	v0_46_0_1:1.9
	v0_46_0_0:1.9
	v0_46:1.9.0.2
	v0_36_0_14:1.5
	v0_44_0_6:1.7
	v0_44_0_5:1.7
	v0_44_0_4:1.7
	v0_44_0_3:1.7
	v0_44_0_2:1.7
	v0_42_0_7:1.7
	v0_44_0_1:1.7
	v0_44_0_0:1.7
	v0_44:1.7.0.8
	v0_42_0_6:1.7
	v0_42_0_5:1.7
	v0_42_0_4:1.7
	v0_42_0_3:1.7
	v0_42_0_2:1.7
	v0_42_0_1:1.7
	v0_42_0_0:1.7
	v0_42:1.7.0.6
	v0_40_0_3:1.7
	v0_40_0_2:1.7
	v0_40_0_1:1.7
	v0_40_0_0:1.7
	v0_40:1.7.0.4
	v0_36_0_13:1.5
	v0_38_0_1:1.7
	v0_38_0_0:1.7
	v0_38:1.7.0.2
	v0_36_0_9:1.5
	v0_36_0_7:1.5
	v0_36_0_5:1.5
	v0_36_0_4:1.5
	v0_36_0_3:1.5
	v0_36_0_2:1.5
	v0_36_0_1:1.5
	v0_36_0_0:1.5
	v0_36:1.5.0.2;
locks; strict;
comment	@# @;


1.12
date	2011.07.15.09.05.27;	author jfrijters;	state dead;
branches;
next	1.11;

1.11
date	2011.07.09.16.52.12;	author smallsql;	state Exp;
branches;
next	1.10;

1.10
date	2011.07.09.12.13.56;	author smallsql;	state Exp;
branches;
next	1.9;

1.9
date	2011.01.24.16.40.23;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2010.08.27.06.21.56;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2008.06.12.09.10.57;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2008.06.11.09.06.00;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2007.07.20.15.10.38;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2007.07.20.09.17.26;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.19.08.47.42;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.18.15.35.29;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.18.05.46.38;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Updated bulk of java.nio to OpenJDK 7.
@
text
@/*
 * Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package sun.nio.ch;

import ikvm.internal.NotYetImplementedError;

import java.io.FileDescriptor;
import java.io.IOException;
import java.net.*;
import java.nio.ByteBuffer;
import java.nio.channels.*;
import java.nio.channels.spi.*;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;


/**
 * An implementation of SocketChannels
 */

class SocketChannelImpl
    extends SocketChannel
    implements SelChImpl
{
    // Our file descriptor object
    private final FileDescriptor fd;
    private volatile cli.System.IAsyncResult asyncConnect;

    // IDs of native threads doing reads and writes, for signalling
    private volatile long readerThread = 0;
    private volatile long writerThread = 0;

    // Lock held by current reading or connecting thread
    private final Object readLock = new Object();

    // Lock held by current writing or connecting thread
    private final Object writeLock = new Object();

    // Lock held by any thread that modifies the state fields declared below
    // DO NOT invoke a blocking I/O operation while holding this lock!
    private final Object stateLock = new Object();

    // -- The following fields are protected by stateLock

    // State, increases monotonically
    private static final int ST_UNINITIALIZED = -1;
    private static final int ST_UNCONNECTED = 0;
    private static final int ST_PENDING = 1;
    private static final int ST_CONNECTED = 2;
    private static final int ST_KILLPENDING = 3;
    private static final int ST_KILLED = 4;
    private int state = ST_UNINITIALIZED;

    // Binding
    private SocketAddress localAddress = null;
    private SocketAddress remoteAddress = null;

    // Input/Output open
    private boolean isInputOpen = true;
    private boolean isOutputOpen = true;
    private boolean readyToConnect = false;

    // Options, created on demand
    private SocketOpts.IP.TCP options = null;

    // Socket adaptor, created on demand
    private Socket socket = null;

    // -- End of fields protected by stateLock


    // Constructor for normal connecting sockets
    //
    SocketChannelImpl(SelectorProvider sp) throws IOException {
        super(sp);
        this.fd = Net.socket(true);
        this.state = ST_UNCONNECTED;
    }

    // Constructor for sockets obtained from server sockets
    //
    SocketChannelImpl(SelectorProvider sp,
                      FileDescriptor fd, InetSocketAddress remote)
        throws IOException
    {
        super(sp);
        this.fd = fd;
        this.state = ST_CONNECTED;
        this.remoteAddress = remote;
    }

    public Socket socket() {
        synchronized (stateLock) {
            if (socket == null)
                socket = SocketAdaptor.create(this);
            return socket;
        }
    }

    public SocketAddress getLocalAddress() throws IOException {
        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();
            return localAddress;
        }
    }

    public SocketAddress getRemoteAddress() throws IOException {
        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();
            return remoteAddress;
        }
    }

    public <T> SocketChannel setOption(SocketOption<T> name, T value)
        throws IOException
    {
        if (name == null)
            throw new NullPointerException();
        if (!supportedOptions().contains(name))
            throw new UnsupportedOperationException("'" + name + "' not supported");

        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();

            // special handling for IP_TOS: no-op when IPv6
            if (name == StandardSocketOptions.IP_TOS) {
                if (!Net.isIPv6Available())
                    Net.setSocketOption(fd, StandardProtocolFamily.INET, name, value);
                return this;
            }

            // no options that require special handling
            Net.setSocketOption(fd, Net.UNSPEC, name, value);
            return this;
        }
    }

    @@SuppressWarnings("unchecked")
    public <T> T getOption(SocketOption<T> name)
        throws IOException
    {
        if (name == null)
            throw new NullPointerException();
        if (!supportedOptions().contains(name))
            throw new UnsupportedOperationException("'" + name + "' not supported");

        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();

            // special handling for IP_TOS: always return 0 when IPv6
            if (name == StandardSocketOptions.IP_TOS) {
                return (Net.isIPv6Available()) ? (T) Integer.valueOf(0) :
                    (T) Net.getSocketOption(fd, StandardProtocolFamily.INET, name);
            }

            // no options that require special handling
            return (T) Net.getSocketOption(fd, Net.UNSPEC, name);
        }
    }

    private static class DefaultOptionsHolder {
        static final Set<SocketOption<?>> defaultOptions = defaultOptions();

        private static Set<SocketOption<?>> defaultOptions() {
            HashSet<SocketOption<?>> set = new HashSet<SocketOption<?>>(8);
            set.add(StandardSocketOptions.SO_SNDBUF);
            set.add(StandardSocketOptions.SO_RCVBUF);
            set.add(StandardSocketOptions.SO_KEEPALIVE);
            set.add(StandardSocketOptions.SO_REUSEADDR);
            set.add(StandardSocketOptions.SO_LINGER);
            set.add(StandardSocketOptions.TCP_NODELAY);
            // additional options required by socket adaptor
            set.add(StandardSocketOptions.IP_TOS);
            set.add(ExtendedSocketOption.SO_OOBINLINE);
            return Collections.unmodifiableSet(set);
        }
    }

    public final Set<SocketOption<?>> supportedOptions() {
        return DefaultOptionsHolder.defaultOptions;
    }

    private boolean ensureReadOpen() throws ClosedChannelException {
        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();
            if (!isConnected())
                throw new NotYetConnectedException();
            if (!isInputOpen)
                return false;
            else
                return true;
        }
    }

    private void ensureWriteOpen() throws ClosedChannelException {
        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();
            if (!isOutputOpen)
                throw new ClosedChannelException();
            if (!isConnected())
                throw new NotYetConnectedException();
        }
    }

    private void readerCleanup() throws IOException {
        synchronized (stateLock) {
            readerThread = 0;
            if (state == ST_KILLPENDING)
                kill();
        }
    }

    private void writerCleanup() throws IOException {
        synchronized (stateLock) {
            writerThread = 0;
            if (state == ST_KILLPENDING)
                kill();
        }
    }

    public int read(ByteBuffer buf) throws IOException {

        if (buf == null)
            throw new NullPointerException();

        synchronized (readLock) {
            if (!ensureReadOpen())
                return -1;
            int n = 0;
            try {

                // Set up the interruption machinery; see
                // AbstractInterruptibleChannel for details
                //
                begin();

                synchronized (stateLock) {
                    if (!isOpen()) {
                    // Either the current thread is already interrupted, so
                    // begin() closed the channel, or another thread closed the
                    // channel since we checked it a few bytecodes ago.  In
                    // either case the value returned here is irrelevant since
                    // the invocation of end() in the finally block will throw
                    // an appropriate exception.
                    //
                        return 0;

                    }

                    // Save this thread so that it can be signalled on those
                    // platforms that require it
                    //
                    readerThread = NativeThread.current();
                }

                // Between the previous test of isOpen() and the return of the
                // IOUtil.read invocation below, this channel might be closed
                // or this thread might be interrupted.  We rely upon the
                // implicit synchronization point in the kernel read() call to
                // make sure that the right thing happens.  In either case the
                // implCloseSelectableChannel method is ultimately invoked in
                // some other thread, so there are three possibilities:
                //
                //   - implCloseSelectableChannel() invokes nd.preClose()
                //     before this thread invokes read(), in which case the
                //     read returns immediately with either EOF or an error,
                //     the latter of which will cause an IOException to be
                //     thrown.
                //
                //   - implCloseSelectableChannel() invokes nd.preClose() after
                //     this thread is blocked in read().  On some operating
                //     systems (e.g., Solaris and Windows) this causes the read
                //     to return immediately with either EOF or an error
                //     indication.
                //
                //   - implCloseSelectableChannel() invokes nd.preClose() after
                //     this thread is blocked in read() but the operating
                //     system (e.g., Linux) doesn't support preemptive close,
                //     so implCloseSelectableChannel() proceeds to signal this
                //     thread, thereby causing the read to return immediately
                //     with IOStatus.INTERRUPTED.
                //
                // In all three cases the invocation of end() in the finally
                // clause will notice that the channel has been closed and
                // throw an appropriate exception (AsynchronousCloseException
                // or ClosedByInterruptException) if necessary.
                //
                // *There is A fourth possibility. implCloseSelectableChannel()
                // invokes nd.preClose(), signals reader/writer thred and quickly
                // moves on to nd.close() in kill(), which does a real close.
                // Then a third thread accepts a new connection, opens file or
                // whatever that causes the released "fd" to be recycled. All
                // above happens just between our last isOpen() check and the
                // next kernel read reached, with the recycled "fd". The solution
                // is to postpone the real kill() if there is a reader or/and
                // writer thread(s) over there "waiting", leave the cleanup/kill
                // to the reader or writer thread. (the preClose() still happens
                // so the connection gets cut off as usual).
                //
                // For socket channels there is the additional wrinkle that
                // asynchronous shutdown works much like asynchronous close,
                // except that the channel is shutdown rather than completely
                // closed.  This is analogous to the first two cases above,
                // except that the shutdown operation plays the role of
                // nd.preClose().
                for (;;) {
                    n = Net.read(fd, buf);
                    if ((n == IOStatus.INTERRUPTED) && isOpen()) {
                        // The system call was interrupted but the channel
                        // is still open, so retry
                        continue;
                    }
                    return IOStatus.normalize(n);
                }

            } finally {
                readerCleanup();        // Clear reader thread
                // The end method, which is defined in our superclass
                // AbstractInterruptibleChannel, resets the interruption
                // machinery.  If its argument is true then it returns
                // normally; otherwise it checks the interrupt and open state
                // of this channel and throws an appropriate exception if
                // necessary.
                //
                // So, if we actually managed to do any I/O in the above try
                // block then we pass true to the end method.  We also pass
                // true if the channel was in non-blocking mode when the I/O
                // operation was initiated but no data could be transferred;
                // this prevents spurious exceptions from being thrown in the
                // rare event that a channel is closed or a thread is
                // interrupted at the exact moment that a non-blocking I/O
                // request is made.
                //
                end(n > 0 || (n == IOStatus.UNAVAILABLE));

                // Extra case for socket channels: Asynchronous shutdown
                //
                synchronized (stateLock) {
                    if ((n <= 0) && (!isInputOpen))
                        return IOStatus.EOF;
                }

                assert IOStatus.check(n);

            }
        }
    }

    private long read0(ByteBuffer[] bufs) throws IOException {
        if (bufs == null)
            throw new NullPointerException();
        synchronized (readLock) {
            if (!ensureReadOpen())
                return -1;
            long n = 0;
            try {
                begin();
                synchronized (stateLock) {
                    if (!isOpen())
                        return 0;
                    readerThread = NativeThread.current();
                }

                for (;;) {
                    n = Net.read(fd, bufs);
                    if ((n == IOStatus.INTERRUPTED) && isOpen())
                        continue;
                    return IOStatus.normalize(n);
                }
            } finally {
                readerCleanup();
                end(n > 0 || (n == IOStatus.UNAVAILABLE));
                synchronized (stateLock) {
                    if ((n <= 0) && (!isInputOpen))
                        return IOStatus.EOF;
                }
                assert IOStatus.check(n);
            }
        }
    }

    public long read(ByteBuffer[] dsts, int offset, int length)
        throws IOException
    {
        if ((offset < 0) || (length < 0) || (offset > dsts.length - length))
            throw new IndexOutOfBoundsException();
        // ## Fix IOUtil.write so that we can avoid this array copy
        return read0(Util.subsequence(dsts, offset, length));
    }

    public int write(ByteBuffer buf) throws IOException {
        if (buf == null)
            throw new NullPointerException();
        synchronized (writeLock) {
            ensureWriteOpen();
            int n = 0;
            try {
                begin();
                synchronized (stateLock) {
                    if (!isOpen())
                        return 0;
                    writerThread = NativeThread.current();
                }
                for (;;) {
                    n = Net.write(fd, buf);
                    if ((n == IOStatus.INTERRUPTED) && isOpen())
                        continue;
                    return IOStatus.normalize(n);
                }
            } finally {
                writerCleanup();
                end(n > 0 || (n == IOStatus.UNAVAILABLE));
                synchronized (stateLock) {
                    if ((n <= 0) && (!isOutputOpen))
                        throw new AsynchronousCloseException();
                }
                assert IOStatus.check(n);
            }
        }
    }

    public long write0(ByteBuffer[] bufs) throws IOException {
        if (bufs == null)
            throw new NullPointerException();
        synchronized (writeLock) {
            ensureWriteOpen();
            long n = 0;
            try {
                begin();
                synchronized (stateLock) {
                    if (!isOpen())
                        return 0;
                    writerThread = NativeThread.current();
                }
                for (;;) {
                    n = Net.write(fd, bufs);
                    if ((n == IOStatus.INTERRUPTED) && isOpen())
                        continue;
                    return IOStatus.normalize(n);
                }
            } finally {
                writerCleanup();
                end((n > 0) || (n == IOStatus.UNAVAILABLE));
                synchronized (stateLock) {
                    if ((n <= 0) && (!isOutputOpen))
                        throw new AsynchronousCloseException();
                }
                assert IOStatus.check(n);
            }
        }
    }

    public long write(ByteBuffer[] srcs, int offset, int length)
        throws IOException
    {
        if ((offset < 0) || (length < 0) || (offset > srcs.length - length))
            throw new IndexOutOfBoundsException();
        // ## Fix IOUtil.write so that we can avoid this array copy
        return write0(Util.subsequence(srcs, offset, length));
    }

    protected void implConfigureBlocking(boolean block) throws IOException {
        IOUtil.configureBlocking(fd, block);
    }

    public SocketOpts options() {
        synchronized (stateLock) {
            if (options == null) {
                SocketOptsImpl.Dispatcher d
                    = new SocketOptsImpl.Dispatcher() {
                            int getInt(int opt) throws IOException {
                                return Net.getIntOption(fd, opt);
                            }
                            void setInt(int opt, int arg)
                                throws IOException
                            {
                                Net.setIntOption(fd, opt, arg);
                            }
                        };
                options = new SocketOptsImpl.IP.TCP(d);
            }
            return options;
        }
    }

    // package-private
    int sendOutOfBandData(byte b) throws IOException {
        synchronized (writeLock) {
            ensureWriteOpen();
            int n = 0;
            try {
                begin();
                synchronized (stateLock) {
                    if (!isOpen())
                        return 0;
                    writerThread = NativeThread.current();
                }
                for (;;) {
                    n = sendOutOfBandData(fd, b);
                    if ((n == IOStatus.INTERRUPTED) && isOpen())
                        continue;
                    return IOStatus.normalize(n);
                }
            } finally {
                writerCleanup();
                end((n > 0) || (n == IOStatus.UNAVAILABLE));
                synchronized (stateLock) {
                    if ((n <= 0) && (!isOutputOpen))
                        throw new AsynchronousCloseException();
                }
                assert IOStatus.check(n);
            }
        }
    }

    public boolean isBound() {
        synchronized (stateLock) {
            if (state == ST_CONNECTED)
                return true;
            return localAddress != null;
        }
    }

    public SocketAddress localAddress() {
        synchronized (stateLock) {
            if (state == ST_CONNECTED &&
                (localAddress == null ||
                 ((InetSocketAddress)localAddress).getAddress().isAnyLocalAddress())) {
                    // Socket was not bound before connecting or
                    // Socket was bound with an "anyLocalAddress"
                    localAddress = Net.localAddress(fd);
            }
            return localAddress;
        }
    }

    public SocketAddress remoteAddress() {
        synchronized (stateLock) {
            return remoteAddress;
        }
    }

    public SocketChannel bind(SocketAddress local) throws IOException {
        synchronized (readLock) {
            synchronized (writeLock) {
                synchronized (stateLock) {
                    ensureOpenAndUnconnected();
                    if (localAddress != null)
                        throw new AlreadyBoundException();
                    InetSocketAddress isa = Net.checkAddress(local);
                    Net.bind(fd, isa.getAddress(), isa.getPort());
                    localAddress = Net.localAddress(fd);
                }
            }
        }
        return this;
    }

    public boolean isConnected() {
        synchronized (stateLock) {
            return (state == ST_CONNECTED);
        }
    }

    public boolean isConnectionPending() {
        synchronized (stateLock) {
            return (state == ST_PENDING);
        }
    }

    void ensureOpenAndUnconnected() throws IOException { // package-private
        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();
            if (state == ST_CONNECTED)
                throw new AlreadyConnectedException();
            if (state == ST_PENDING)
                throw new ConnectionPendingException();
        }
    }

    public boolean connect(SocketAddress sa) throws IOException {
        int trafficClass = 0;           // ## Pick up from options
        int localPort = 0;

        synchronized (readLock) {
            synchronized (writeLock) {
                ensureOpenAndUnconnected();
                InetSocketAddress isa = Net.checkAddress(sa);
                SecurityManager sm = System.getSecurityManager();
                if (sm != null)
                    sm.checkConnect(isa.getAddress().getHostAddress(),
                                    isa.getPort());
                synchronized (blockingLock()) {
                    int n = 0;
                    try {
                        try {
                            begin();
                            synchronized (stateLock) {
                                if (!isOpen()) {
                                    return false;
                                }
                                readerThread = NativeThread.current();
                            }
                            for (;;) {
                                InetAddress ia = isa.getAddress();
                                if (ia.isAnyLocalAddress())
                                    ia = InetAddress.getLocalHost();
                                n = connectImpl(ia,
                                                isa.getPort(),
                                                trafficClass);
                                if (  (n == IOStatus.INTERRUPTED)
                                      && isOpen())
                                    continue;
                                break;
                            }
                        } finally {
                            readerCleanup();
                            end((n > 0) || (n == IOStatus.UNAVAILABLE));
                            assert IOStatus.check(n);
                        }
                    } catch (IOException x) {
                        // If an exception was thrown, close the channel after
                        // invoking end() so as to avoid bogus
                        // AsynchronousCloseExceptions
                        close();
                        throw x;
                    }
                    synchronized (stateLock) {
                        remoteAddress = isa;
                        if (n > 0) {

                            // Connection succeeded; disallow further
                            // invocation
                            state = ST_CONNECTED;
                            return true;
                        }
                        // If nonblocking and no exception then connection
                        // pending; disallow another invocation
                        if (!isBlocking())
                            state = ST_PENDING;
                        else
                            assert false;
                    }
                }
                return false;
            }
        }
    }

    public boolean finishConnect() throws IOException {
        synchronized (readLock) {
            synchronized (writeLock) {
                synchronized (stateLock) {
                    if (!isOpen())
                        throw new ClosedChannelException();
                    if (state == ST_CONNECTED)
                        return true;
                    if (state != ST_PENDING)
                        throw new NoConnectionPendingException();
                }
                int n = 0;
                try {
                    try {
                        begin();
                        synchronized (blockingLock()) {
                            synchronized (stateLock) {
                                if (!isOpen()) {
                                    return false;
                                }
                                readerThread = NativeThread.current();
                            }
                            if (!isBlocking()) {
                                for (;;) {
                                    n = checkConnect(fd, false,
                                                     readyToConnect);
                                    if (  (n == IOStatus.INTERRUPTED)
                                          && isOpen())
                                        continue;
                                    break;
                                }
                            } else {
                                for (;;) {
                                    n = checkConnect(fd, true,
                                                     readyToConnect);
                                    if (n == 0) {
                                        // Loop in case of
                                        // spurious notifications
                                        continue;
                                    }
                                    if (  (n == IOStatus.INTERRUPTED)
                                          && isOpen())
                                        continue;
                                    break;
                                }
                            }
                        }
                    } finally {
                        synchronized (stateLock) {
                            readerThread = 0;
                            if (state == ST_KILLPENDING) {
                                kill();
                                // poll()/getsockopt() does not report
                                // error (throws exception, with n = 0)
                                // on Linux platform after dup2 and
                                // signal-wakeup. Force n to 0 so the
                                // end() can throw appropriate exception
                                n = 0;
                            }
                        }
                        end((n > 0) || (n == IOStatus.UNAVAILABLE));
                        assert IOStatus.check(n);
                    }
                } catch (IOException x) {
                    // If an exception was thrown, close the channel after
                    // invoking end() so as to avoid bogus
                    // AsynchronousCloseExceptions
                    close();
                    throw x;
                }
                if (n > 0) {
                    synchronized (stateLock) {
                        state = ST_CONNECTED;
                    }
                    return true;
                }
                return false;
            }
        }
    }

    public final static int SHUT_RD = 0;
    public final static int SHUT_WR = 1;
    public final static int SHUT_RDWR = 2;

    public SocketChannel shutdownInput() throws IOException {
        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();
            isInputOpen = false;
            shutdown(fd, SHUT_RD);
            if (readerThread != 0)
                NativeThread.signal(readerThread);
            return this;
        }
    }

    public SocketChannel shutdownOutput() throws IOException {
        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();
            isOutputOpen = false;
            shutdown(fd, SHUT_WR);
            if (writerThread != 0)
                NativeThread.signal(writerThread);
            return this;
        }
    }

    public boolean isInputOpen() {
        synchronized (stateLock) {
            return isInputOpen;
        }
    }

    public boolean isOutputOpen() {
        synchronized (stateLock) {
            return isOutputOpen;
        }
    }

    // AbstractInterruptibleChannel synchronizes invocations of this method
    // using AbstractInterruptibleChannel.closeLock, and also ensures that this
    // method is only ever invoked once.  Before we get to this method, isOpen
    // (which is volatile) will have been set to false.
    //
    protected void implCloseSelectableChannel() throws IOException {
        synchronized (stateLock) {
            isInputOpen = false;
            isOutputOpen = false;

            closeImpl();

            // Signal native threads, if needed.  If a target thread is not
            // currently blocked in an I/O operation then no harm is done since
            // the signal handler doesn't actually do anything.
            //
            if (readerThread != 0)
                NativeThread.signal(readerThread);

            if (writerThread != 0)
                NativeThread.signal(writerThread);

            // If this channel is not registered then it's safe to close the fd
            // immediately since we know at this point that no thread is
            // blocked in an I/O operation upon the channel and, since the
            // channel is marked closed, no thread will start another such
            // operation.  If this channel is registered then we don't close
            // the fd since it might be in use by a selector.  In that case
            // closing this channel caused its keys to be cancelled, so the
            // last selector to deregister a key for this channel will invoke
            // kill() to close the fd.
            //
            if (!isRegistered())
                kill();
        }
    }

    public void kill() throws IOException {
        synchronized (stateLock) {
            if (state == ST_KILLED)
                return;
            if (state == ST_UNINITIALIZED) {
                state = ST_KILLED;
                return;
            }
            assert !isOpen() && !isRegistered();

            // Postpone the kill if there is a waiting reader
            // or writer thread. See the comments in read() for
            // more detailed explanation.
            if (readerThread == 0 && writerThread == 0) {
                closeImpl();
                state = ST_KILLED;
            } else {
                state = ST_KILLPENDING;
            }
        }
    }

    /**
     * Translates native poll revent ops into a ready operation ops
     */
    public boolean translateReadyOps(int ops, int initialOps,
                                     SelectionKeyImpl sk) {
        int intOps = sk.nioInterestOps(); // Do this just once, it synchronizes
        int oldOps = sk.nioReadyOps();
        int newOps = initialOps;

        if ((ops & PollArrayWrapper.POLLNVAL) != 0) {
            // This should only happen if this channel is pre-closed while a
            // selection operation is in progress
            // ## Throw an error if this channel has not been pre-closed
            return false;
        }

        if ((ops & (PollArrayWrapper.POLLERR
                    | PollArrayWrapper.POLLHUP)) != 0) {
            newOps = intOps;
            sk.nioReadyOps(newOps);
            // No need to poll again in checkConnect,
            // the error will be detected there
            readyToConnect = true;
            return (newOps & ~oldOps) != 0;
        }

        if (((ops & PollArrayWrapper.POLLIN) != 0) &&
            ((intOps & SelectionKey.OP_READ) != 0) &&
            (state == ST_CONNECTED))
            newOps |= SelectionKey.OP_READ;

        if (((ops & PollArrayWrapper.POLLCONN) != 0) &&
            ((intOps & SelectionKey.OP_CONNECT) != 0) &&
            ((state == ST_UNCONNECTED) || (state == ST_PENDING))) {
            newOps |= SelectionKey.OP_CONNECT;
            readyToConnect = true;
        }

        if (((ops & PollArrayWrapper.POLLOUT) != 0) &&
            ((intOps & SelectionKey.OP_WRITE) != 0) &&
            (state == ST_CONNECTED))
            newOps |= SelectionKey.OP_WRITE;

        sk.nioReadyOps(newOps);
        return (newOps & ~oldOps) != 0;
    }

    public boolean translateAndUpdateReadyOps(int ops, SelectionKeyImpl sk) {
        return translateReadyOps(ops, sk.nioReadyOps(), sk);
    }

    public boolean translateAndSetReadyOps(int ops, SelectionKeyImpl sk) {
        return translateReadyOps(ops, 0, sk);
    }

    /**
     * Translates an interest operation set into a native poll event set
     */
    public void translateAndSetInterestOps(int ops, SelectionKeyImpl sk) {
        int newOps = 0;
        if ((ops & SelectionKey.OP_READ) != 0)
            newOps |= PollArrayWrapper.POLLIN;
        if ((ops & SelectionKey.OP_WRITE) != 0)
            newOps |= PollArrayWrapper.POLLOUT;
        if ((ops & SelectionKey.OP_CONNECT) != 0)
            newOps |= PollArrayWrapper.POLLCONN;
        sk.selector.putEventOps(sk, newOps);
    }

    public FileDescriptor getFD() {
        return fd;
    }

    public int getFDVal() {
        throw new Error();
    }

    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append(this.getClass().getSuperclass().getName());
        sb.append('[');
        if (!isOpen())
            sb.append("closed");
        else {
            synchronized (stateLock) {
                switch (state) {
                case ST_UNCONNECTED:
                    sb.append("unconnected");
                    break;
                case ST_PENDING:
                    sb.append("connection-pending");
                    break;
                case ST_CONNECTED:
                    sb.append("connected");
                    if (!isInputOpen)
                        sb.append(" ishut");
                    if (!isOutputOpen)
                        sb.append(" oshut");
                    break;
                }
                if (localAddress() != null) {
                    sb.append(" local=");
                    sb.append(localAddress().toString());
                }
                if (remoteAddress() != null) {
                    sb.append(" remote=");
                    sb.append(remoteAddress().toString());
                }
            }
        }
        sb.append(']');
        return sb.toString();
    }


    // -- Native methods --

    private int connectImpl(InetAddress remote, int remotePort, int trafficClass) throws IOException
    {
        try
        {
            if (false) throw new cli.System.Net.Sockets.SocketException();
            if (false) throw new cli.System.ObjectDisposedException("");
            cli.System.Net.IPEndPoint ep = new cli.System.Net.IPEndPoint(SocketUtil.getAddressFromInetAddress(remote), remotePort);
            if (isBlocking())
            {
                fd.getSocket().Connect(ep);
                return 1;
            }
            else
            {
                asyncConnect = fd.getSocket().BeginConnect(ep, null, null);
                return IOStatus.UNAVAILABLE;
            }
        }
        catch (cli.System.Net.Sockets.SocketException x)
        {
            throw new ConnectException(x.getMessage());
        }
        catch (cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    private int checkConnect(FileDescriptor fd, boolean block, boolean ready) throws IOException
    {
        try
        {
            if (false) throw new cli.System.Net.Sockets.SocketException();
            if (false) throw new cli.System.ObjectDisposedException("");
            if (block || ready || asyncConnect.get_IsCompleted())
            {
                cli.System.IAsyncResult res = asyncConnect;
                asyncConnect = null;
                fd.getSocket().EndConnect(res);
                // work around for blocking issue
                fd.getSocket().set_Blocking(isBlocking());
                return 1;
            }
            else
            {
                return IOStatus.UNAVAILABLE;
            }
        }
        catch (cli.System.Net.Sockets.SocketException x)
        {
            throw new ConnectException(x.getMessage());
        }
        catch (cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    private static /*native*/ int sendOutOfBandData(FileDescriptor fd, byte data) throws IOException
    {
    	throw new NotYetImplementedError(); //TODO JDK7
    }
    
    private static void shutdown(FileDescriptor fd, int how) throws IOException
    {
        try
        {
            if (false) throw new cli.System.Net.Sockets.SocketException();
            if (false) throw new cli.System.ObjectDisposedException("");
            fd.getSocket().Shutdown(cli.System.Net.Sockets.SocketShutdown.wrap(how == SHUT_RD ? cli.System.Net.Sockets.SocketShutdown.Receive : cli.System.Net.Sockets.SocketShutdown.Send));
        }
        catch (cli.System.Net.Sockets.SocketException x)
        {
            throw SocketUtil.convertSocketExceptionToIOException(x);
        }
        catch (cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    private void closeImpl() throws IOException
    {
        try
        {
            if (false) throw new cli.System.Net.Sockets.SocketException();
            if (false) throw new cli.System.ObjectDisposedException("");
            fd.getSocket().Close();
        }
        catch (cli.System.Net.Sockets.SocketException x)
        {
            throw SocketUtil.convertSocketExceptionToIOException(x);
        }
        catch (cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

}

// temporary compilation stubs
class PollArrayWrapper
{
    static final short POLLIN = 0x0001;
    static final short POLLOUT = 0x0004;
    static final short POLLERR = 0x0008;
    static final short POLLHUP = 0x0010;
    static final short POLLNVAL = 0x0020;
    static final short POLLREMOVE = 0x0800;
    static final short POLLCONN = 0x0002;
}
@


1.11
log
@Add methods in SocketChannelImpl for Java 7
@
text
@@


1.10
log
@Add sendOutOfBandData to sun.nio.ch.SocketChannelImpl with a NotYetImplementedError to compile the Java 7 sources.
@
text
@d36 3
d124 87
@


1.9
log
@Integrated OpenJDK 6 b21.
@
text
@d28 2
d426 30
d483 1
a483 1
    public void bind(SocketAddress local) throws IOException {
d496 1
d676 1
a676 1
    public void shutdownInput() throws IOException {
d684 1
d688 1
a688 1
    public void shutdownOutput() throws IOException {
d696 1
d946 5
@


1.8
log
@Moved shared socket functionality from PlainSocketImpl.java to SocketUtil.java.
@
text
@d2 1
a2 1
 * Copyright 2000-2006 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.7
log
@Merged OpenJDK 6 b10 whitespace and comment changes.
@
text
@d859 1
a859 1
            cli.System.Net.IPEndPoint ep = new cli.System.Net.IPEndPoint(PlainSocketImpl.getAddressFromInetAddress(remote), remotePort);
d921 1
a921 1
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
d939 1
a939 1
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
@


1.6
log
@Converted tabs to spaces.
@
text
@d228 1
a228 1
                // moves on to nd.close() in kill(), which does a real close. 
d437 2
a438 2
                // Socket was not bound before connecting or
                // Socket was bound with an "anyLocalAddress"
d758 1
a758 1
            readyToConnect = true; 
d769 1
a769 1
            ((state == ST_UNCONNECTED) || (state == ST_PENDING))) { 
@


1.5
log
@Restructured to reduce the number of differences with OpenJDK sources.
@
text
@d94 3
a96 3
	super(sp);
	this.fd = Net.socket(true);
	this.state = ST_UNCONNECTED;
d102 2
a103 2
		      FileDescriptor fd, InetSocketAddress remote)
	throws IOException
d105 4
a108 4
	super(sp);
	this.fd = fd;
	this.state = ST_CONNECTED;
	this.remoteAddress = remote;
d112 5
a116 5
	synchronized (stateLock) {
	    if (socket == null)
		socket = SocketAdaptor.create(this);
	    return socket;
	}
d120 10
a129 10
	synchronized (stateLock) {
	    if (!isOpen())
		throw new ClosedChannelException();
	    if (!isConnected())
		throw new NotYetConnectedException();
	    if (!isInputOpen)
		return false;
	    else
		return true;
	}
d133 8
a140 8
	synchronized (stateLock) {
	    if (!isOpen())
		throw new ClosedChannelException();
	    if (!isOutputOpen)
		throw new ClosedChannelException();
	    if (!isConnected())
		throw new NotYetConnectedException();
	}
d144 1
a144 1
	synchronized (stateLock) {
d146 1
a146 1
	    if (state == ST_KILLPENDING)
d148 1
a148 1
	}
d152 1
a152 1
	synchronized (stateLock) {
d154 1
a154 1
	    if (state == ST_KILLPENDING)
d156 1
a156 1
	}
d161 2
a162 2
	if (buf == null)
	    throw new NullPointerException();
d164 1
a164 1
	synchronized (readLock) {
d167 2
a168 2
	    int n = 0;
	    try {
d170 4
a173 4
		// Set up the interruption machinery; see
		// AbstractInterruptibleChannel for details
		//
		begin();
d175 1
a175 1
		synchronized (stateLock) {
d177 49
a225 49
		    // Either the current thread is already interrupted, so
		    // begin() closed the channel, or another thread closed the
		    // channel since we checked it a few bytecodes ago.  In
		    // either case the value returned here is irrelevant since
		    // the invocation of end() in the finally block will throw
		    // an appropriate exception.
		    //
		        return 0;

		    }

		    // Save this thread so that it can be signalled on those
		    // platforms that require it
		    //
		    readerThread = NativeThread.current();
		}

		// Between the previous test of isOpen() and the return of the
		// IOUtil.read invocation below, this channel might be closed
		// or this thread might be interrupted.  We rely upon the
		// implicit synchronization point in the kernel read() call to
		// make sure that the right thing happens.  In either case the
		// implCloseSelectableChannel method is ultimately invoked in
		// some other thread, so there are three possibilities:
		//
		//   - implCloseSelectableChannel() invokes nd.preClose()
		//     before this thread invokes read(), in which case the
		//     read returns immediately with either EOF or an error,
		//     the latter of which will cause an IOException to be
		//     thrown.
		//
		//   - implCloseSelectableChannel() invokes nd.preClose() after
		//     this thread is blocked in read().  On some operating
		//     systems (e.g., Solaris and Windows) this causes the read
		//     to return immediately with either EOF or an error
		//     indication.
		//
		//   - implCloseSelectableChannel() invokes nd.preClose() after
		//     this thread is blocked in read() but the operating
		//     system (e.g., Linux) doesn't support preemptive close,
		//     so implCloseSelectableChannel() proceeds to signal this
		//     thread, thereby causing the read to return immediately
		//     with IOStatus.INTERRUPTED.
		//
		// In all three cases the invocation of end() in the finally
		// clause will notice that the channel has been closed and
		// throw an appropriate exception (AsynchronousCloseException
		// or ClosedByInterruptException) if necessary.
		//
d237 43
a279 43
		//
		// For socket channels there is the additional wrinkle that
		// asynchronous shutdown works much like asynchronous close,
		// except that the channel is shutdown rather than completely
		// closed.  This is analogous to the first two cases above,
		// except that the shutdown operation plays the role of
		// nd.preClose().
		for (;;) {
		    n = Net.read(fd, buf);
		    if ((n == IOStatus.INTERRUPTED) && isOpen()) {
			// The system call was interrupted but the channel
			// is still open, so retry
			continue;
		    }
		    return IOStatus.normalize(n);
		}

	    } finally {
                readerCleanup();	// Clear reader thread
		// The end method, which is defined in our superclass
		// AbstractInterruptibleChannel, resets the interruption
		// machinery.  If its argument is true then it returns
		// normally; otherwise it checks the interrupt and open state
		// of this channel and throws an appropriate exception if
		// necessary.
		//
		// So, if we actually managed to do any I/O in the above try
		// block then we pass true to the end method.  We also pass
		// true if the channel was in non-blocking mode when the I/O
		// operation was initiated but no data could be transferred;
		// this prevents spurious exceptions from being thrown in the
		// rare event that a channel is closed or a thread is
		// interrupted at the exact moment that a non-blocking I/O
		// request is made.
		//
		end(n > 0 || (n == IOStatus.UNAVAILABLE));

		// Extra case for socket channels: Asynchronous shutdown
		//
		synchronized (stateLock) {
		    if ((n <= 0) && (!isInputOpen))
			return IOStatus.EOF;
		}
d281 1
a281 1
		assert IOStatus.check(n);
d283 2
a284 2
	    }
	}
d290 1
a290 1
	synchronized (readLock) {
d293 16
a308 16
	    long n = 0;
	    try {
		begin();
		synchronized (stateLock) {
		    if (!isOpen())
		        return 0;
		    readerThread = NativeThread.current();
                }

		for (;;) {
		    n = Net.read(fd, bufs);
		    if ((n == IOStatus.INTERRUPTED) && isOpen())
			continue;
		    return IOStatus.normalize(n);
		}
	    } finally {
d310 8
a317 8
		end(n > 0 || (n == IOStatus.UNAVAILABLE));
		synchronized (stateLock) {
		    if ((n <= 0) && (!isInputOpen))
			return IOStatus.EOF;
		}
		assert IOStatus.check(n);
	    }
	}
d321 1
a321 1
	throws IOException
d325 2
a326 2
	// ## Fix IOUtil.write so that we can avoid this array copy
	return read0(Util.subsequence(dsts, offset, length));
d332 1
a332 1
	synchronized (writeLock) {
d334 24
a357 24
	    int n = 0;
	    try {
		begin();
		synchronized (stateLock) {
		    if (!isOpen())
		        return 0;
		    writerThread = NativeThread.current();
		}
		for (;;) {
		    n = Net.write(fd, buf);
		    if ((n == IOStatus.INTERRUPTED) && isOpen())
			continue;
		    return IOStatus.normalize(n);
		}
	    } finally {
		writerCleanup();
		end(n > 0 || (n == IOStatus.UNAVAILABLE));
		synchronized (stateLock) {
		    if ((n <= 0) && (!isOutputOpen))
			throw new AsynchronousCloseException();
		}
		assert IOStatus.check(n);
	    }
	}
d363 1
a363 1
	synchronized (writeLock) {
d365 24
a388 24
	    long n = 0;
	    try {
		begin();
		synchronized (stateLock) {
		    if (!isOpen())
		        return 0;
		    writerThread = NativeThread.current();
		}
		for (;;) {
		    n = Net.write(fd, bufs);
		    if ((n == IOStatus.INTERRUPTED) && isOpen())
			continue;
		    return IOStatus.normalize(n);
		}
	    } finally {
		writerCleanup();
		end((n > 0) || (n == IOStatus.UNAVAILABLE));
		synchronized (stateLock) {
		    if ((n <= 0) && (!isOutputOpen))
			throw new AsynchronousCloseException();
		}
		assert IOStatus.check(n);
	    }
	}
d392 1
a392 1
	throws IOException
d396 2
a397 2
	// ## Fix IOUtil.write so that we can avoid this array copy
	return write0(Util.subsequence(srcs, offset, length));
d401 1
a401 1
	IOUtil.configureBlocking(fd, block);
d405 17
a421 17
	synchronized (stateLock) {
	    if (options == null) {
		SocketOptsImpl.Dispatcher d
		    = new SocketOptsImpl.Dispatcher() {
			    int getInt(int opt) throws IOException {
				return Net.getIntOption(fd, opt);
			    }
			    void setInt(int opt, int arg)
				throws IOException
			    {
				Net.setIntOption(fd, opt, arg);
			    }
			};
		options = new SocketOptsImpl.IP.TCP(d);
	    }
	    return options;
	}
d425 1
a425 1
	synchronized (stateLock) {
d428 2
a429 2
	    return localAddress != null;
	}
d433 10
a442 10
	synchronized (stateLock) {
	    if (state == ST_CONNECTED &&
		(localAddress == null ||
		 ((InetSocketAddress)localAddress).getAddress().isAnyLocalAddress())) {
		// Socket was not bound before connecting or
		// Socket was bound with an "anyLocalAddress"
		    localAddress = Net.localAddress(fd);
	    }
	    return localAddress;
	}
d446 3
a448 3
	synchronized (stateLock) {
	    return remoteAddress;
	}
d452 12
a463 12
	synchronized (readLock) {
	    synchronized (writeLock) {
		synchronized (stateLock) {
		    ensureOpenAndUnconnected();
		    if (localAddress != null)
			throw new AlreadyBoundException();
		    InetSocketAddress isa = Net.checkAddress(local);
		    Net.bind(fd, isa.getAddress(), isa.getPort());
		    localAddress = Net.localAddress(fd);
		}
	    }
	}
d467 3
a469 3
	synchronized (stateLock) {
	    return (state == ST_CONNECTED);
	}
d473 3
a475 3
	synchronized (stateLock) {
	    return (state == ST_PENDING);
	}
d479 8
a486 8
	synchronized (stateLock) {
	    if (!isOpen())
		throw new ClosedChannelException();
	    if (state == ST_CONNECTED)
		throw new AlreadyConnectedException();
	    if (state == ST_PENDING)
		throw new ConnectionPendingException();
	}
d490 2
a491 2
	int trafficClass = 0;		// ## Pick up from options
	int localPort = 0;
d502 23
a524 23
		    int n = 0;
		    try {
			try {
			    begin();
			    synchronized (stateLock) {
    			        if (!isOpen()) {
			            return false;
				}
				readerThread = NativeThread.current();
			    }
			    for (;;) {
				InetAddress ia = isa.getAddress();
				if (ia.isAnyLocalAddress())
				    ia = InetAddress.getLocalHost();
				n = connectImpl(ia,
						isa.getPort(),
						trafficClass);
				if (  (n == IOStatus.INTERRUPTED)
				      && isOpen())
				    continue;
				break;
			    }
			} finally {
d526 13
a538 13
			    end((n > 0) || (n == IOStatus.UNAVAILABLE));
			    assert IOStatus.check(n);
			}
		    } catch (IOException x) {
			// If an exception was thrown, close the channel after
			// invoking end() so as to avoid bogus
			// AsynchronousCloseExceptions
			close();
			throw x;
		    }
		    synchronized (stateLock) {
			remoteAddress = isa;
			if (n > 0) {
d540 2
a541 2
			    // Connection succeeded; disallow further
			    // invocation
d543 9
a551 9
			    return true;
			}
			// If nonblocking and no exception then connection
			// pending; disallow another invocation
			if (!isBlocking())
			    state = ST_PENDING;
			else
			    assert false;
		    }
d561 48
a608 48
		synchronized (stateLock) {
		    if (!isOpen())
			throw new ClosedChannelException();
		    if (state == ST_CONNECTED)
			return true;
		    if (state != ST_PENDING)
			throw new NoConnectionPendingException();
		}
		int n = 0;
		try {
		    try {
			begin();
			synchronized (blockingLock()) {
			    synchronized (stateLock) {
    			        if (!isOpen()) {
			            return false;
				}
				readerThread = NativeThread.current();
			    }
			    if (!isBlocking()) {
				for (;;) {
				    n = checkConnect(fd, false,
						     readyToConnect);
				    if (  (n == IOStatus.INTERRUPTED)
					  && isOpen())
					continue;
				    break;
				}
			    } else {
				for (;;) {
				    n = checkConnect(fd, true,
						     readyToConnect);
				    if (n == 0) {
					// Loop in case of
					// spurious notifications
					continue;
				    }
				    if (  (n == IOStatus.INTERRUPTED)
					  && isOpen())
					continue;
				    break;
				}
			    }
			}
		    } finally {
	                synchronized (stateLock) {
	                    readerThread = 0;
	                    if (state == ST_KILLPENDING) {
d617 8
a624 8
	                }
			end((n > 0) || (n == IOStatus.UNAVAILABLE));
			assert IOStatus.check(n);
		    }
		} catch (IOException x) {
		    // If an exception was thrown, close the channel after
		    // invoking end() so as to avoid bogus
		    // AsynchronousCloseExceptions
d627 1
a627 1
		}
d629 3
a631 3
		    synchronized (stateLock) {
			state = ST_CONNECTED;
		    }
d644 8
a651 8
	synchronized (stateLock) {
	    if (!isOpen())
		throw new ClosedChannelException();
	    isInputOpen = false;
	    shutdown(fd, SHUT_RD);
	    if (readerThread != 0)
		NativeThread.signal(readerThread);
	}
d655 8
a662 8
	synchronized (stateLock) {
	    if (!isOpen())
		throw new ClosedChannelException();
	    isOutputOpen = false;
	    shutdown(fd, SHUT_WR);
	    if (writerThread != 0)
		NativeThread.signal(writerThread);
	}
d666 3
a668 3
	synchronized (stateLock) {
	    return isInputOpen;
	}
d672 3
a674 3
	synchronized (stateLock) {
	    return isOutputOpen;
	}
d683 29
a711 29
	synchronized (stateLock) {
	    isInputOpen = false;
	    isOutputOpen = false;

	    closeImpl();

	    // Signal native threads, if needed.  If a target thread is not
	    // currently blocked in an I/O operation then no harm is done since
	    // the signal handler doesn't actually do anything.
	    //
	    if (readerThread != 0)
		NativeThread.signal(readerThread);

	    if (writerThread != 0)
		NativeThread.signal(writerThread);

	    // If this channel is not registered then it's safe to close the fd
	    // immediately since we know at this point that no thread is
	    // blocked in an I/O operation upon the channel and, since the
	    // channel is marked closed, no thread will start another such
	    // operation.  If this channel is registered then we don't close
	    // the fd since it might be in use by a selector.  In that case
	    // closing this channel caused its keys to be cancelled, so the
	    // last selector to deregister a key for this channel will invoke
	    // kill() to close the fd.
	    //
	    if (!isRegistered())
		kill();
	}
d715 4
a718 4
	synchronized (stateLock) {
	    if (state == ST_KILLED)
		return;
	    if (state == ST_UNINITIALIZED) {
d720 1
a720 1
		return;
d722 1
a722 1
	    assert !isOpen() && !isRegistered();
d727 1
a727 1
	    if (readerThread == 0 && writerThread == 0) {
d729 1
a729 1
	        state = ST_KILLED;
d731 1
a731 1
	        state = ST_KILLPENDING;
d733 1
a733 1
	}
d746 5
a750 5
	    // This should only happen if this channel is pre-closed while a
	    // selection operation is in progress
	    // ## Throw an error if this channel has not been pre-closed
	    return false;
	}
d806 1
a806 1
	return fd;
d810 1
a810 1
	throw new Error();
d814 34
a847 34
	StringBuffer sb = new StringBuffer();
	sb.append(this.getClass().getSuperclass().getName());
	sb.append('[');
	if (!isOpen())
	    sb.append("closed");
	else {
	    synchronized (stateLock) {
		switch (state) {
		case ST_UNCONNECTED:
		    sb.append("unconnected");
		    break;
		case ST_PENDING:
		    sb.append("connection-pending");
		    break;
		case ST_CONNECTED:
		    sb.append("connected");
		    if (!isInputOpen)
			sb.append(" ishut");
		    if (!isOutputOpen)
			sb.append(" oshut");
		    break;
		}
		if (localAddress() != null) {
		    sb.append(" local=");
		    sb.append(localAddress().toString());
		}
		if (remoteAddress() != null) {
		    sb.append(" remote=");
		    sb.append(remoteAddress().toString());
		}
	    }
	}
	sb.append(']');
	return sb.toString();
d855 24
a878 24
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    cli.System.Net.IPEndPoint ep = new cli.System.Net.IPEndPoint(PlainSocketImpl.getAddressFromInetAddress(remote), remotePort);
	    if (isBlocking())
	    {
		fd.getSocket().Connect(ep);
		return 1;
	    }
	    else
	    {
		asyncConnect = fd.getSocket().BeginConnect(ep, null, null);
		return IOStatus.UNAVAILABLE;
	    }
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw new ConnectException(x.getMessage());
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
d883 26
a908 26
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    if (block || ready || asyncConnect.get_IsCompleted())
	    {
		cli.System.IAsyncResult res = asyncConnect;
		asyncConnect = null;
		fd.getSocket().EndConnect(res);
		// work around for blocking issue
		fd.getSocket().set_Blocking(isBlocking());
		return 1;
	    }
	    else
	    {
		return IOStatus.UNAVAILABLE;
	    }
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw new ConnectException(x.getMessage());
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
d913 14
a926 14
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    fd.getSocket().Shutdown(cli.System.Net.Sockets.SocketShutdown.wrap(how == SHUT_RD ? cli.System.Net.Sockets.SocketShutdown.Receive : cli.System.Net.Sockets.SocketShutdown.Send));
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
d931 14
a944 14
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    fd.getSocket().Close();
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
@


1.4
log
@- Implemented DatagramChannelImpl and PipeImpl.
- More nio fixes.
@
text
@a27 12
import cli.System.Net.IPAddress;
import cli.System.Net.IPEndPoint;
import cli.System.Net.Sockets.LingerOption;
import cli.System.Net.Sockets.SelectMode;
import cli.System.Net.Sockets.SocketOptionName;
import cli.System.Net.Sockets.SocketOptionLevel;
import cli.System.Net.Sockets.SocketFlags;
import cli.System.Net.Sockets.SocketType;
import cli.System.Net.Sockets.ProtocolType;
import cli.System.Net.Sockets.AddressFamily;
import cli.System.Net.Sockets.SocketShutdown;
import ikvm.lang.CIL;
d44 2
a45 1
    private final cli.System.Net.Sockets.Socket netSocket;
d95 1
a96 9
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    netSocket = new cli.System.Net.Sockets.Socket(AddressFamily.wrap(AddressFamily.InterNetwork), SocketType.wrap(SocketType.Stream), ProtocolType.wrap(ProtocolType.Tcp));
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
d102 1
a102 1
		      cli.System.Net.Sockets.Socket socket, InetSocketAddress remote)
d106 1
a106 1
	this.netSocket = socket;
d245 1
a245 1
		    n = readImpl(buf);
d303 1
a303 1
		    n = readImpl(bufs);
d343 1
a343 1
		    n = writeImpl(buf);
d374 1
a374 1
		    n = writeImpl(bufs);
d401 1
a401 19
	if (isConnectionPending() && !isBlocking()) {
	    // Work around for winsock issue. You can't set a socket to blocking at this point, so we'll have
	    // to handle the blocking explicitly in checkConnect.
	    return;
	}
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    netSocket.set_Blocking(block);
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException _)
	{
	    throw new SocketException("Socket is closed");
	}
d410 1
a410 1
				return getSocketOptionImpl(mapSocketOptionLevel(opt), mapSocketOptionName(opt));
d415 1
a415 1
				setSocketOptionImpl(mapSocketOptionLevel(opt), mapSocketOptionName(opt), arg);
d439 1
a439 13
		try
		{
		    if (false) throw new cli.System.Net.Sockets.SocketException();
		    if (false) throw new cli.System.ObjectDisposedException("");
		    IPEndPoint ep = (IPEndPoint)netSocket.get_LocalEndPoint();
		    localAddress = new InetSocketAddress(PlainSocketImpl.getInetAddressFromIPEndPoint(ep), ep.get_Port());
		}
		catch (cli.System.Net.Sockets.SocketException x)
		{
		}
		catch (cli.System.ObjectDisposedException _)
		{
		}
d459 2
a460 1
		    localAddress = bindImpl(isa.getAddress(), isa.getPort());
d582 1
a582 1
				    n = checkConnect(false,
d591 1
a591 1
				    n = checkConnect(true,
d648 1
a648 1
	    shutdown(SHUT_RD);
d659 1
a659 1
	    shutdown(SHUT_WR);
a805 2
	FileDescriptor fd = new FileDescriptor();
	fd.setSocket(netSocket);
a852 20
    private SocketAddress bindImpl(InetAddress addr, int port) throws IOException
    {
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    netSocket.Bind(new IPEndPoint(PlainSocketImpl.getAddressFromInetAddress(addr), port));
	    IPEndPoint ep = (IPEndPoint)netSocket.get_LocalEndPoint();
	    return new InetSocketAddress(PlainSocketImpl.getInetAddressFromIPEndPoint(ep), ep.get_Port());
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
    }

d859 1
a859 1
	    IPEndPoint ep = new IPEndPoint(PlainSocketImpl.getAddressFromInetAddress(remote), remotePort);
d862 1
a862 1
		netSocket.Connect(ep);
d867 1
a867 1
		asyncConnect = netSocket.BeginConnect(ep, null, null);
d881 1
a881 1
    private int checkConnect(boolean block, boolean ready) throws IOException
d891 1
a891 1
		netSocket.EndConnect(res);
d893 1
a893 1
		netSocket.set_Blocking(isBlocking());
d911 1
a911 43
    private void shutdown(int how) throws IOException
    {
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    netSocket.Shutdown(SocketShutdown.wrap(how == SHUT_RD ? SocketShutdown.Receive : SocketShutdown.Send));
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
    }

    private int readImpl(ByteBuffer dst) throws IOException
    {
	if (dst.hasArray())
	{
	    byte[] buf = dst.array();
	    int len = readImpl0(buf, dst.arrayOffset() + dst.position(), dst.remaining());
	    if (len > 0)
	    {
		dst.position(dst.position() + len);
	    }
	    return len;
	}
	else
	{
	    byte[] buf = new byte[dst.remaining()];
	    int len = readImpl0(buf, 0, buf.length);
	    if (len > 0)
	    {
		dst.put(buf, 0, len);
	    }
	    return len;
	}
    }

    private int readImpl0(byte[] buf, int offset, int length) throws IOException
d917 1
a917 2
	    int read = netSocket.Receive(buf, offset, length, SocketFlags.wrap(SocketFlags.None));
	    return read == 0 ? -1 : read;
a920 10
	    if (x.get_ErrorCode() == PlainSocketImpl.WSAESHUTDOWN)
	    {
		// the socket was shutdown, so we have to return EOF
		return -1;
	    }
	    else if (x.get_ErrorCode() == PlainSocketImpl.WSAEWOULDBLOCK)
	    {
		// nothing to read and would block
		return 0;
	    }
a928 97
    private long readImpl(ByteBuffer[] dsts) throws IOException
    {
	long totalRead = 0;
	for (int i = 0; i < dsts.length; i++)
	{
	    int size = dsts[i].remaining();
	    if (size > 0)
	    {
		int read = readImpl(dsts[i]);
		if (read < 0)
		{
		    break;
		}
		totalRead += read;
		if (read < size || safeGetAvailable() == 0)
		{
		    break;
		}
	    }
	}
	return totalRead;
    }

    private int safeGetAvailable()
    {
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    return netSocket.get_Available();
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	}
	return 0;
    }

    private int writeImpl(ByteBuffer src) throws IOException
    {
	if (src.hasArray())
	{
	    byte[] buf = src.array();
	    int len = writeImpl0(buf, src.arrayOffset() + src.position(), src.remaining());
	    src.position(src.position() + len);
	    return len;
	}
	else
	{
	    int pos = src.position();
	    byte[] buf = new byte[src.remaining()];
	    src.get(buf);
	    int len = writeImpl0(buf, 0, buf.length);
	    src.position(pos + len);
	    return len;
	}
    }

    private int writeImpl0(byte[] buf, int offset, int length) throws IOException
    {
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    return netSocket.Send(buf, offset, length, SocketFlags.wrap(SocketFlags.None));
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
    }

    private long writeImpl(ByteBuffer[] srcs) throws IOException
    {
	long totalWritten = 0;
	for (int i = 0; i < srcs.length; i++)
	{
	    int size = srcs[i].remaining();
	    if (size > 0)
	    {
		int written = writeImpl(srcs[i]);
		totalWritten += written;
		if (written < size)
		{
		    break;
		}
	    }
	}
	return totalWritten;
    }

d935 1
a935 1
	    netSocket.Close();
a946 92
    static int mapSocketOptionLevel(int opt) throws IOException
    {
	switch (opt)
	{
	    case SocketOptions.SO_BROADCAST:
	    case SocketOptions.SO_KEEPALIVE:
	    case SocketOptions.SO_LINGER:
	    case SocketOptions.SO_OOBINLINE:
	    case SocketOptions.SO_RCVBUF:
	    case SocketOptions.SO_SNDBUF:
	    case SocketOptions.SO_REUSEADDR:
		return SocketOptionLevel.Socket;
	    case SocketOptions.IP_MULTICAST_LOOP:
	    case SocketOptions.IP_TOS:
		return SocketOptionLevel.IP;
	    case SocketOptions.TCP_NODELAY:
		return SocketOptionLevel.Tcp;
	    default:
		throw new SocketException("unsupported socket option: " + opt);
	}
    }

    static int mapSocketOptionName(int opt) throws IOException
    {
	switch (opt)
	{
	    case SocketOptions.SO_BROADCAST:
		return SocketOptionName.Broadcast;
	    case SocketOptions.SO_KEEPALIVE:
		return SocketOptionName.KeepAlive;
	    case SocketOptions.SO_LINGER:
		return SocketOptionName.Linger;
	    case SocketOptions.SO_OOBINLINE:
		return SocketOptionName.OutOfBandInline;
	    case SocketOptions.SO_RCVBUF:
		return SocketOptionName.ReceiveBuffer;
	    case SocketOptions.SO_SNDBUF:
		return SocketOptionName.SendBuffer;
	    case SocketOptions.SO_REUSEADDR:
		return SocketOptionName.ReuseAddress;
	    case SocketOptions.IP_MULTICAST_LOOP:
		return SocketOptionName.MulticastLoopback;
	    case SocketOptions.IP_TOS:
		return SocketOptionName.TypeOfService;
	    case SocketOptions.TCP_NODELAY:
		return SocketOptionName.NoDelay;
	    default:
		throw new SocketException("unsupported socket option: " + opt);
	}
    }

    int getSocketOptionImpl(int level, int name) throws IOException
    {
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    Object obj = netSocket.GetSocketOption(SocketOptionLevel.wrap(level), SocketOptionName.wrap(name));
	    if (obj instanceof LingerOption)
	    {
		LingerOption lo = (LingerOption)obj;
		return lo.get_Enabled() ? lo.get_LingerTime() : -1;
	    }
	    return CIL.unbox_int(obj);
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
    }

    void setSocketOptionImpl(int level, int name, int value) throws IOException
    {
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    netSocket.SetSocketOption(SocketOptionLevel.wrap(level), SocketOptionName.wrap(name), value);
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
    }
@


1.3
log
@SelectorImpl fixes and workaround for non-blocking sockets becoming blocking again after connect.
@
text
@d420 5
d474 6
a479 2
		    // Socket was not bound before connecting or
		    // Socket was bound with an "anyLocalAddress"
d482 7
d854 3
a856 1
	throw new Error();
d930 1
a930 1
	    if (netSocket.get_Blocking())
d962 2
a963 2
		// FXBUG after connecting the sockets gets set back to blocking (even though Socket.get_Blocking() still returns false)
		netSocket.set_Blocking(netSocket.get_Blocking());
a1258 6

    // used by SelectionKeyImpl constructor
    cli.System.Net.Sockets.Socket getSocket()
    {
	return netSocket;
    }
a1261 5
class DatagramChannelImpl
{
    SocketOpts options() { throw new Error(); }
}

@


1.2
log
@Implemented ServerSocketChannelImpl.
@
text
@d944 2
@


1.1
log
@Implement SocketChannelImpl & DotNetSelectorImpl.
@
text
@d426 1
a426 1
	catch (cli.System.Net.Sockets.SocketException _)
d428 1
d432 1
d885 1
a885 1
    private SocketAddress bindImpl(InetAddress addr, int port)
d887 16
a902 2
	// TODO
	throw new Error("TODO");
a1247 5
class ServerSocketChannelImpl
{
    SocketOpts options() { throw new Error(); }
}

@

