head	1.9;
access;
symbols
	v0_46_0_4:1.7
	v0_46_0_2:1.7
	v0_40_0_6:1.5
	v0_40_0_5:1.5
	v0_46_0_1:1.7
	v0_46_0_0:1.7
	v0_46:1.7.0.2
	v0_36_0_14:1.3
	v0_44_0_6:1.5
	v0_44_0_5:1.5
	v0_44_0_4:1.5
	v0_44_0_3:1.5
	v0_44_0_2:1.5
	v0_42_0_7:1.5
	v0_44_0_1:1.5
	v0_44_0_0:1.5
	v0_44:1.5.0.8
	v0_42_0_6:1.5
	v0_42_0_5:1.5
	v0_42_0_4:1.5
	v0_42_0_3:1.5
	v0_42_0_2:1.5
	v0_42_0_1:1.5
	v0_42_0_0:1.5
	v0_42:1.5.0.6
	v0_40_0_3:1.5
	v0_40_0_2:1.5
	v0_40_0_1:1.5
	v0_40_0_0:1.5
	v0_40:1.5.0.4
	v0_36_0_13:1.3
	v0_38_0_1:1.5
	v0_38_0_0:1.5
	v0_38:1.5.0.2
	v0_36_0_9:1.3
	v0_36_0_7:1.3
	v0_36_0_5:1.3
	v0_36_0_4:1.3
	v0_36_0_3:1.3
	v0_36_0_2:1.3
	v0_36_0_1:1.3
	v0_36_0_0:1.3
	v0_36:1.3.0.2;
locks; strict;
comment	@# @;


1.9
date	2011.07.15.09.05.27;	author jfrijters;	state dead;
branches;
next	1.8;

1.8
date	2011.07.09.16.35.38;	author smallsql;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.24.16.40.23;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2010.08.27.06.21.56;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2008.06.12.09.10.53;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2008.06.11.09.06.00;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2007.07.20.15.10.38;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2007.07.20.09.17.26;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.18.15.35.29;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Updated bulk of java.nio to OpenJDK 7.
@
text
@/*
 * Copyright (c) 2000, 2006, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package sun.nio.ch;

import java.io.FileDescriptor;
import java.io.IOException;
import java.lang.reflect.*;
import java.net.*;
import java.nio.channels.*;
import java.nio.channels.spi.*;
import java.security.AccessController;
import java.security.PrivilegedAction;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;


/**
 * An implementation of ServerSocketChannels
 */

class ServerSocketChannelImpl
    extends ServerSocketChannel
    implements SelChImpl
{
    // Our file descriptor
    private final FileDescriptor fd;

    // ID of native thread currently blocked in this channel, for signalling
    private volatile long thread = 0;

    // Lock held by thread currently blocked in this channel
    private final Object lock = new Object();

    // Lock held by any thread that modifies the state fields declared below
    // DO NOT invoke a blocking I/O operation while holding this lock!
    private final Object stateLock = new Object();

    // -- The following fields are protected by stateLock

    // Channel state, increases monotonically
    private static final int ST_UNINITIALIZED = -1;
    private static final int ST_INUSE = 0;
    private static final int ST_KILLED = 1;
    private int state = ST_UNINITIALIZED;

    // Binding
    private SocketAddress localAddress = null; // null => unbound

    // Options, created on demand
    private SocketOpts.IP.TCP options = null;

    // Our socket adaptor, if any
    ServerSocket socket;

    // -- End of fields protected by stateLock


    public ServerSocketChannelImpl(SelectorProvider sp) throws IOException {
        super(sp);
        this.fd =  Net.serverSocket(true);
        this.state = ST_INUSE;
    }

    public ServerSocketChannelImpl(SelectorProvider sp, FileDescriptor fd)
        throws IOException
    {
        super(sp);
        this.fd = fd;
        this.state = ST_INUSE;
        localAddress = Net.localAddress(fd);
    }

    public ServerSocket socket() {
        synchronized (stateLock) {
            if (socket == null)
                socket = ServerSocketAdaptor.create(this);
            return socket;
        }
    }

	public SocketAddress getLocalAddress() throws IOException {
        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();
            return localAddress;
        }
	}

    public <T> ServerSocketChannel setOption(SocketOption<T> name, T value) throws IOException
    {
        if (name == null)
            throw new NullPointerException();
        if (!supportedOptions().contains(name))
            throw new UnsupportedOperationException("'" + name + "' not supported");

        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();

            // no options that require special handling
            Net.setSocketOption(fd, Net.UNSPEC, name, value);
            return this;
        }
    }
    
    @@SuppressWarnings("unchecked")
	public <T> T getOption(SocketOption<T> name) throws IOException
    {
        if (name == null)
            throw new NullPointerException();
        if (!supportedOptions().contains(name))
            throw new UnsupportedOperationException("'" + name + "' not supported");

        synchronized (stateLock) {
            if (!isOpen())
                throw new ClosedChannelException();

            // no options that require special handling
            return (T) Net.getSocketOption(fd, Net.UNSPEC, name);
        }
    }

    private static class DefaultOptionsHolder {
        static final Set<SocketOption<?>> defaultOptions = defaultOptions();

        private static Set<SocketOption<?>> defaultOptions() {
            HashSet<SocketOption<?>> set = new HashSet<SocketOption<?>>(2);
            set.add(StandardSocketOptions.SO_RCVBUF);
            set.add(StandardSocketOptions.SO_REUSEADDR);
            return Collections.unmodifiableSet(set);
        }
    }

    public final Set<SocketOption<?>> supportedOptions() {
        return DefaultOptionsHolder.defaultOptions;
    }

    public boolean isBound() {
        synchronized (stateLock) {
            return localAddress != null;
        }
    }

    public SocketAddress localAddress() {
        synchronized (stateLock) {
            return localAddress;
        }
    }

    public ServerSocketChannel bind(SocketAddress local, int backlog) throws IOException {
        synchronized (lock) {
            if (!isOpen())
                throw new ClosedChannelException();
            if (isBound())
                throw new AlreadyBoundException();
            InetSocketAddress isa = Net.checkAddress(local);
            SecurityManager sm = System.getSecurityManager();
            if (sm != null)
                sm.checkListen(isa.getPort());
            Net.bind(fd, isa.getAddress(), isa.getPort());
            listen(fd, backlog < 1 ? 50 : backlog);
            synchronized (stateLock) {
                localAddress = Net.localAddress(fd);
            }
        }
        return this;
    }

    public SocketChannel accept() throws IOException {
        synchronized (lock) {
            if (!isOpen())
                throw new ClosedChannelException();
            if (!isBound())
                throw new NotYetBoundException();
            SocketChannel sc = null;

            int n = 0;
            FileDescriptor newfd = new FileDescriptor();
            InetSocketAddress[] isaa = new InetSocketAddress[1];

            try {
                begin();
                if (!isOpen())
                    return null;
                thread = NativeThread.current();
                for (;;) {
                    n = accept0(this.fd, newfd, isaa);
                    if ((n == IOStatus.INTERRUPTED) && isOpen())
                        continue;
                    break;
                }
            } finally {
                thread = 0;
                end(n > 0);
                assert IOStatus.check(n);
            }

            if (n < 1)
                return null;

            IOUtil.configureBlocking(newfd, true);
            InetSocketAddress isa = isaa[0];
            sc = new SocketChannelImpl(provider(), newfd, isa);
            SecurityManager sm = System.getSecurityManager();
            if (sm != null) {
                try {
                    sm.checkAccept(isa.getAddress().getHostAddress(),
                                   isa.getPort());
                } catch (SecurityException x) {
                    sc.close();
                    throw x;
                }
            }
            return sc;

        }
    }

    protected void implConfigureBlocking(boolean block) throws IOException {
        IOUtil.configureBlocking(fd, block);
    }

    public SocketOpts options() {
        synchronized (stateLock) {
            if (options == null) {
                SocketOptsImpl.Dispatcher d
                    = new SocketOptsImpl.Dispatcher() {
                            int getInt(int opt) throws IOException {
                                return Net.getIntOption(fd, opt);
                            }
                            void setInt(int opt, int arg) throws IOException {
                                Net.setIntOption(fd, opt, arg);
                            }
                        };
                options = new SocketOptsImpl.IP.TCP(d);
            }
            return options;
        }
    }

    protected void implCloseSelectableChannel() throws IOException {
        synchronized (stateLock) {
            closeImpl();
            long th = thread;
            if (th != 0)
                NativeThread.signal(th);
            if (!isRegistered())
                kill();
        }
    }

    public void kill() throws IOException {
        synchronized (stateLock) {
            if (state == ST_KILLED)
                return;
            if (state == ST_UNINITIALIZED) {
                state = ST_KILLED;
                return;
            }
            assert !isOpen() && !isRegistered();
            closeImpl();
            state = ST_KILLED;
        }
    }

    /**
     * Translates native poll revent set into a ready operation set
     */
    public boolean translateReadyOps(int ops, int initialOps,
                                     SelectionKeyImpl sk) {
        int intOps = sk.nioInterestOps(); // Do this just once, it synchronizes
        int oldOps = sk.nioReadyOps();
        int newOps = initialOps;

        if ((ops & PollArrayWrapper.POLLNVAL) != 0) {
            // This should only happen if this channel is pre-closed while a
            // selection operation is in progress
            // ## Throw an error if this channel has not been pre-closed
            return false;
        }

        if ((ops & (PollArrayWrapper.POLLERR
                    | PollArrayWrapper.POLLHUP)) != 0) {
            newOps = intOps;
            sk.nioReadyOps(newOps);
            return (newOps & ~oldOps) != 0;
        }

        if (((ops & PollArrayWrapper.POLLIN) != 0) &&
            ((intOps & SelectionKey.OP_ACCEPT) != 0))
                newOps |= SelectionKey.OP_ACCEPT;

        sk.nioReadyOps(newOps);
        return (newOps & ~oldOps) != 0;
    }

    public boolean translateAndUpdateReadyOps(int ops, SelectionKeyImpl sk) {
        return translateReadyOps(ops, sk.nioReadyOps(), sk);
    }

    public boolean translateAndSetReadyOps(int ops, SelectionKeyImpl sk) {
        return translateReadyOps(ops, 0, sk);
    }

    /**
     * Translates an interest operation set into a native poll event set
     */
    public void translateAndSetInterestOps(int ops, SelectionKeyImpl sk) {
        int newOps = 0;

        // Translate ops
        if ((ops & SelectionKey.OP_ACCEPT) != 0)
            newOps |= PollArrayWrapper.POLLIN;
        // Place ops into pollfd array
        sk.selector.putEventOps(sk, newOps);
    }

    public FileDescriptor getFD() {
        return fd;
    }

    public int getFDVal() {
        throw new Error();
    }

    public String toString() {
        StringBuffer sb = new StringBuffer();
        sb.append(this.getClass().getName());
        sb.append('[');
        if (!isOpen())
            sb.append("closed");
        else {
            synchronized (stateLock) {
                if (localAddress() == null) {
                    sb.append("unbound");
                } else {
                    sb.append(localAddress().toString());
                }
            }
        }
        sb.append(']');
        return sb.toString();
    }

    // -- Native methods --

    private static void listen(FileDescriptor fd, int backlog) throws IOException
    {
        try
        {
            if (false) throw new cli.System.Net.Sockets.SocketException();
            if (false) throw new cli.System.ObjectDisposedException("");
            fd.getSocket().Listen(backlog);
        }
        catch (cli.System.Net.Sockets.SocketException x)
        {
            throw SocketUtil.convertSocketExceptionToIOException(x);
        }
        catch (cli.System.ObjectDisposedException _)
        {
            throw new SocketException("Socket is closed");
        }
    }

    // Accepts a new connection, setting the given file descriptor to refer to
    // the new socket and setting isaa[0] to the socket's remote address.
    // Returns 1 on success, or IOStatus.UNAVAILABLE (if non-blocking and no
    // connections are pending) or IOStatus.INTERRUPTED.
    //
    private static int accept0(FileDescriptor ssfd, FileDescriptor newfd, InetSocketAddress[] isaa) throws IOException
    {
        try
        {
            if (false) throw new cli.System.Net.Sockets.SocketException();
            if (false) throw new cli.System.ObjectDisposedException("");
            cli.System.Net.Sockets.Socket netSocket = ssfd.getSocket();
            if (netSocket.get_Blocking() || netSocket.Poll(0, cli.System.Net.Sockets.SelectMode.wrap(cli.System.Net.Sockets.SelectMode.SelectRead)))
            {
                cli.System.Net.Sockets.Socket accsock = netSocket.Accept();
                newfd.setSocket(accsock);
                cli.System.Net.IPEndPoint ep = (cli.System.Net.IPEndPoint)accsock.get_RemoteEndPoint();
                isaa[0] = new InetSocketAddress(SocketUtil.getInetAddressFromIPEndPoint(ep), ep.get_Port());
                return 1;
            }
            else
            {
                return IOStatus.UNAVAILABLE;
            }
        }
        catch (cli.System.Net.Sockets.SocketException x)
        {
            throw SocketUtil.convertSocketExceptionToIOException(x);
        }
        catch (cli.System.ObjectDisposedException _)
        {
            throw new SocketException("Socket is closed");
        }
    }

    private void closeImpl() throws IOException
    {
        try
        {
            if (false) throw new cli.System.Net.Sockets.SocketException();
            if (false) throw new cli.System.ObjectDisposedException("");
            fd.getSocket().Close();
        }
        catch (cli.System.Net.Sockets.SocketException x)
        {
            throw SocketUtil.convertSocketExceptionToIOException(x);
        }
        catch (cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

}
@


1.8
log
@Add methods in ServerSocketChannelImpl for Java 7
@
text
@@


1.7
log
@Integrated OpenJDK 6 b21.
@
text
@d36 1
d39 1
d106 57
d175 1
a175 1
    public void bind(SocketAddress local, int backlog) throws IOException {
d191 1
d442 1
@


1.6
log
@Moved shared socket functionality from PlainSocketImpl.java to SocketUtil.java.
@
text
@d2 1
a2 1
 * Copyright 2000-2006 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.5
log
@Merged OpenJDK 6 b10 whitespace and comment changes.
@
text
@d322 1
a322 1
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
d347 1
a347 1
                isaa[0] = new InetSocketAddress(PlainSocketImpl.getInetAddressFromIPEndPoint(ep), ep.get_Port());
d357 1
a357 1
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
d375 1
a375 1
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
@


1.4
log
@Converted tabs to spaces.
@
text
@d68 1
a68 1
    
d83 1
a83 1
        this.fd = Net.serverSocket(true);
d87 1
a87 1
    public ServerSocketChannelImpl(SelectorProvider sp, FileDescriptor fd) 
@


1.3
log
@Restructured to reduce the number of differences with OpenJDK sources.
@
text
@d82 3
a84 3
	super(sp);
	this.fd = Net.serverSocket(true);
	this.state = ST_INUSE;
d88 1
a88 1
	throws IOException
d90 4
a93 4
	super(sp);
	this.fd = fd;
	this.state = ST_INUSE;
	localAddress = Net.localAddress(fd);
d97 5
a101 5
	synchronized (stateLock) {
	    if (socket == null)
		socket = ServerSocketAdaptor.create(this);
	    return socket;
	}
d105 3
a107 3
	synchronized (stateLock) {
	    return localAddress != null;
	}
d111 3
a113 3
	synchronized (stateLock) {
	    return localAddress;
	}
d117 15
a131 15
	synchronized (lock) {
	    if (!isOpen())
		throw new ClosedChannelException();
	    if (isBound())
		throw new AlreadyBoundException();
	    InetSocketAddress isa = Net.checkAddress(local);
	    SecurityManager sm = System.getSecurityManager();
	    if (sm != null)
		sm.checkListen(isa.getPort());
	    Net.bind(fd, isa.getAddress(), isa.getPort());
	    listen(fd, backlog < 1 ? 50 : backlog);
	    synchronized (stateLock) {
		localAddress = Net.localAddress(fd);
	    }
	}
d135 30
a164 45
	synchronized (lock) {
	    if (!isOpen())
		throw new ClosedChannelException();
	    if (!isBound())
		throw new NotYetBoundException();
	    SocketChannel sc = null;

	    int n = 0;
	    FileDescriptor newfd = new FileDescriptor();
	    InetSocketAddress[] isaa = new InetSocketAddress[1];

	    try {
		begin();
		if (!isOpen())
		    return null;
		thread = NativeThread.current();
		for (;;) {
		    n = accept0(this.fd, newfd, isaa);
		    if ((n == IOStatus.INTERRUPTED) && isOpen())
			continue;
		    break;
		}
	    } finally {
		thread = 0;
		end(n > 0);
		assert IOStatus.check(n);
	    }

	    if (n < 1)
		return null;

	    IOUtil.configureBlocking(newfd, true);
	    InetSocketAddress isa = isaa[0];
	    sc = new SocketChannelImpl(provider(), newfd, isa);
	    SecurityManager sm = System.getSecurityManager();
	    if (sm != null) {
		try {
		    sm.checkAccept(isa.getAddress().getHostAddress(),
				   isa.getPort());
		} catch (SecurityException x) {
		    sc.close();
		    throw x;
		}
	    }
	    return sc;
d166 16
a181 1
	}
d185 1
a185 1
	IOUtil.configureBlocking(fd, block);
d189 15
a203 15
	synchronized (stateLock) {
	    if (options == null) {
		SocketOptsImpl.Dispatcher d
		    = new SocketOptsImpl.Dispatcher() {
			    int getInt(int opt) throws IOException {
				return Net.getIntOption(fd, opt);
			    }
			    void setInt(int opt, int arg) throws IOException {
				Net.setIntOption(fd, opt, arg);
			    }
			};
		options = new SocketOptsImpl.IP.TCP(d);
	    }
	    return options;
	}
d207 8
a214 8
	synchronized (stateLock) {
	    closeImpl();
	    long th = thread;
	    if (th != 0)
		NativeThread.signal(th);
	    if (!isRegistered())
		kill();
	}
d218 4
a221 4
	synchronized (stateLock) {
	    if (state == ST_KILLED)
		return;
	    if (state == ST_UNINITIALIZED) {
d223 1
a223 1
		return;
d225 4
a228 4
	    assert !isOpen() && !isRegistered();
	    closeImpl();
	    state = ST_KILLED;
	}
d241 5
a245 5
	    // This should only happen if this channel is pre-closed while a
	    // selection operation is in progress
	    // ## Throw an error if this channel has not been pre-closed
	    return false;
	}
d284 1
a284 1
	return fd;
d288 1
a288 1
	throw new Error();
d292 16
a307 16
	StringBuffer sb = new StringBuffer();
	sb.append(this.getClass().getName());
	sb.append('[');
	if (!isOpen())
	    sb.append("closed");
	else {
	    synchronized (stateLock) {
		if (localAddress() == null) {
		    sb.append("unbound");
		} else {
		    sb.append(localAddress().toString());
		}
	    }
	}
	sb.append(']');
	return sb.toString();
d314 14
a327 14
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    fd.getSocket().Listen(backlog);
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException _)
	{
	    throw new SocketException("Socket is closed");
	}
d337 26
a362 26
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    cli.System.Net.Sockets.Socket netSocket = ssfd.getSocket();
	    if (netSocket.get_Blocking() || netSocket.Poll(0, cli.System.Net.Sockets.SelectMode.wrap(cli.System.Net.Sockets.SelectMode.SelectRead)))
	    {
		cli.System.Net.Sockets.Socket accsock = netSocket.Accept();
		newfd.setSocket(accsock);
		cli.System.Net.IPEndPoint ep = (cli.System.Net.IPEndPoint)accsock.get_RemoteEndPoint();
		isaa[0] = new InetSocketAddress(PlainSocketImpl.getInetAddressFromIPEndPoint(ep), ep.get_Port());
		return 1;
	    }
	    else
	    {
		return IOStatus.UNAVAILABLE;
	    }
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException _)
	{
	    throw new SocketException("Socket is closed");
	}
d367 14
a380 14
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    fd.getSocket().Close();
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
@


1.2
log
@- Implemented DatagramChannelImpl and PipeImpl.
- More nio fixes.
@
text
@a27 11
import cli.System.Net.IPAddress;
import cli.System.Net.IPEndPoint;
import cli.System.Net.Sockets.LingerOption;
import cli.System.Net.Sockets.SelectMode;
import cli.System.Net.Sockets.SocketOptionName;
import cli.System.Net.Sockets.SocketOptionLevel;
import cli.System.Net.Sockets.SocketFlags;
import cli.System.Net.Sockets.SocketType;
import cli.System.Net.Sockets.ProtocolType;
import cli.System.Net.Sockets.AddressFamily;
import cli.System.Net.Sockets.SocketShutdown;
d48 2
a49 1
    private final cli.System.Net.Sockets.Socket netSocket;
d83 1
d85 9
a93 9
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    netSocket = new cli.System.Net.Sockets.Socket(AddressFamily.wrap(AddressFamily.InterNetwork), SocketType.wrap(SocketType.Stream), ProtocolType.wrap(ProtocolType.Tcp));
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
d126 2
a127 2
	    bindImpl(isa.getAddress(), isa.getPort());
	    listen(backlog < 1 ? 50 : backlog);
d129 1
a129 2
		IPEndPoint ep = (IPEndPoint)netSocket.get_LocalEndPoint();
		localAddress = new InetSocketAddress(PlainSocketImpl.getInetAddressFromIPEndPoint(ep), ep.get_Port());
d143 1
a144 1
	    cli.System.Net.Sockets.Socket[] accsock = new cli.System.Net.Sockets.Socket[1];
d152 1
a152 1
		    n = accept0(accsock, isaa);
d166 1
a166 1
	    accsock[0].set_Blocking(true);
d168 1
a168 1
	    sc = new SocketChannelImpl(provider(), accsock[0], isa);
d185 1
a185 14
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    netSocket.set_Blocking(block);
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException _)
	{
	    throw new SocketException("Socket is closed");
	}
d194 1
a194 2
				// TODO
				throw new Error("TODO");
d197 1
a197 2
				// TODO
				throw new Error("TODO");
a283 2
	FileDescriptor fd = new FileDescriptor();
	fd.setSocket(netSocket);
d312 1
a312 1
    private void listen(int backlog) throws IOException
d318 1
a318 1
	    netSocket.Listen(backlog);
d335 1
a335 1
    private int accept0(cli.System.Net.Sockets.Socket[] accsock, InetSocketAddress[] isaa) throws IOException
d341 2
a342 1
	    if (netSocket.get_Blocking() || netSocket.Poll(0, SelectMode.wrap(SelectMode.SelectRead)))
d344 3
a346 2
		accsock[0] = netSocket.Accept();
		IPEndPoint ep = (IPEndPoint)accsock[0].get_RemoteEndPoint();
a364 18
    private void bindImpl(InetAddress addr, int port) throws IOException
    {
	try
	{
	    if (false) throw new cli.System.Net.Sockets.SocketException();
	    if (false) throw new cli.System.ObjectDisposedException("");
	    netSocket.Bind(new IPEndPoint(PlainSocketImpl.getAddressFromInetAddress(addr), port));
	}
	catch (cli.System.Net.Sockets.SocketException x)
	{
	    throw PlainSocketImpl.convertSocketExceptionToIOException(x);
	}
	catch (cli.System.ObjectDisposedException x1)
	{
	    throw new SocketException("Socket is closed");
	}
    }

d371 1
a371 1
	    netSocket.Close();
@


1.1
log
@Implemented ServerSocketChannelImpl.
@
text
@d309 3
a311 1
	throw new Error();
a424 6

    // used by SelectionKeyImpl constructor
    cli.System.Net.Sockets.Socket getSocket()
    {
	return netSocket;
    }
@

