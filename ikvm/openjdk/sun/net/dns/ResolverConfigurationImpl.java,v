head	1.4;
access;
symbols
	v8_1_5717_0:1.4
	v8_1:1.4.0.4
	v8_0_5449_1:1.4
	v8_0_5449_0:1.4
	v8_0:1.4.0.2
	v7_4_5196_0:1.3
	v7_4:1.3.0.10
	v7_3:1.3.0.8
	v7_2_4630_6:1.3
	v7_2_4630_5:1.3
	v7_2_4630_4:1.3
	v7_2_4630_3:1.3
	v7_2_4630_2:1.3
	v0_46_0_4:1.2
	v7_2_4630_1:1.3
	v7_2:1.3.0.6
	v7_1_4532_2:1.3
	v7_1_4532_1:1.3
	v7_1_4532_0:1.3
	v7_1:1.3.0.4
	v7_0_4335_3:1.3
	v7_0_4335_2:1.3
	v7_0_4335_1:1.3
	v0_46_0_2:1.2
	v7_0_4335_0:1.3
	v7_0:1.3.0.2
	v0_40_0_6:1.1
	v0_40_0_5:1.1
	v0_46_0_1:1.2
	v0_46_0_0:1.2
	v0_46:1.2.0.2
	v0_44_0_6:1.1
	v0_44_0_5:1.1
	v0_44_0_4:1.1
	v0_44_0_3:1.1
	v0_44_0_2:1.1
	v0_42_0_7:1.1
	v0_44_0_1:1.1
	v0_44_0_0:1.1
	v0_44:1.1.0.6
	v0_42_0_6:1.1
	v0_42_0_5:1.1
	v0_42_0_4:1.1
	v0_42_0_3:1.1
	v0_42_0_2:1.1
	v0_42_0_1:1.1
	v0_42_0_0:1.1
	v0_42:1.1.0.4
	v0_40_0_3:1.1
	v0_40_0_2:1.1
	v0_40_0_1:1.1
	v0_40_0_0:1.1
	v0_40:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2014.05.19.12.43.41;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.07.15.30.10;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2011.01.24.16.40.23;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2008.12.23.05.30.13;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.4
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 2002, 2012, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package sun.net.dns;

import java.util.List;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.io.IOException;
import cli.System.Net.NetworkInformation.IPAddressCollection;
import cli.System.Net.NetworkInformation.IPInterfaceProperties;
import cli.System.Net.NetworkInformation.NetworkInterface;

/*
 * An implementation of sun.net.ResolverConfiguration for Windows.
 */

public class ResolverConfigurationImpl
    extends ResolverConfiguration
{
    // Lock helds whilst loading configuration or checking
    private static Object lock = new Object();

    // Resolver options
    private final Options opts;

    // Addreses have changed
    private static boolean changed = false;

    // Time of last refresh.
    private static long lastRefresh = -1;

    // Cache timeout (120 seconds) - should be converted into property
    // or configured as preference in the future.
    private static final int TIMEOUT = 120000;

    // DNS suffix list and name servers populated by native method
    private static String os_searchlist;
    private static String os_nameservers;

    // Cached lists
    private static LinkedList<String> searchlist;
    private static LinkedList<String> nameservers;

    // Parse string that consists of token delimited by space or commas
    // and return LinkedHashMap
    private LinkedList<String> stringToList(String str) {
        LinkedList<String> ll = new LinkedList<>();

        // comma and space are valid delimites
        StringTokenizer st = new StringTokenizer(str, ", ");
        while (st.hasMoreTokens()) {
            String s = st.nextToken();
            if (!ll.contains(s)) {
                ll.add(s);
            }
        }
        return ll;
    }

    // Load DNS configuration from OS

    private void loadConfig() {
        assert Thread.holdsLock(lock);

        // if address have changed then DNS probably changed aswell;
        // otherwise check if cached settings have expired.
        //
        if (changed) {
            changed = false;
        } else {
            if (lastRefresh >= 0) {
                long currTime = System.currentTimeMillis();
                if ((currTime - lastRefresh) < TIMEOUT) {
                    return;
                }
            }
        }

        // load DNS configuration, update timestamp, create
        // new HashMaps from the loaded configuration
        //
        loadDNSconfig0();

        lastRefresh = System.currentTimeMillis();
        searchlist = stringToList(os_searchlist);
        nameservers = stringToList(os_nameservers);
        os_searchlist = null;                       // can be GC'ed
        os_nameservers = null;
    }

    ResolverConfigurationImpl() {
        opts = new OptionsImpl();
    }

    @@SuppressWarnings("unchecked") // clone()
    public List<String> searchlist() {
        synchronized (lock) {
            loadConfig();

            // List is mutable so return a shallow copy
            return (List<String>)searchlist.clone();
        }
    }

    @@SuppressWarnings("unchecked") // clone()
    public List<String> nameservers() {
        synchronized (lock) {
            loadConfig();

            // List is mutable so return a shallow copy
            return (List<String>)nameservers.clone();
         }
    }

    public Options options() {
        return opts;
    }

    // --- Address Change Listener

    static class AddressChangeListener extends Thread {
        public void run() {
            for (;;) {
                // wait for configuration to change
                if (notifyAddrChange0() != 0)
                    return;
                synchronized (lock) {
                    changed = true;
                }
            }
        }
    }


    // --- Native methods --

    static void init0() {
    }

    static void loadDNSconfig0() {
	String searchlist = "";
	String nameservers = "";
	for (NetworkInterface iface : NetworkInterface.GetAllNetworkInterfaces()) {
	    IPInterfaceProperties props = iface.GetIPProperties();
	    IPAddressCollection addresses = props.get_DnsAddresses();
	    for (int i = 0; i < addresses.get_Count(); i++) {
	        cli.System.Net.IPAddress addr = addresses.get_Item(i);
	        // no IPv6 support
	        if (addr.get_AddressFamily().Value == cli.System.Net.Sockets.AddressFamily.InterNetwork) {
                    nameservers = strAppend(nameservers, addr.toString());
	        }
	    }
	    try {
	        if (false) throw new cli.System.PlatformNotSupportedException();
		searchlist = strAppend(searchlist, props.get_DnsSuffix());
	    }
	    catch (cli.System.PlatformNotSupportedException _) {
	    }
	}
	os_searchlist = searchlist;
	os_nameservers = nameservers;
    }
    
    private static String strAppend(String s, String app) {
        if (s.equals("")) {
            return app;
        }
        if (app.equals("")) {
            return s;
        }
        return s + " " + app;
    }

    static int notifyAddrChange0() {
        // TODO we could use System.Net.NetworkInformation.NetworkChange to detect changes
        return -1;
    }

    static {
        java.security.AccessController.doPrivileged(
            new java.security.PrivilegedAction<Void>() {
                public Void run() {
                    System.loadLibrary("net");
                    return null;
                }
            });
        init0();

        // start the address listener thread
        AddressChangeListener thr = new AddressChangeListener();
        thr.setDaemon(true);
        thr.start();
    }
}

/**
 * Implementation of {@@link ResolverConfiguration.Options}
 */
class OptionsImpl extends ResolverConfiguration.Options {
}
@


1.3
log
@Update forked sun.net classes to OpenJDK 7.
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2010, Oracle and/or its affiliates. All rights reserved.
d64 2
a65 2
    private static LinkedList searchlist;
    private static LinkedList nameservers;
d118 1
d124 1
a124 1
            return (List)searchlist.clone();
d128 1
d134 1
a134 1
            return (List)nameservers.clone();
d204 6
a209 1
            new sun.security.action.LoadLibraryAction("net"));
@


1.2
log
@Integrated OpenJDK 6 b21.
@
text
@d2 1
a2 1
 * Copyright (c) 2002, Oracle and/or its affiliates. All rights reserved.
d69 2
a70 2
    private LinkedList stringToList(String str) {
        LinkedList ll = new LinkedList();
d118 1
a118 1
    public List searchlist() {
d127 1
a127 1
    public List nameservers() {
d157 1
a157 1
    
@


1.1
log
@Forked three files to make minor changes to reduce dependencies (and in the case of ResolverConfigurationImpl.java to remove the need for a map.xml hack).
@
text
@d2 1
a2 1
 * Copyright 2002 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@

