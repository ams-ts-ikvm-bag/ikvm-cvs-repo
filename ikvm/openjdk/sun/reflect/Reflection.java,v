head	1.9;
access;
symbols
	v8_1_5717_0:1.9
	v8_1:1.9.0.2
	v8_0_5449_1:1.8
	v8_0_5449_0:1.8
	v8_0:1.8.0.2
	v7_4_5196_0:1.7
	v7_4:1.7.0.2
	v7_3:1.5.0.4
	v7_2_4630_6:1.5
	v7_2_4630_5:1.5
	v7_2_4630_4:1.5
	v7_2_4630_3:1.5
	v7_2_4630_2:1.5
	v0_46_0_4:1.4
	v7_2_4630_1:1.5
	v7_2:1.5.0.2
	v7_1_4532_2:1.4
	v7_1_4532_1:1.4
	v7_1_4532_0:1.4
	v7_1:1.4.0.6
	v7_0_4335_3:1.4
	v7_0_4335_2:1.4
	v7_0_4335_1:1.4
	v0_46_0_2:1.4
	v7_0_4335_0:1.4
	v7_0:1.4.0.4
	v0_40_0_6:1.3
	v0_40_0_5:1.3
	v0_46_0_1:1.4
	v0_46_0_0:1.4
	v0_46:1.4.0.2
	v0_36_0_14:1.2
	v0_44_0_6:1.3
	v0_44_0_5:1.3
	v0_44_0_4:1.3
	v0_44_0_3:1.3
	v0_44_0_2:1.3
	v0_42_0_7:1.3
	v0_44_0_1:1.3
	v0_44_0_0:1.3
	v0_44:1.3.0.8
	v0_42_0_6:1.3
	v0_42_0_5:1.3
	v0_42_0_4:1.3
	v0_42_0_3:1.3
	v0_42_0_2:1.3
	v0_42_0_1:1.3
	v0_42_0_0:1.3
	v0_42:1.3.0.6
	v0_40_0_3:1.3
	v0_40_0_2:1.3
	v0_40_0_1:1.3
	v0_40_0_0:1.3
	v0_40:1.3.0.4
	v0_36_0_13:1.2
	v0_38_0_1:1.3
	v0_38_0_0:1.3
	v0_38:1.3.0.2
	v0_36_0_9:1.2
	v0_36_0_7:1.2
	v0_36_0_5:1.2
	v0_36_0_4:1.2
	v0_36_0_3:1.2
	v0_36_0_2:1.2
	v0_36_0_1:1.2
	v0_36_0_0:1.2
	v0_36:1.2.0.2;
locks; strict;
comment	@# @;


1.9
date	2015.06.09.09.28.44;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2014.05.19.12.43.42;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2014.02.07.14.14.12;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2013.08.12.07.55.58;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2012.08.30.08.52.55;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.24.16.40.23;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.11.09.06.01;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2007.05.28.10.16.44;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.24.09.23.04;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Integrated OpenJDK 8u45.
@
text
@/*
 * Copyright (c) 2001, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*IKVM*/
/* Modified for IKVM by Jeroen Frijters
 * 
 * May 27, 2007     Added support for @@ikvm.lang.Internal access modifier
 * 
 */
/*IKVM*/

package sun.reflect;

import java.lang.reflect.*;
import java.util.HashMap;
import java.util.Map;

/** Common utility routines used by both java.lang and
    java.lang.reflect */

public class Reflection {

    /** Used to filter out fields and methods from certain classes from public
        view, where they are sensitive or they may contain VM-internal objects.
        These Maps are updated very rarely. Rather than synchronize on
        each access, we use copy-on-write */
    private static volatile Map<Class<?>,String[]> fieldFilterMap;
    private static volatile Map<Class<?>,String[]> methodFilterMap;

    static {
        Map<Class<?>,String[]> map = new HashMap<Class<?>,String[]>();
        map.put(Reflection.class,
            new String[] {"fieldFilterMap", "methodFilterMap"});
        map.put(System.class, new String[] {"security"});
        map.put(Class.class, new String[] {"classLoader"});
        fieldFilterMap = map;

        methodFilterMap = new HashMap<>();
        // [IKVM] to avoid initialization order issues, we actually add
        // Unsafe.getUnsafe() here, instead of in Unsafe's class initializer
        methodFilterMap.put(sun.misc.Unsafe.class, new String[] {"getUnsafe"});
    }

    /** Returns the class of the caller of the method calling this method,
        ignoring frames associated with java.lang.reflect.Method.invoke()
        and its implementation. */
    @@CallerSensitive
    public static native Class<?> getCallerClass();

    /**
     * @@deprecated This method will be removed in JDK 9.
     * This method is a private JDK API and retained temporarily for
     * existing code to run until a replacement API is defined.
     */
    @@Deprecated
    public static native Class<?> getCallerClass(int depth);

    /** Retrieves the access flags written to the class file. For
        inner classes these flags may differ from those returned by
        Class.getModifiers(), which searches the InnerClasses
        attribute to find the source-level access flags. This is used
        instead of Class.getModifiers() for run-time access checks due
        to compatibility reasons; see 4471811. Only the values of the
        low 13 bits (i.e., a mask of 0x1FFF) are guaranteed to be
        valid. */
    public static native int getClassAccessFlags(Class<?> c);

    /** A quick "fast-path" check to try to avoid getCallerClass()
        calls. */
    public static boolean quickCheckMemberAccess(Class<?> memberClass,
                                                 int modifiers)
    {
        return Modifier.isPublic(getClassAccessFlags(memberClass) & modifiers);
    }

    public static void ensureMemberAccess(Class<?> currentClass,
                                          Class<?> memberClass,
                                          Object target,
                                          int modifiers)
        throws IllegalAccessException
    {
        if (currentClass == null || memberClass == null) {
            throw new InternalError();
        }

        if (!verifyMemberAccess(currentClass, memberClass, target, modifiers)) {
            throw new IllegalAccessException("Class " + currentClass.getName() +
                                             " can not access a member of class " +
                                             memberClass.getName() +
                                             " with modifiers \"" +
                                             Modifier.toString(modifiers) +
                                             "\"");
        }
    }

    /*IKVM*/
    private static native boolean checkInternalAccess(Class currentClass, Class memberClass);

    public static boolean verifyMemberAccess(Class<?> currentClass,
                                             // Declaring class of field
                                             // or method
                                             Class<?> memberClass,
                                             // May be NULL in case of statics
                                             Object   target,
                                             int      modifiers)
    {
        // Verify that currentClass can access a field, method, or
        // constructor of memberClass, where that member's access bits are
        // "modifiers".

        boolean gotIsSameClassPackage = false;
        boolean isSameClassPackage = false;

        if (currentClass == memberClass) {
            // Always succeeds
            return true;
        }

        if (!Modifier.isPublic(getClassAccessFlags(memberClass))) {
            isSameClassPackage = isSameClassPackage(currentClass, memberClass);
            gotIsSameClassPackage = true;
            /*IKVM*/
            if (!isSameClassPackage && !checkInternalAccess(currentClass, memberClass)) {
                return false;
            }
        }

        // At this point we know that currentClass can access memberClass.

        if (Modifier.isPublic(modifiers)) {
            return true;
        }

        /*IKVM*/
        // Is the member @@ikvm.lang.Internal accessible?
        if ((modifiers & 0x40000000) != 0) {
            return currentClass.getClassLoader() == memberClass.getClassLoader();
        }

        boolean successSoFar = false;

        if (Modifier.isProtected(modifiers)) {
            // See if currentClass is a subclass of memberClass
            if (isSubclassOf(currentClass, memberClass)) {
                successSoFar = true;
            }
        }

        if (!successSoFar && !Modifier.isPrivate(modifiers)) {
            if (!gotIsSameClassPackage) {
                isSameClassPackage = isSameClassPackage(currentClass,
                                                        memberClass);
                gotIsSameClassPackage = true;
            }

            if (isSameClassPackage) {
                successSoFar = true;
            }
        }

        if (!successSoFar) {
            return false;
        }

        if (Modifier.isProtected(modifiers)) {
            // Additional test for protected members: JLS 6.6.2
            Class<?> targetClass = (target == null ? memberClass : target.getClass());
            if (targetClass != currentClass) {
                if (!gotIsSameClassPackage) {
                    isSameClassPackage = isSameClassPackage(currentClass, memberClass);
                    gotIsSameClassPackage = true;
                }
                if (!isSameClassPackage) {
                    if (!isSubclassOf(targetClass, currentClass)) {
                        return false;
                    }
                }
            }
        }

        return true;
    }

    private static boolean isSameClassPackage(Class<?> c1, Class<?> c2) {
        return isSameClassPackage(c1.getClassLoader(), c1.getName(),
                                  c2.getClassLoader(), c2.getName());
    }

    /** Returns true if two classes are in the same package; classloader
        and classname information is enough to determine a class's package */
    private static boolean isSameClassPackage(ClassLoader loader1, String name1,
                                              ClassLoader loader2, String name2)
    {
        if (loader1 != loader2) {
            return false;
        } else {
            int lastDot1 = name1.lastIndexOf('.');
            int lastDot2 = name2.lastIndexOf('.');
            if ((lastDot1 == -1) || (lastDot2 == -1)) {
                // One of the two doesn't have a package.  Only return true
                // if the other one also doesn't have a package.
                return (lastDot1 == lastDot2);
            } else {
                int idx1 = 0;
                int idx2 = 0;

                // Skip over '['s
                if (name1.charAt(idx1) == '[') {
                    do {
                        idx1++;
                    } while (name1.charAt(idx1) == '[');
                    if (name1.charAt(idx1) != 'L') {
                        // Something is terribly wrong.  Shouldn't be here.
                        throw new InternalError("Illegal class name " + name1);
                    }
                }
                if (name2.charAt(idx2) == '[') {
                    do {
                        idx2++;
                    } while (name2.charAt(idx2) == '[');
                    if (name2.charAt(idx2) != 'L') {
                        // Something is terribly wrong.  Shouldn't be here.
                        throw new InternalError("Illegal class name " + name2);
                    }
                }

                // Check that package part is identical
                int length1 = lastDot1 - idx1;
                int length2 = lastDot2 - idx2;

                if (length1 != length2) {
                    return false;
                }
                return name1.regionMatches(false, idx1, name2, idx2, length1);
            }
        }
    }

    static boolean isSubclassOf(Class<?> queryClass,
                                Class<?> ofClass)
    {
        while (queryClass != null) {
            if (queryClass == ofClass) {
                return true;
            }
            queryClass = queryClass.getSuperclass();
        }
        return false;
    }

    // fieldNames must contain only interned Strings
    public static synchronized void registerFieldsToFilter(Class<?> containingClass,
                                              String ... fieldNames) {
        fieldFilterMap =
            registerFilter(fieldFilterMap, containingClass, fieldNames);
    }

    // methodNames must contain only interned Strings
    public static synchronized void registerMethodsToFilter(Class<?> containingClass,
                                              String ... methodNames) {
        methodFilterMap =
            registerFilter(methodFilterMap, containingClass, methodNames);
    }

    private static Map<Class<?>,String[]> registerFilter(Map<Class<?>,String[]> map,
            Class<?> containingClass, String ... names) {
        if (map.get(containingClass) != null) {
            throw new IllegalArgumentException
                            ("Filter already registered: " + containingClass);
        }
        map = new HashMap<Class<?>,String[]>(map);
        map.put(containingClass, names);
        return map;
    }

    public static Field[] filterFields(Class<?> containingClass,
                                       Field[] fields) {
        if (fieldFilterMap == null) {
            // Bootstrapping
            return fields;
        }
        return (Field[])filter(fields, fieldFilterMap.get(containingClass));
    }

    public static Method[] filterMethods(Class<?> containingClass, Method[] methods) {
        if (methodFilterMap == null) {
            // Bootstrapping
            return methods;
        }
        return (Method[])filter(methods, methodFilterMap.get(containingClass));
    }

    private static Member[] filter(Member[] members, String[] filteredNames) {
        if ((filteredNames == null) || (members.length == 0)) {
            return members;
        }
        int numNewMembers = 0;
        for (Member member : members) {
            boolean shouldSkip = false;
            for (String filteredName : filteredNames) {
                if (member.getName() == filteredName) {
                    shouldSkip = true;
                    break;
                }
            }
            if (!shouldSkip) {
                ++numNewMembers;
            }
        }
        Member[] newMembers =
            (Member[])Array.newInstance(members[0].getClass(), numNewMembers);
        int destIdx = 0;
        for (Member member : members) {
            boolean shouldSkip = false;
            for (String filteredName : filteredNames) {
                if (member.getName() == filteredName) {
                    shouldSkip = true;
                    break;
                }
            }
            if (!shouldSkip) {
                newMembers[destIdx++] = member;
            }
        }
        return newMembers;
    }

    /**
     * Tests if the given method is caller-sensitive and the declaring class
     * is defined by either the bootstrap class loader or extension class loader.
     */
    public static boolean isCallerSensitive(Method m) {
        final ClassLoader loader = m.getDeclaringClass().getClassLoader();
        if (sun.misc.VM.isSystemDomainLoader(loader) || isExtClassLoader(loader))  {
            return m.isAnnotationPresent(CallerSensitive.class);
        }
        return false;
    }

    private static boolean isExtClassLoader(ClassLoader loader) {
        ClassLoader cl = ClassLoader.getSystemClassLoader();
        while (cl != null) {
            if (cl.getParent() == null && cl == loader) {
                return true;
            }
            cl = cl.getParent();
        }
        return false;
    }
}
@


1.8
log
@First part of OpenJDK 8 integration.
@
text
@d57 1
@


1.7
log
@Merged OpenJDK 7u40 b34, except for java.lang.invoke and sun.invoke packages.
@
text
@d2 1
a2 1
 * Copyright (c) 2001, 2006, Oracle and/or its affiliates. All rights reserved.
a36 1
import java.util.Collections;
d49 2
a50 2
    private static volatile Map<Class,String[]> fieldFilterMap;
    private static volatile Map<Class,String[]> methodFilterMap;
d53 1
a53 1
        Map<Class,String[]> map = new HashMap<Class,String[]>();
d59 1
a59 1
        methodFilterMap = new HashMap<Class,String[]>();
d69 1
a69 3
    public static Class getCallerClass() {
	return getCallerClass0(2);
    }
d72 3
a74 2
     * @@deprecated No replacement. This method will be removed in a future
     *   release.
d77 1
a77 13
    @@CallerSensitive
    public static Class getCallerClass(int depth) {
        if (sun.misc.VM.allowGetCallerClass()) {
            return getCallerClass0(depth+1);
        }
        throw new UnsupportedOperationException("This method has been disabled by a " +
            "system property");
    }

    // If the VM enforces getting caller class with @@CallerSensitive,
    // this will fail anyway.
    @@CallerSensitive
    private static native Class getCallerClass0(int depth);
d87 1
a87 1
    private static native int getClassAccessFlags(Class c);
d91 1
a91 1
    public static boolean quickCheckMemberAccess(Class memberClass,
d97 2
a98 2
    public static void ensureMemberAccess(Class currentClass,
                                          Class memberClass,
d120 1
a120 1
    public static boolean verifyMemberAccess(Class currentClass,
d123 1
a123 1
                                             Class  memberClass,
d125 2
a126 2
                                             Object target,
                                             int    modifiers)
d188 1
a188 1
            Class targetClass = (target == null ? memberClass : target.getClass());
d205 1
a205 1
    private static boolean isSameClassPackage(Class c1, Class c2) {
d260 2
a261 2
    static boolean isSubclassOf(Class queryClass,
                                Class ofClass)
d273 1
a273 1
    public static synchronized void registerFieldsToFilter(Class containingClass,
d280 1
a280 1
    public static synchronized void registerMethodsToFilter(Class containingClass,
d286 2
a287 2
    private static Map<Class,String[]> registerFilter(Map<Class,String[]> map,
            Class containingClass, String ... names) {
d292 1
a292 1
        map = new HashMap<Class,String[]>(map);
d297 1
a297 1
    public static Field[] filterFields(Class containingClass,
d306 1
a306 1
    public static Method[] filterMethods(Class containingClass, Method[] methods) {
d355 1
a355 1
        if (loader == null || isExtClassLoader(loader))  {
@


1.6
log
@Switched from @@HasCallerID to @@CallerSensitive and merged CallerSenstive related 7u40 changes.
@
text
@d71 1
a71 1
	return getCallerClass(2);
d74 5
a78 9
    /** Returns the class of the method <code>realFramesToSkip</code>
        frames up the stack (zero-based), ignoring frames associated
        with java.lang.reflect.Method.invoke() and its implementation.
        The first frame is that associated with this method, so
        <code>getCallerClass(0)</code> returns the Class object for
        sun.reflect.Reflection. Frames associated with
        java.lang.reflect.Method.invoke() and its implementation are
        completely ignored and do not count toward the number of "real"
        frames skipped. */
d80 12
a91 1
    public static native Class getCallerClass(int realFramesToSkip);
d362 23
@


1.5
log
@Disallow Unsafe.getUnsafe() from being called via reflection (for JDK compatibility).
@
text
@d66 8
d83 1
@


1.4
log
@Integrated OpenJDK 6 b21.
@
text
@d61 3
@


1.3
log
@Converted tabs to spaces.
@
text
@d2 1
a2 1
 * Copyright 2001-2006 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
d52 1
a52 1
    
d55 1
a55 1
        map.put(Reflection.class, 
d59 1
a59 1
        
d62 1
a62 1
    
d199 1
a199 1
                                    
d266 1
a266 1
    
d270 1
a270 1
        fieldFilterMap = 
d277 1
a277 1
        methodFilterMap = 
d300 1
a300 1
    
d326 1
a326 1
        Member[] newMembers = 
@


1.2
log
@Added support for @@ikvm.lang.Internal access modifier (doesn't work yet, depends on java.lang.reflect.Constructor/Method/Field to return 0x40000000 bit from getModifiers()).
@
text
@d29 1
a29 1
 * May 27, 2007	    Added support for @@ikvm.lang.Internal access modifier
d48 2
a49 2
	These Maps are updated very rarely. Rather than synchronize on
	each access, we use copy-on-write */
d54 7
a60 7
	Map<Class,String[]> map = new HashMap<Class,String[]>();
	map.put(Reflection.class, 
	    new String[] {"fieldFilterMap", "methodFilterMap"});
	map.put(System.class, new String[] {"security"});
	fieldFilterMap = map;
	
	methodFilterMap = new HashMap<Class,String[]>();
d138 1
a138 1
	    /*IKVM*/
d150 5
a154 5
	/*IKVM*/
	// Is the member @@ikvm.lang.Internal accessible?
	if ((modifiers & 0x40000000) != 0) {
	    return currentClass.getClassLoader() == memberClass.getClassLoader();
	}
d270 2
a271 2
	fieldFilterMap = 
	    registerFilter(fieldFilterMap, containingClass, fieldNames);
d277 2
a278 2
	methodFilterMap = 
	    registerFilter(methodFilterMap, containingClass, methodNames);
d282 8
a289 8
	    Class containingClass, String ... names) {
	if (map.get(containingClass) != null) {
	    throw new IllegalArgumentException
			    ("Filter already registered: " + containingClass);
	}
	map = new HashMap<Class,String[]>(map);
	map.put(containingClass, names);
	return map;
d298 1
a298 1
	return (Field[])filter(fields, fieldFilterMap.get(containingClass));
d306 1
a306 1
	return (Method[])filter(methods, methodFilterMap.get(containingClass));
d316 1
a316 1
	    for (String filteredName : filteredNames) {
d326 2
a327 2
	Member[] newMembers = 
	    (Member[])Array.newInstance(members[0].getClass(), numNewMembers);
d331 1
a331 1
	    for (String filteredName : filteredNames) {
@


1.1
log
@First batch of OpenJDK integration code.
@
text
@d26 8
d112 3
d138 2
a139 1
            if (!isSameClassPackage) {
d150 6
@

