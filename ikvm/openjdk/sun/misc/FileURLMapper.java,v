head	1.3;
access;
symbols
	v8_1_5717_0:1.3
	v8_1:1.3.0.16
	v8_0_5449_1:1.3
	v8_0_5449_0:1.3
	v8_0:1.3.0.14
	v7_4_5196_0:1.3
	v7_4:1.3.0.12
	v7_3:1.3.0.10
	v7_2_4630_6:1.3
	v7_2_4630_5:1.3
	v7_2_4630_4:1.3
	v7_2_4630_3:1.3
	v7_2_4630_2:1.3
	v0_46_0_4:1.3
	v7_2_4630_1:1.3
	v7_2:1.3.0.8
	v7_1_4532_2:1.3
	v7_1_4532_1:1.3
	v7_1_4532_0:1.3
	v7_1:1.3.0.6
	v7_0_4335_3:1.3
	v7_0_4335_2:1.3
	v7_0_4335_1:1.3
	v0_46_0_2:1.3
	v7_0_4335_0:1.3
	v7_0:1.3.0.4
	v0_40_0_6:1.2
	v0_40_0_5:1.2
	v0_46_0_1:1.3
	v0_46_0_0:1.3
	v0_46:1.3.0.2
	v0_36_0_14:1.1
	v0_44_0_6:1.2
	v0_44_0_5:1.2
	v0_44_0_4:1.2
	v0_44_0_3:1.2
	v0_44_0_2:1.2
	v0_42_0_7:1.2
	v0_44_0_1:1.2
	v0_44_0_0:1.2
	v0_44:1.2.0.8
	v0_42_0_6:1.2
	v0_42_0_5:1.2
	v0_42_0_4:1.2
	v0_42_0_3:1.2
	v0_42_0_2:1.2
	v0_42_0_1:1.2
	v0_42_0_0:1.2
	v0_42:1.2.0.6
	v0_40_0_3:1.2
	v0_40_0_2:1.2
	v0_40_0_1:1.2
	v0_40_0_0:1.2
	v0_40:1.2.0.4
	v0_36_0_13:1.1
	v0_38_0_1:1.2
	v0_38_0_0:1.2
	v0_38:1.2.0.2
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.2;
locks; strict;
comment	@# @;


1.3
date	2011.01.24.16.40.23;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.05.43;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.05.24.09.23.04;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Integrated OpenJDK 6 b21.
@
text
@/*
 * Copyright (c) 2002, 2003, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*IKVM*/
/*
 * Modified for IKVM by Jeroen Frijters on May 22, 2007.
 * 
 * This is a merged version of the Windows & Solaris platform specific versions.
 * Since the IKVM class library binary can be used both on Windows and on *nix,
 * I've merged the platform specific classes into a generic class that at
 * runtime determines if it runs on Windows or not.
 * 
/*IKVM*/

package sun.misc;

import java.net.URL;
import java.io.File;
import sun.net.www.ParseUtil;

/**
 * Platform specific handling for file: URLs . In particular deals
 * with network paths mapping them to UNCs.
 *
 * @@author      Michael McMahon
 * @@version     1.10, 07/05/05
 */

public class FileURLMapper {
    private static final boolean runningOnWindows = cli.System.Environment.get_OSVersion().ToString().indexOf("Unix") == -1;
    URL url;
    String file;

    public FileURLMapper (URL url) {
        this.url = url;
    }

    /**
     * @@returns the platform specific path corresponding to the URL, and in particular
     *  returns a UNC when the authority contains a hostname
     */

    public String getPath () {
        if (file != null) {
            return file;
        }
        if (runningOnWindows) {
            String host = url.getHost();
            if (host != null && !host.equals("") &&
                !"localhost".equalsIgnoreCase(host)) {
                String rest = url.getFile();
                String s = host + ParseUtil.decode (url.getFile());
                file = "\\\\"+ s.replace('/', '\\');
                return file;
            }
            String path = url.getFile().replace('/', '\\');
            file = ParseUtil.decode(path);
            return file;
        } else {
            String host = url.getHost();
            if (host == null || "".equals(host) || "localhost".equalsIgnoreCase (host)) {
                file = url.getFile();
                file = ParseUtil.decode (file);
            }
            return file;
        }
    }

    public boolean exists() {
        String path = getPath();
        if (path == null) {
            return false;
        }
        File f = new File (path);
        return f.exists();
    }
}
@


1.2
log
@Converted tabs to spaces.
@
text
@d2 1
a2 1
 * Copyright 2002-2003 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.1
log
@First batch of OpenJDK integration code.
@
text
@d47 2
a48 2
 * @@author	Michael McMahon
 * @@version 	1.10, 07/05/05
d57 1
a57 1
	this.url = url;
d66 22
a87 22
	if (file != null) {
	    return file;
	}
	if (runningOnWindows) {
    	    String host = url.getHost();
    	    if (host != null && !host.equals("") &&
		!"localhost".equalsIgnoreCase(host)) {
		String rest = url.getFile();
		String s = host + ParseUtil.decode (url.getFile());
		file = "\\\\"+ s.replace('/', '\\');
		return file;
	    }
	    String path = url.getFile().replace('/', '\\');
	    file = ParseUtil.decode(path);
	    return file;
	} else {
	    String host = url.getHost();
	    if (host == null || "".equals(host) || "localhost".equalsIgnoreCase (host)) {
		file = url.getFile();
		file = ParseUtil.decode (file);
	    }
	    return file;
d92 6
a97 6
	String path = getPath();
	if (path == null) {
	    return false;
	}
	File f = new File (path);
	return f.exists();
@

