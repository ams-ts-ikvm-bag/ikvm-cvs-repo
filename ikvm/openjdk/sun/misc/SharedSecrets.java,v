head	1.13;
access;
symbols
	v8_1_5717_0:1.13
	v8_1:1.13.0.4
	v8_0_5449_1:1.13
	v8_0_5449_0:1.13
	v8_0:1.13.0.2
	v7_4_5196_0:1.12
	v7_4:1.12.0.2
	v7_3:1.10.0.6
	v7_2_4630_6:1.10
	v7_2_4630_5:1.10
	v7_2_4630_4:1.10
	v7_2_4630_3:1.10
	v7_2_4630_2:1.10
	v0_46_0_4:1.5
	v7_2_4630_1:1.10
	v7_2:1.10.0.4
	v7_1_4532_2:1.10
	v7_1_4532_1:1.10
	v7_1_4532_0:1.10
	v7_1:1.10.0.2
	v7_0_4335_3:1.9
	v7_0_4335_2:1.9
	v7_0_4335_1:1.9
	v0_46_0_2:1.5
	v7_0_4335_0:1.9
	v7_0:1.9.0.2
	v0_40_0_6:1.3
	v0_40_0_5:1.3
	v0_46_0_1:1.5
	v0_46_0_0:1.5
	v0_46:1.5.0.2
	v0_44_0_6:1.3
	v0_44_0_5:1.3
	v0_44_0_4:1.3
	v0_44_0_3:1.3
	v0_44_0_2:1.3
	v0_42_0_7:1.3
	v0_44_0_1:1.3
	v0_44_0_0:1.3
	v0_44:1.3.0.8
	v0_42_0_6:1.3
	v0_42_0_5:1.3
	v0_42_0_4:1.3
	v0_42_0_3:1.3
	v0_42_0_2:1.3
	v0_42_0_1:1.3
	v0_42_0_0:1.3
	v0_42:1.3.0.6
	v0_40_0_3:1.3
	v0_40_0_2:1.3
	v0_40_0_1:1.3
	v0_40_0_0:1.3
	v0_40:1.3.0.4
	v0_38_0_1:1.3
	v0_38_0_0:1.3
	v0_38:1.3.0.2;
locks; strict;
comment	@# @;


1.13
date	2014.05.19.12.43.41;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2014.02.07.14.14.12;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2013.08.15.10.09.11;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2012.05.23.10.00.03;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2011.07.07.07.53.00;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2011.07.07.07.04.32;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2011.07.01.14.03.41;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2011.07.01.08.56.51;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2011.03.02.07.32.51;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2011.01.24.16.40.23;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2008.06.11.09.05.45;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2008.04.23.04.25.22;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2008.03.30.06.59.18;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.13
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 2002, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package sun.misc;

import java.util.jar.JarFile;
import java.io.Console;
import java.security.ProtectionDomain;

import java.security.AccessController;

/** A repository of "shared secrets", which are a mechanism for
    calling implementation-private methods in another package without
    using reflection. A package-private class implements a public
    interface and provides the ability to call package-private methods
    within that package; the object implementing that interface is
    provided through a third package to which access is restricted.
    This framework avoids the primary disadvantage of using reflection
    for this purpose, namely the loss of compile-time checking. */

public class SharedSecrets {
    private static final Unsafe unsafe = Unsafe.getUnsafe();
    private static JavaUtilJarAccess javaUtilJarAccess;
    private static JavaLangAccess javaLangAccess = LangHelper.getJavaLangAccess();
    private static JavaIOAccess javaIOAccess;
    private static JavaNetAccess javaNetAccess;
    private static JavaNetHttpCookieAccess javaNetHttpCookieAccess;
    private static JavaNioAccess javaNioAccess;
    private static JavaSecurityProtectionDomainAccess javaSecurityProtectionDomainAccess;
    private static JavaSecurityAccess javaSecurityAccess;
    private static JavaUtilZipFileAccess javaUtilZipFileAccess;
    private static JavaAWTAccess javaAWTAccess;

    public static JavaUtilJarAccess javaUtilJarAccess() {
        if (javaUtilJarAccess == null) {
            // Ensure JarFile is initialized; we know that that class
            // provides the shared secret
            unsafe.ensureClassInitialized(JarFile.class);
        }
        return javaUtilJarAccess;
    }

    public static void setJavaUtilJarAccess(JavaUtilJarAccess access) {
        javaUtilJarAccess = access;
    }

    public static JavaLangAccess getJavaLangAccess() {
        return javaLangAccess;
    }

    public static void setJavaNetAccess(JavaNetAccess jna) {
        javaNetAccess = jna;
    }

    public static JavaNetAccess getJavaNetAccess() {
        return javaNetAccess;
    }

    public static void setJavaNetHttpCookieAccess(JavaNetHttpCookieAccess a) {
        javaNetHttpCookieAccess = a;
    }

    public static JavaNetHttpCookieAccess getJavaNetHttpCookieAccess() {
        if (javaNetHttpCookieAccess == null)
            unsafe.ensureClassInitialized(java.net.HttpCookie.class);
        return javaNetHttpCookieAccess;
    }

    public static void setJavaNioAccess(JavaNioAccess jna) {
        javaNioAccess = jna;
    }

    public static JavaNioAccess getJavaNioAccess() {
        if (javaNioAccess == null) {
            // [IKVM] OpenJDK initializes java.nio.ByteOrder here, but that doesn't work
            java.nio.ByteOrder.nativeOrder();
        }
        return javaNioAccess;
    }

    public static void setJavaIOAccess(JavaIOAccess jia) {
        javaIOAccess = jia;
    }

    public static JavaIOAccess getJavaIOAccess() {
        if (javaIOAccess == null) {
            unsafe.ensureClassInitialized(Console.class);
        }
        return javaIOAccess;
    }

    public static void setJavaSecurityProtectionDomainAccess
        (JavaSecurityProtectionDomainAccess jspda) {
            javaSecurityProtectionDomainAccess = jspda;
    }

    public static JavaSecurityProtectionDomainAccess
        getJavaSecurityProtectionDomainAccess() {
            if (javaSecurityProtectionDomainAccess == null)
                unsafe.ensureClassInitialized(ProtectionDomain.class);
            return javaSecurityProtectionDomainAccess;
    }

    public static void setJavaSecurityAccess(JavaSecurityAccess jsa) {
        javaSecurityAccess = jsa;
    }

    public static JavaSecurityAccess getJavaSecurityAccess() {
        if (javaSecurityAccess == null) {
            // [IKVM] OpenJDK initializes AccessController here, but that's a bug
            unsafe.ensureClassInitialized(ProtectionDomain.class);
        }
        return javaSecurityAccess;
    }

    public static JavaUtilZipFileAccess getJavaUtilZipFileAccess() {
        if (javaUtilZipFileAccess == null)
            unsafe.ensureClassInitialized(java.util.zip.ZipFile.class);
        return javaUtilZipFileAccess;
    }

    public static void setJavaUtilZipFileAccess(JavaUtilZipFileAccess access) {
        javaUtilZipFileAccess = access;
    }

    public static void setJavaAWTAccess(JavaAWTAccess jaa) {
        javaAWTAccess = jaa;
    }

    public static JavaAWTAccess getJavaAWTAccess() {
        // this may return null in which case calling code needs to
        // provision for.
        if (javaAWTAccess == null) {
            return null;
        }
        return javaAWTAccess;
    }
}
@


1.12
log
@Merged OpenJDK 7u40 b34, except for java.lang.invoke and sun.invoke packages.
@
text
@a30 1
import javax.security.auth.kerberos.KeyTab;
a52 1
    private static JavaxSecurityAuthKerberosAccess javaxSecurityAuthKerberosAccess;
a137 12
    public static void setJavaxSecurityAuthKerberosAccess
            (JavaxSecurityAuthKerberosAccess jsaka) {
        javaxSecurityAuthKerberosAccess = jsaka;
    }

    public static JavaxSecurityAuthKerberosAccess
            getJavaxSecurityAuthKerberosAccess() {
        if (javaxSecurityAuthKerberosAccess == null)
            unsafe.ensureClassInitialized(KeyTab.class);
        return javaxSecurityAuthKerberosAccess;
    }

d155 1
a155 1
        if (javaAWTAccess == null || javaAWTAccess.getContext() == null) {
@


1.11
log
@Merged 7u40 AppContext and TimeZone decoupling mechanism.
@
text
@d55 1
d152 10
@


1.10
log
@Integrated OpenJDK 7u4. Not all forked files have been merged yet, just the ones necessary to get things building.
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2011, Oracle and/or its affiliates. All rights reserved.
d55 1
d150 13
@


1.9
log
@Made sun.misc.Unsafe.ensureClassInitialized() into an intrinsic.
@
text
@d50 1
d81 10
@


1.8
log
@Updated java.nio.Bits to OpenJDK 7.
@
text
@d86 2
a87 4
            // Ensure java.nio.ByteOrder is initialized; we know that
            // this class initializes java.nio.Bits that provides the
            // shared secret.
            unsafe.ensureClassInitialized(java.nio.ByteOrder.class);
d121 2
a122 1
            unsafe.ensureClassInitialized(AccessController.class);
@


1.7
log
@Updated java.security package and a massive amount of dependencies to OpenJDK 7.
@
text
@d50 1
d80 14
@


1.6
log
@Updated java.io package to OpenJDK 7.
@
text
@d31 1
d33 1
a33 1
import java.security.AccessControlContext;
d52 1
d108 1
a108 1
            unsafe.ensureClassInitialized(AccessControlContext.class);
d112 12
@


1.5
log
@Update to OpenJDK 6 b22.
@
text
@d2 1
a2 1
 * Copyright (c) 2002, 2010, Oracle and/or its affiliates. All rights reserved.
a29 1
import java.io.File;
a47 1
    private static JavaIODeleteOnExitAccess javaIODeleteOnExitAccess;
a87 11
    public static void setJavaIODeleteOnExitAccess(JavaIODeleteOnExitAccess jida) {
        javaIODeleteOnExitAccess = jida;
    }

    public static JavaIODeleteOnExitAccess getJavaIODeleteOnExitAccess() {
        if (javaIODeleteOnExitAccess == null) {
            unsafe.ensureClassInitialized(File.class);
        }
        return javaIODeleteOnExitAccess;
    }

d95 3
a97 4
        if (javaSecurityProtectionDomainAccess == null)
            unsafe.ensureClassInitialized(ProtectionDomain.class);

        return javaSecurityProtectionDomainAccess;
@


1.4
log
@Integrated OpenJDK 6 b21.
@
text
@d33 2
d52 1
d113 11
@


1.3
log
@Converted tabs to spaces.
@
text
@d2 1
a2 1
 * Copyright 2002-2006 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
d31 1
d49 1
d97 13
@


1.2
log
@Refactored class library initialization.
@
text
@d81 1
a81 1
	}
d91 1
a91 1
	    unsafe.ensureClassInitialized(File.class);
@


1.1
log
@Forked OpenJDK sources that are going to be modified to refactor the library initialization.
@
text
@d44 1
a44 1
    private static JavaLangAccess javaLangAccess;
a61 4
    public static void setJavaLangAccess(JavaLangAccess jla) {
        javaLangAccess = jla;
    }

@

