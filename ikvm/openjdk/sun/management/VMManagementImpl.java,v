head	1.6;
access;
symbols
	v8_1_5717_0:1.6
	v8_1:1.6.0.4
	v8_0_5449_1:1.6
	v8_0_5449_0:1.6
	v8_0:1.6.0.2
	v7_4_5196_0:1.5
	v7_4:1.5.0.2
	v7_3:1.4.0.8
	v7_2_4630_6:1.4
	v7_2_4630_5:1.4
	v7_2_4630_4:1.4
	v7_2_4630_3:1.4
	v7_2_4630_2:1.4
	v0_46_0_4:1.3
	v7_2_4630_1:1.4
	v7_2:1.4.0.6
	v7_1_4532_2:1.4
	v7_1_4532_1:1.4
	v7_1_4532_0:1.4
	v7_1:1.4.0.4
	v7_0_4335_3:1.4
	v7_0_4335_2:1.4
	v7_0_4335_1:1.4
	v0_46_0_2:1.3
	v7_0_4335_0:1.4
	v7_0:1.4.0.2
	v0_46_0_1:1.3
	v0_46_0_0:1.3
	v0_46:1.3.0.2
	v0_44_0_6:1.2
	v0_44_0_5:1.2
	v0_44_0_4:1.2
	v0_44_0_3:1.2
	v0_44_0_2:1.2
	v0_44_0_1:1.2
	v0_44_0_0:1.2
	v0_44:1.2.0.2;
locks; strict;
comment	@# @;


1.6
date	2014.05.19.12.43.40;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2013.05.06.10.16.54;	author smallsql;	state Exp;
branches;
next	1.4;

1.4
date	2011.06.30.09.28.43;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2011.01.24.16.40.23;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.04.30.07.59.03;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2010.04.30.07.46.54;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.6
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * Copyright (c) 2003, 2013, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package sun.management;

import sun.misc.Perf;
import sun.management.counter.*;
import java.nio.ByteBuffer;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;
import java.util.Arrays;
import java.util.Collections;
import java.security.AccessController;
import java.security.PrivilegedAction;
import sun.security.action.GetPropertyAction;

/**
 * Implementation of VMManagement interface that accesses the management
 * attributes and operations locally within the same Java virtual
 * machine.
 */
class VMManagementImpl implements VMManagement {

    private static String version = "1.2";

    private static boolean compTimeMonitoringSupport;
    private static boolean threadContentionMonitoringSupport;
    private static boolean currentThreadCpuTimeSupport = true;
    private static boolean otherThreadCpuTimeSupport;
    private static boolean bootClassPathSupport;
    private static boolean objectMonitorUsageSupport;
    private static boolean synchronizerUsageSupport;
    private static boolean threadAllocatedMemorySupport;
    private static boolean gcNotificationSupport;
    private static boolean remoteDiagnosticCommandsSupport;

    // Optional supports
    public boolean isCompilationTimeMonitoringSupported() {
        return compTimeMonitoringSupport;
    }

    public boolean isThreadContentionMonitoringSupported() {
        return threadContentionMonitoringSupport;
    }

    public boolean isCurrentThreadCpuTimeSupported() {
        return currentThreadCpuTimeSupport;
    }

    public boolean isOtherThreadCpuTimeSupported() {
        return otherThreadCpuTimeSupport;
    }

    public boolean isBootClassPathSupported() {
        return bootClassPathSupport;
    }

    public boolean isObjectMonitorUsageSupported() {
        return objectMonitorUsageSupport;
    }

    public boolean isSynchronizerUsageSupported() {
        return synchronizerUsageSupport;
    }

    public boolean isThreadAllocatedMemorySupported() {
        return threadAllocatedMemorySupport;
    }

    public boolean isGcNotificationSupported() {
        return gcNotificationSupport;
    }

    public boolean isRemoteDiagnosticCommandsSupported() {
        return remoteDiagnosticCommandsSupport;
    }

    public boolean isThreadContentionMonitoringEnabled() {
        return false;
    }

    public boolean isThreadCpuTimeEnabled() {
        return true;
    }

    public boolean isThreadAllocatedMemoryEnabled() {
        return false;
    }

    // Class Loading Subsystem
    public int    getLoadedClassCount() {
        long count = getTotalClassCount() - getUnloadedClassCount();
        return (int) count;
    }
    public long getTotalClassCount() {
        throw new Error("Not implemented");
    }
    public long getUnloadedClassCount() {
        throw new Error("Not implemented");
    }

    public boolean getVerboseClass() {
        return false;
    }

    // Memory Subsystem
    public boolean getVerboseGC() {
        return false;
    }

    // Runtime Subsystem
    public String   getManagementVersion() {
        return version;
    }

    public String getVmId() {
        int pid = getProcessId();
        String hostname = "localhost";
        try {
            hostname = InetAddress.getLocalHost().getHostName();
        } catch (UnknownHostException e) {
            // ignore
        }

        return pid + "@@" + hostname;
    }
    private int getProcessId() {
        return cli.System.Diagnostics.Process.GetCurrentProcess().get_Id();
    }

    public String   getVmName() {
        return System.getProperty("java.vm.name");
    }

    public String   getVmVendor() {
        return System.getProperty("java.vm.vendor");
    }
    public String   getVmVersion() {
        return System.getProperty("java.vm.version");
    }
    public String   getVmSpecName()  {
        return System.getProperty("java.vm.specification.name");
    }
    public String   getVmSpecVendor() {
        return System.getProperty("java.vm.specification.vendor");
    }
    public String   getVmSpecVersion() {
        return System.getProperty("java.vm.specification.version");
    }
    public String   getClassPath() {
        return System.getProperty("java.class.path");
    }
    public String   getLibraryPath()  {
        return System.getProperty("java.library.path");
    }

    public String   getBootClassPath( ) {
        PrivilegedAction<String> pa
            = new GetPropertyAction("sun.boot.class.path");
        String result =  AccessController.doPrivileged(pa);
        return result;
    }

    public long getUptime() {
        return cli.System.DateTime.get_Now().Subtract(cli.System.Diagnostics.Process.GetCurrentProcess().get_StartTime()).get_Ticks() / 10000L;
    }

    private List<String> vmArgs = null;
    public synchronized List<String> getVmArguments() {
        if (vmArgs == null) {
            String[] args = getVmArguments0();
            List<String> l = ((args != null && args.length != 0) ? Arrays.asList(args) :
                                        Collections.<String>emptyList());
            vmArgs = Collections.unmodifiableList(l);
        }
        return vmArgs;
    }
    public String[] getVmArguments0() {
        return new String[0];
    }

    public long getStartupTime() {
        return (long)(cli.System.Diagnostics.Process.GetCurrentProcess().get_StartTime().ToUniversalTime().Subtract(new cli.System.DateTime(1970, 1, 1))).get_TotalMilliseconds();
    }
    public int getAvailableProcessors() {
        return cli.System.Environment.get_ProcessorCount();
    }

    // Compilation Subsystem
    public String   getCompilerName() {
        String name =  AccessController.doPrivileged(
            new PrivilegedAction<String>() {
                public String run() {
                    return System.getProperty("sun.management.compiler");
                }
            });
        return name;
    }
    public long getTotalCompileTime() {
        throw new Error("Not implemented");
    }

    // Thread Subsystem
    public long getTotalThreadCount() {
        throw new Error("Not implemented");
    }
    public int  getLiveThreadCount() {
        throw new Error("Not implemented");
    }
    public int  getPeakThreadCount() {
        throw new Error("Not implemented");
    }
    public int  getDaemonThreadCount() {
        throw new Error("Not implemented");
    }

    // Operating System
    public String getOsName() {
        return System.getProperty("os.name");
    }
    public String getOsArch() {
        return System.getProperty("os.arch");
    }
    public String getOsVersion() {
        return System.getProperty("os.version");
    }

    // Hotspot-specific runtime support
    public long getSafepointCount() {
        throw new Error("Not implemented");
    }
    public long getTotalSafepointTime() {
        throw new Error("Not implemented");
    }
    public long getSafepointSyncTime() {
        throw new Error("Not implemented");
    }
    public long getTotalApplicationNonStoppedTime() {
        throw new Error("Not implemented");
    }

    public long getLoadedClassSize() {
        throw new Error("Not implemented");
    }
    public long getUnloadedClassSize() {
        throw new Error("Not implemented");
    }
    public long getClassLoadingTime() {
        throw new Error("Not implemented");
    }
    public long getMethodDataSize() {
        throw new Error("Not implemented");
    }
    public long getInitializedClassCount() {
        throw new Error("Not implemented");
    }
    public long getClassInitializationTime() {
        throw new Error("Not implemented");
    }
    public long getClassVerificationTime() {
        throw new Error("Not implemented");
    }

    public List<Counter> getInternalCounters(String pattern) {
        return Collections.emptyList();
    }
}
@


1.5
log
@Implementing of getCurrentThreadCpuTime
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2011, Oracle and/or its affiliates. All rights reserved.
d59 1
d98 4
d188 4
@


1.4
log
@Updated java.lang.management package to OpenJDK 7.
@
text
@d52 1
a52 1
    private static boolean currentThreadCpuTimeSupport;
d102 1
a102 1
        return false;
@


1.3
log
@Integrated OpenJDK 6 b21.
@
text
@d2 1
a2 1
 * Copyright (c) 2003, 2006, Oracle and/or its affiliates. All rights reserved.
d57 2
d89 8
d105 3
@


1.2
log
@Implemented RuntimeMXBrean. Feature request #2994310.
@
text
@d2 1
a2 1
 * Copyright 2003-2006 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.1
log
@Prepare for forking.
@
text
@a29 1
import sun.management.counter.perf.*;
d48 1
a48 1
    private static String version;
a57 10
    static {
        version = getVersion0();
        if (version == null) {
            throw new InternalError("Invalid Management Version");
        }
        initOptionalSupportFields();
    }
    private native static String getVersion0();
    private native static void initOptionalSupportFields();

d87 7
a93 2
    public native boolean isThreadContentionMonitoringEnabled();
    public native boolean isThreadCpuTimeEnabled();
d101 6
a106 2
    public native long getTotalClassCount();
    public native long getUnloadedClassCount();
d108 3
a110 1
    public native boolean getVerboseClass();
d113 3
a115 1
    public native boolean getVerboseGC();
d133 3
a135 1
    private native int getProcessId();
d180 3
a182 1
    public native String[] getVmArguments0();
d184 6
a189 2
    public native long getStartupTime();
    public native int getAvailableProcessors();
d201 3
a203 1
    public native long getTotalCompileTime();
d206 12
a217 4
    public native long getTotalThreadCount();
    public native int  getLiveThreadCount();
    public native int  getPeakThreadCount();
    public native int  getDaemonThreadCount();
d231 12
a242 21
    public native long getSafepointCount();
    public native long getTotalSafepointTime();
    public native long getSafepointSyncTime();
    public native long getTotalApplicationNonStoppedTime();

    public native long getLoadedClassSize();
    public native long getUnloadedClassSize();
    public native long getClassLoadingTime();
    public native long getMethodDataSize();
    public native long getInitializedClassCount();
    public native long getClassInitializationTime();
    public native long getClassVerificationTime();

    // Performance Counter Support
    private PerfInstrumentation perfInstr = null;
    private boolean noPerfData = false;

    private synchronized PerfInstrumentation getPerfInstrumentation() {
        if (noPerfData || perfInstr != null) {
             return perfInstr;
        }
d244 20
a263 17
        // construct PerfInstrumentation object
        Perf perf =  AccessController.doPrivileged(new Perf.GetPerfAction());
        try {
            ByteBuffer bb = perf.attach(0, "r");
            if (bb.capacity() == 0) {
                noPerfData = true;
                return null;
            }
            perfInstr = new PerfInstrumentation(bb);
        } catch (IllegalArgumentException e) {
            // If the shared memory doesn't exist e.g. if -XX:-UsePerfData
            // was set
            noPerfData = true;
        } catch (IOException e) {
            throw new InternalError(e.getMessage());
        }
        return perfInstr;
d267 1
a267 6
        PerfInstrumentation perf = getPerfInstrumentation();
        if (perf != null) {
            return perf.findByPattern(pattern);
        } else {
            return Collections.emptyList();
        }
@

