head	1.6;
access;
symbols
	v7_3:1.5.0.10
	v7_2_4630_6:1.5
	v7_2_4630_5:1.5
	v7_2_4630_4:1.5
	v7_2_4630_3:1.5
	v7_2_4630_2:1.5
	v0_46_0_4:1.5
	v7_2_4630_1:1.5
	v7_2:1.5.0.8
	v7_1_4532_2:1.5
	v7_1_4532_1:1.5
	v7_1_4532_0:1.5
	v7_1:1.5.0.6
	v7_0_4335_3:1.5
	v7_0_4335_2:1.5
	v7_0_4335_1:1.5
	v0_46_0_2:1.5
	v7_0_4335_0:1.5
	v7_0:1.5.0.4
	v0_40_0_6:1.3
	v0_40_0_5:1.3
	v0_46_0_1:1.5
	v0_46_0_0:1.5
	v0_46:1.5.0.2
	v0_36_0_14:1.1
	v0_44_0_6:1.4
	v0_44_0_5:1.4
	v0_44_0_4:1.4
	v0_44_0_3:1.4
	v0_44_0_2:1.4
	v0_42_0_7:1.3
	v0_44_0_1:1.4
	v0_44_0_0:1.4
	v0_44:1.4.0.2
	v0_42_0_6:1.3
	v0_42_0_5:1.3
	v0_42_0_4:1.3
	v0_42_0_3:1.3
	v0_42_0_2:1.3
	v0_42_0_1:1.3
	v0_42_0_0:1.3
	v0_42:1.3.0.4
	v0_40_0_3:1.3
	v0_40_0_2:1.3
	v0_40_0_1:1.3
	v0_40_0_0:1.3
	v0_40:1.3.0.2
	v0_36_0_13:1.1
	v0_38_0_1:1.2
	v0_38_0_0:1.2
	v0_38:1.2.0.2
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.2;
locks; strict;
comment	@# @;


1.6
date	2013.08.13.11.25.24;	author jfrijters;	state dead;
branches;
next	1.5;

1.5
date	2011.01.24.16.40.22;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2010.04.02.03.54.06;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2009.01.04.18.26.40;	author smallsql;	state Exp;
branches;
next	1.2;

1.2
date	2008.06.11.09.04.59;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2007.07.31.06.14.32;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.6
log
@Unforked com/sun/imageio/plugins/jpeg/JPEGImageReaderSpi.java and com/sun/imageio/plugins/jpeg/JPEGImageWriterSpi.java.
@
text
@/*
 * Copyright (c) 2000, 2004, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package com.sun.imageio.plugins.jpeg;

import java.util.Locale;
import javax.imageio.spi.ImageReaderSpi;
import javax.imageio.stream.ImageInputStream;
import javax.imageio.spi.IIORegistry;
import javax.imageio.spi.ServiceRegistry;
import java.io.IOException;
import javax.imageio.ImageReader;
import javax.imageio.IIOException;

public class JPEGImageReaderSpi extends ImageReaderSpi {

    private static String [] writerSpiNames =
        {"com.sun.imageio.plugins.jpeg.JPEGImageWriterSpi"};

    private boolean registered = false;

    public JPEGImageReaderSpi() {
        super(JPEG.vendor,
              JPEG.version,
              JPEG.names,
              JPEG.suffixes,
              JPEG.MIMETypes,
              "com.sun.imageio.plugins.jpeg.JPEGImageReader",
              new Class[] { ImageInputStream.class },
              writerSpiNames,
              true,
              JPEG.nativeStreamMetadataFormatName,
              JPEG.nativeStreamMetadataFormatClassName,
              null, null,
              true,
              JPEG.nativeImageMetadataFormatName,
              JPEG.nativeImageMetadataFormatClassName,
              null, null
              );
    }

    public void onRegistration(ServiceRegistry registry,
                               Class<?> category) {
        if (registered) {
            return;
        }
    /*
        try {
            java.security.AccessController.doPrivileged(
                new sun.security.action.LoadLibraryAction("jpeg"));
            // Stuff it all into one lib for first pass
            //java.security.AccessController.doPrivileged(
            //new sun.security.action.LoadLibraryAction("imageioIJG"));
        } catch (Throwable e) { // Fail on any Throwable
            // if it can't be loaded, deregister and return
            registry.deregisterServiceProvider(this);
            return;
        }
     */

        registered = true;
    }

    public String getDescription(Locale locale) {
        return "Standard JPEG Image Reader";
    }

    public boolean canDecodeInput(Object source) throws IOException {
        if (!(source instanceof ImageInputStream)) {
            return false;
        }
        ImageInputStream iis = (ImageInputStream) source;
        iis.mark();
        // If the first two bytes are a JPEG SOI marker, it's probably
        // a JPEG file.  If they aren't, it definitely isn't a JPEG file.
        int byte1 = iis.read();
        int byte2 = iis.read();
        iis.reset();
        if ((byte1 == 0xFF) && (byte2 == JPEG.SOI)) {
            return true;
        }
        return false;
    }

    public ImageReader createReaderInstance(Object extension)
        throws IIOException {
        return new JPEGImageReader(this);
    }

}
@


1.5
log
@Integrated OpenJDK 6 b21.
@
text
@@


1.4
log
@Integrated OpenJDK 6 b18.
@
text
@d2 1
a2 1
 * Copyright 2000-2004 Sun Microsystems, Inc.  All Rights Reserved.
d7 1
a7 1
 * published by the Free Software Foundation.  Sun designates this
d9 1
a9 1
 * by Sun in the LICENSE file that accompanied this code.
d21 3
a23 3
 * Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,
 * CA 95054 USA or visit www.sun.com if you need additional information or
 * have any questions.
@


1.3
log
@JPEG support added to ImageIO
@
text
@d51 1
a51 1
              STANDARD_INPUT_TYPE,
@


1.2
log
@Converted tabs to spaces.
@
text
@d39 1
a39 1
    private static String [] writerSpiNames = 
d43 1
a43 1
    
d87 1
a87 1
        return "Standard JPEG Image Reader (not implemented)";
d106 2
a107 2
    
    public ImageReader createReaderInstance(Object extension) 
d109 1
a109 1
        throw new Error("Not implemented");
@


1.1
log
@Integrated OpenJDK javax.imageio package (excluding the jpeg support, because OpenJDK uses native code for that).
@
text
@d109 1
a109 1
	throw new Error("Not implemented");
@

