head	1.4;
access;
symbols
	initial:1.1.1.1 ikvm:1.1.1;
locks; strict;
comment	@ * @;


1.4
date	2003.12.19.22.19.18;	author jfrijters;	state dead;
branches;
next	1.3;

1.3
date	2003.05.30.12.09.00;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2003.05.13.09.55.49;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.16.01.24;	author jfrijters;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.12.18.16.01.24;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@using System;
using System.Runtime.InteropServices;
using System.Collections;

// TODO implement this properly, instead of this quick hack
public class WeakHashtable : IDictionary
{
	private struct Pair
	{
		private GCHandle keyHandle;
		internal object Value;

		internal object Key
		{
			get
			{
				return keyHandle.IsAllocated ? keyHandle.Target : null;
			}
			set
			{
				if(!keyHandle.IsAllocated)
				{
					keyHandle = GCHandle.Alloc(value, GCHandleType.Weak);
				}
				else
				{
					keyHandle.Target = value;
				}
			}
		}

		internal bool IsAllocated
		{
			get
			{
				return keyHandle.IsAllocated;
			}
		}

		internal void Free()
		{
			if(keyHandle.IsAllocated)
			{
				keyHandle.Free();
			}
		}
	}

	private Pair[] data = new Pair[101];

	public WeakHashtable()
	{
	}

	~WeakHashtable()
	{
		foreach(Pair p in data)
		{
			p.Free();
		}
	}

	IEnumerator IEnumerable.GetEnumerator()
	{
		return this.GetEnumerator();
	}

	public IDictionaryEnumerator GetEnumerator()
	{
		throw new NotImplementedException();
	}

	public void Remove(object key)
	{
		throw new NotImplementedException();	
	}

	public bool Contains(object key)
	{
		return ContainsKey(key);
	}

	public bool ContainsKey(object key)
	{
		lock(this)
		{
			int index = FindKey(key);
			return index != -1 && data[index].Key != null;
		}
	}

	public void Clear()
	{
		throw new NotImplementedException();	
	}

	public void Add(object key, object value)
	{
		lock(this)
		{
			int index = FindKey(key);
			if(index != -1 && data[index].Key != null)
			{
				throw new ArgumentException();
			}
			int newSize = data.Length;
			while(index == -1)
			{
				Rehash(newSize);
				newSize = data.Length * 2 - 1;
				index = FindKey(key);
			}
			data[index].Key = key;
			data[index].Value = value;
		}
	}

	public bool IsReadOnly
	{
		get
		{
			return false;
		}
	}

	// this returns the slot containing the key,
	// the empty slot that should contain the key, or -1 if the
	// table is too full to contain the key
	private int FindKey(object key)
	{
		int start = key.GetHashCode() % data.Length;
		int end = (start + 5) % data.Length;
		for(int index = start; ; index = (index + 1) % data.Length)
		{
			if(!data[index].IsAllocated)
			{
				return index;
			}
			if(key.Equals(data[index].Key))
			{
				return index;
			}
			if(index == end)
			{
				return -1;
			}
		}
	}

	private void Rehash(int newSize)
	{
		Profiler.Enter("WeakHashtable.Rehash");
		try
		{
			Pair[] curr = data;
		restart:
			data = new Pair[newSize];
			for(int i = 0; i < curr.Length; i++)
			{
				if(curr[i].IsAllocated)
				{
					object key = curr[i].Key;
					if(key != null)
					{
						int index = FindKey(key);
						if(index == -1)
						{
							newSize = newSize * 2 - 1;
							goto restart;
						}
						data[index] = curr[i];
					}
					else
					{
						curr[i].Free();
					}
				}
			}
		}
		finally
		{
			Profiler.Leave("WeakHashtable.Rehash");
		}
	}

	public object this[object key]
	{
		get
		{
			lock(this)
			{
				int index = FindKey(key);
				return index == -1 ? null : data[index].Value;
			}
		}
		set
		{
			lock(this)
			{
				int index = FindKey(key);
				int newSize = data.Length;
				while(index == -1)
				{
					Rehash(newSize);
					newSize = data.Length * 2 - 1;
					index = FindKey(key);
				}
				data[index].Key = key;
				data[index].Value = value;
			}
		}
	}

	public ICollection Values
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	public ICollection Keys
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	public bool IsFixedSize
	{
		get
		{
			return false;
		}
	}

	public void CopyTo(Array array, int index)
	{
		throw new NotImplementedException();	
	}

	public bool IsSynchronized
	{
		get
		{
			return true;
		}
	}

	public int Count
	{
		get
		{
			throw new NotImplementedException();
		}
	}

	public object SyncRoot
	{
		get
		{
			return this;
		}
	}
}
@


1.3
log
@*** empty log message ***
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d8 42
a49 2
	private GCHandle[] keys = new GCHandle[101];
	private object[] values = new object[101];
d57 1
a57 1
		foreach(GCHandle h in keys)
d59 1
a59 4
			if(h.IsAllocated)
			{
				h.Free();
			}
d88 1
a88 1
			return index != -1 && keys[index].IsAllocated && keys[index].Target != null;
d102 1
a102 1
			if(index != -1 && keys[index].IsAllocated && keys[index].Target != null)
d106 1
a106 1
			int newSize = keys.Length;
d110 1
a110 1
				newSize = keys.Length * 2 - 1;
d113 2
a114 6
			if(keys[index].IsAllocated)
			{
				keys[index].Free();
			}
			keys[index] = GCHandle.Alloc(key, GCHandleType.Weak);
			values[index] = value;
d131 3
a133 3
		int start = key.GetHashCode() % keys.Length;
		int end = (start + 5) % keys.Length;
		for(int index = start; ; index = (index + 1) % keys.Length)
d135 1
a135 1
			if(!keys[index].IsAllocated)
d139 1
a139 1
			if(key.Equals(keys[index].Target))
d152 2
a153 6
		GCHandle[] currKeys = keys;
		object[] currValues = values;
	restart:
		keys = new GCHandle[newSize];
		values = new object[newSize];
		for(int i = 0; i < currKeys.Length; i++)
d155 4
a158 1
			if(currKeys[i].IsAllocated)
d160 1
a160 2
				object key = currKeys[i].Target;
				if(key != null)
d162 12
a173 2
					int index = FindKey(key);
					if(index == -1)
d175 1
a175 2
						newSize = newSize * 2 - 1;
						goto restart;
a176 6
					keys[index] = currKeys[i];
					values[index] = currValues[i];
				}
				else
				{
					currKeys[i].Free();
d180 4
d193 1
a193 5
				if(index >= 0)
				{
					return values[index];
				}
				return null;
d201 1
a201 1
				int newSize = keys.Length;
d205 1
a205 1
					newSize = keys.Length * 2 - 1;
d208 2
a209 6
				if(keys[index].IsAllocated)
				{
					keys[index].Free();
				}
				keys[index] = GCHandle.Alloc(key, GCHandleType.Weak);
				values[index] = value;
@


1.1
log
@Initial revision
@
text
@d2 1
d8 4
a11 1
	private struct KeyValue
a12 2
		public WeakReference Key;
		public object Value;
a13 1
	private KeyValue[] items = new KeyValue[101];
d15 1
a15 1
	public WeakHashtable()
d17 7
d51 1
a51 1
			return index != -1 && items[index].Key != null && items[index].Key.Target != null;
d65 1
a65 1
			if(index != -1 && items[index].Key != null && items[index].Key.Target != null)
d69 1
a69 1
			int newSize = items.Length;
d73 1
a73 1
				newSize = items.Length * 2 - 1;
d76 6
a81 2
			items[index].Key = new WeakReference(key);
			items[index].Value = value;
d98 3
a100 3
		int start = key.GetHashCode() % items.Length;
		int end = (start + 5) % items.Length;
		for(int index = start; ; index = (index + 1) % items.Length)
d102 1
a102 1
			if(items[index].Key == null)
d106 1
a106 1
			if(key.Equals(items[index].Key.Target))
d119 2
a120 1
		KeyValue[] curr = items;
d122 3
a124 2
		items = new KeyValue[newSize];
		for(int i = 0; i < curr.Length; i++)
d126 1
a126 1
			if(curr[i].Key != null)
d128 1
a128 1
				object key = curr[i].Key.Target;
d137 6
a142 2
					items[index].Key = new WeakReference(key);
					items[index].Value = curr[i].Value;
d157 1
a157 1
					return items[index].Value;
d167 1
a167 1
				int newSize = items.Length;
d171 1
a171 1
					newSize = items.Length * 2 - 1;
d174 6
a179 2
				items[index].Key = new WeakReference(key);
				items[index].Value = value;
@


1.1.1.1
log
@no message
@
text
@@
