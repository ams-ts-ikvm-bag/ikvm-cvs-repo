head	1.14;
access;
symbols
	initial:1.1.1.1 ikvm:1.1.1;
locks; strict;
comment	@ * @;


1.14
date	2003.08.05.14.07.23;	author jfrijters;	state dead;
branches;
next	1.13;

1.13
date	2003.07.31.12.49.29;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2003.07.22.09.49.14;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2003.04.14.09.41.58;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2003.03.17.14.04.27;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.27.16.41.49;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.15.16.21.07;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.15.11.19.23;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2003.01.17.14.36.11;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.02.13.48.19;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2002.12.29.16.28.36;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.28.11.10.34;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.27.09.09.02;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.16.01.19;	author jfrijters;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.12.18.16.01.19;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.14
log
@*** empty log message ***
@
text
@/*
  Copyright (C) 2002 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;
using System.Text;

public class StringHelper
{
	public static string substring(string s, int off, int end)
	{
		return s.Substring(off, end - off);
	}

	public static bool startsWith(string s, string prefix, int toffset)
	{
		if(toffset < 0)
		{
			return false;
		}
		return s.Substring(Math.Min(s.Length, toffset)).StartsWith(prefix);
	}

	public static char charAt(string s, int index)
	{
		try {
			return s[index];
		}
		catch (IndexOutOfRangeException) {
			throw JavaException.StringIndexOutOfBoundsException("");
		}
	}

	public static void getChars(string s, int srcBegin, int srcEnd, char[] dst, int dstBegin) 
	{
		s.CopyTo(srcBegin, dst, dstBegin, srcEnd - srcBegin);
	}

	public static int GetCountField(string s)
	{
		return s.Length;
	}

	public static char[] GetValueField(string s)
	{
		return s.ToCharArray();
	}

	public static int GetOffsetField(string s)
	{
		return 0;
	}

	public static int indexOf(string s, char ch, int fromIndex)
	{
		// Java allow fromIndex to both below zero or above the length of the string, .NET doesn't
		return s.IndexOf(ch, Math.Max(0, Math.Min(s.Length, fromIndex)));
	}

	public static int indexOf(string s, string o, int fromIndex)
	{
		// Java allow fromIndex to both below zero or above the length of the string, .NET doesn't
		return s.IndexOf(o, Math.Max(0, Math.Min(s.Length, fromIndex)));
	}

	public static int lastIndexOf(string s, char ch, int fromIndex)
	{
		// start by dereferencing s, to make sure we throw a NullPointerException if s is null
		int len = s.Length;
		if(fromIndex  < 0)
		{
			return -1;
		}
		// Java allow fromIndex to be above the length of the string, .NET doesn't
		return s.LastIndexOf(ch, Math.Min(len - 1, fromIndex));
	}

	public static int lastIndexOf(string s, string o)
	{
		return lastIndexOf(s, o, s.Length);
	}

	public static int lastIndexOf(string s, string o, int fromIndex)
	{
		// start by dereferencing s, to make sure we throw a NullPointerException if s is null
		int len = s.Length;
		if(fromIndex  < 0)
		{
			return -1;
		}
		if(o.Length == 0)
		{
			return Math.Min(len, fromIndex);
		}
		// Java allow fromIndex to be above the length of the string, .NET doesn't
		return s.LastIndexOf(o, Math.Min(len - 1, fromIndex + o.Length - 1));
	}

	public static string concat(string s1, string s2)
	{
		s1 = s1.ToString();
		if(s2.Length == 0)
		{
			return s1;
		}
		return String.Concat(s1, s2);
	}
}
@


1.13
log
@*** empty log message ***
@
text
@@


1.12
log
@*** empty log message ***
@
text
@a25 1
using System.Reflection;
a72 6
	public static object subSequence(string s, int offset, int count)
	{
		// TODO
		throw new NotImplementedException();
	}

a125 163
	}
}

public class StringBufferHelper
{
	private delegate string toHexStringDelegate(int i);
	private static toHexStringDelegate toHexString;

	public static int indexOf(StringBuilder thiz, string s)
	{
		return thiz.ToString().IndexOf(s);
	}

	public static int indexOf(StringBuilder thiz, string s, int off)
	{
		return thiz.ToString().IndexOf(s, off);
	}

	public static int lastIndexOf(StringBuilder thiz, string s)
	{
		// TODO make sure this is correct
		return thiz.ToString().LastIndexOf(s);
	}

	public static int lastIndexOf(StringBuilder thiz, string s, int fromIndex)
	{
		// TODO make sure this is correct
		return thiz.ToString().LastIndexOf(s, fromIndex);
	}

	public static StringBuilder append(StringBuilder thiz, object o)
	{
		if(o == null)
		{
			return thiz.Append("null");
		}
		if(o is Array)
		{
			if(toHexString == null)
			{
				toHexString = (toHexStringDelegate)Delegate.CreateDelegate(typeof(toHexStringDelegate), ClassLoaderWrapper.GetType("java.lang.Integer").GetMethod("toHexString"));
			}
			return thiz.Append(NativeCode.java.lang.VMClass.getName(o.GetType()) + "@@" + toHexString(o.GetHashCode()));
		}
		return thiz.Append(o);
	}

	public static StringBuilder append(StringBuilder thiz, string s)
	{
		if(s == null)
		{
			s = "null";
		}
		return thiz.Append(s);
	}

	public static StringBuilder append(StringBuilder thiz, bool b)
	{
		if(b)
		{
			return thiz.Append("true");
		}
		else
		{
			return thiz.Append("false");
		}
	}

	public static StringBuilder append(StringBuilder thiz, float f)
	{
		// TODO this is not correct, we need to use the Java algorithm of converting a float to string
		if(float.IsNaN(f))
		{
			thiz.Append("NaN");
			return thiz;
		}
		if(float.IsNegativeInfinity(f))
		{
			thiz.Append("-Infinity");
			return thiz;
		}
		if(float.IsPositiveInfinity(f))
		{
			thiz.Append("Infinity");
			return thiz;
		}
		// HACK really lame hack to apprioximate the Java behavior a little bit
		string s = f.ToString(System.Globalization.CultureInfo.InvariantCulture);
		thiz.Append(s);
		if(s.IndexOf('.') == -1)
		{
			thiz.Append(".0");
		}
		return thiz;
	}

	public static StringBuilder append(StringBuilder thiz, double d)
	{
		DoubleToString.append(thiz, d);
		return thiz;
	}

	public static StringBuilder insert(StringBuilder thiz, int index, string s)
	{
		if(s == null)
		{
			s = "null";
		}
		return thiz.Insert(index, s);
	}

	public static StringBuilder insert(StringBuilder thiz, int index, object o)
	{
		if(o == null)
		{
			o = "null";
		}
		return thiz.Insert(index, o);
	}

	public static string substring(StringBuilder thiz, int start, int end)
	{
		return thiz.ToString(start, end - start);
	}

	public static string substring(StringBuilder thiz, int start)
	{
		return thiz.ToString(start, thiz.Length - start);
	}

	public static StringBuilder replace(StringBuilder thiz, int start, int end, string str)
	{
		// OPTIMIZE this could be done a little more efficient
		thiz.Remove(start, end - start);
		thiz.Insert(start, str);
		return thiz;
	}

	public static StringBuilder delete(StringBuilder thiz, int start, int end)
	{
		return thiz.Remove(start, end - start);
	}

	public static StringBuilder deleteCharAt(StringBuilder thiz, int pos)
	{
		return thiz.Remove(pos, 1);
	}

	public static StringBuilder reverse(StringBuilder thiz)
	{
		for(int i = (thiz.Length / 2) - 1; i >=0; i--)
		{
			char c = thiz[i];
			thiz[i] = thiz[thiz.Length - 1 - i];
			thiz[thiz.Length - 1 - i] = c;
		}
		return thiz;
	}

	public static void getChars(StringBuilder thiz, int srcBegin, int srcEnd, char[] dst, int dstBegin)
	{
		string s = thiz.ToString(srcBegin, srcEnd - srcBegin);
		s.CopyTo(0, dst, dstBegin, s.Length);
@


1.11
log
@*** empty log message ***
@
text
@a133 11

//	private static object CASE_INSENSITIVE_ORDER;
//
//	public static object GetCaseInsensitiveOrder()
//	{
//		if(CASE_INSENSITIVE_ORDER == null)
//		{
//			CASE_INSENSITIVE_ORDER = Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.String$CaseInsensitiveComparator"), true);
//		}
//		return CASE_INSENSITIVE_ORDER;
//	}
d141 22
d244 9
d274 16
@


1.10
log
@*** empty log message ***
@
text
@a29 51
	public static string valueOf(bool b)
	{
		return b ? "true" : "false";
	}

	public static string valueOf(int i)
	{
		return i.ToString();
	}

	public static string valueOf(long l)
	{
		return l.ToString();
	}

	public static string valueOf(char c)
	{
		return c.ToString();
	}

	public static string valueOf(float f)
	{
		StringBuilder sb = new StringBuilder();
		return StringBufferHelper.append(sb, f).ToString();
	}

	public static string valueOf(double d)
	{
		StringBuilder sb = new StringBuilder();
		return StringBufferHelper.append(sb, d).ToString();
	}

	public static string valueOf(char[] c)
	{
		return new String(c);
	}

	public static string valueOf(char[] c, int offset, int count)
	{
		return new String(c, offset, count);
	}

	public static string valueOf(object o)
	{
		if(o == null)
		{
			return "null";
		}
		return ObjectHelper.toStringVirtual(o);
	}

a79 12
	// NOTE argument is of type object, because otherwise the code that calls this function
	// has to be much more complex
	public static int hashCode(object s)
	{
		int h = 0;
		foreach(char c in (string)s)
		{
			h = h * 31 + c;
		}
		return h;
	}

d135 10
a144 10
	private static object CASE_INSENSITIVE_ORDER;

	public static object GetCaseInsensitiveOrder()
	{
		if(CASE_INSENSITIVE_ORDER == null)
		{
			CASE_INSENSITIVE_ORDER = Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.String$CaseInsensitiveComparator"), true);
		}
		return CASE_INSENSITIVE_ORDER;
	}
d149 3
d156 9
a164 1
			o = "null";
d166 1
a166 1
		return thiz.Append(ObjectHelper.toStringVirtual(o));
@


1.9
log
@*** empty log message ***
@
text
@a29 94
	public static string NewString(char[] data, int offset, int count, bool dont_copy)
	{
		return new String(data, offset, count);
	}

	public static string NewString(sbyte[] sdata)
	{
		return NewString(sdata, 0, sdata.Length);
	}

	public static string NewString(sbyte[] sdata, int hibyte)
	{
		return NewString(sdata, hibyte, 0, sdata.Length);
	}

	public static string NewString(sbyte[] sdata, int offset, int count)
	{
		// TODO what encoding should this use?
		// TODO could use the unsafe constructor that takes sbyte*, but I don't know if that is worthwhile to be unsafe for
		byte[] data = new byte[sdata.Length];
		for(int i = 0; i < data.Length; i++)
		{
			data[i] = (byte)sdata[i];
		}
		try {
			return System.Text.Encoding.ASCII.GetString(data, offset, count);
		}
		catch {
			return null;
		}
	}

	public static string NewString(sbyte[] sdata, int hibyte, int offset, int count)
	{
		// TODO benchmark this versus using a stringbuilder instead of a char[]
		hibyte <<= 8;
		char[] data = new char[count];
		for(int i = 0; i < count; i++)
		{
			// TODO what happens for negative bytes?
			data[i] = (char)(((byte)sdata[i + offset]) | hibyte);
		}
		return new String(data);
	}

	public static string NewString(sbyte[] sdata, string charsetName)
	{
		return NewString(sdata, 0, sdata.Length, charsetName);
	}

	public static string NewString(sbyte[] sdata, int offset, int count, string charsetName)
	{
		// HACK special case for UTF8, I really need to implement this by
		// redirecting to the classpath character encoding support
		if(charsetName == "UTF8")
		{
			char[] ch = new Char[count];
			int l = 0;
			for(int i = 0; i < count; i++)
			{
				int c = (byte)sdata[offset + i];
				int char2, char3;
				switch (c >> 4)
				{
					case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:
						// 0xxxxxxx
						break;
					case 12: case 13:
						// 110x xxxx   10xx xxxx
						char2 = (byte)sdata[offset + ++i];
						c = (((c & 0x1F) << 6) | (char2 & 0x3F));
						break;
					case 14:
						// 1110 xxxx  10xx xxxx  10xx xxxx
						char2 = (byte)sdata[offset + ++i];
						char3 = (byte)sdata[offset + ++i];
						c = (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
						break;
				}
				ch[l++] = (char)c;
			}
			return new String(ch, 0, l);
		}
		// TODO don't use reflection, but write a Java helper class and redirect this method there
		Type t = ClassLoaderWrapper.GetType("gnu.java.io.EncodingManager");
		try {
			object decoder = t.InvokeMember("getDecoder", BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new object[] { charsetName });
			return new String((char[])decoder.GetType().InvokeMember("convertToChars", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public, null, decoder, new object[] { sdata, offset, count }));
		}
		catch (TargetInvocationException ex) {
			throw ExceptionHelper.MapExceptionFast(ex.InnerException);
		}
	}

a124 56
	public static bool equalsIgnoreCase(string s1, string s2)
	{
		return String.Compare(s1, s2, true) == 0;
	}

	public static int compareToIgnoreCase(string s1, string s2)
	{
		return String.Compare(s1, s2, true);
	}

	public static int compareTo(string s1, string s2)
	{
		int len = Math.Min(s1.Length, s2.Length);
		for(int i = 0; i < len; i++)
		{
			int diff = s1[i] - s2[i];
			if(diff != 0)
			{
				return diff;
			}
		}
		return s1.Length - s2.Length;
	}

	public static sbyte[] getBytes(string s)
	{
		byte[] data = System.Text.Encoding.ASCII.GetBytes(s);
		sbyte[] sdata = new sbyte[data.Length];
		for(int i = 0; i < data.Length; i++)
		{
			sdata[i] = (sbyte)data[i];
		}
		return sdata;
	}

	public static sbyte[] getBytes(string s, string charsetName)
	{
		// TODO don't use reflection, but write a Java helper class and redirect this method there
		char[] ch = s.ToCharArray();
		Type t = ClassLoaderWrapper.GetType("gnu.java.io.EncodingManager");
		object encoder = t.InvokeMember("getEncoder", BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new object[] { charsetName });
		return (sbyte[])encoder.GetType().InvokeMember("convertToBytes", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public, null, encoder, new object[] { ch, 0, ch.Length });
	}

	public static void getBytes(string s, int srcBegin, int srcEnd, sbyte[] dst, int dstBegin)
	{
		if(srcBegin > srcEnd)
		{
			throw JavaException.ArrayIndexOutOfBoundsException();
		}
		for(int i = 0; i < (srcEnd - srcBegin); i++)
		{
			dst[i + dstBegin] = (sbyte)s[i + srcBegin];
		}
	}

a130 23
	public static bool regionMatches(string s, int toffset, string other, int ooffset, int len)
	{
		return regionMatches(s, false, toffset, other, ooffset, len);
	}

	public static bool regionMatches(string s, bool ignoreCase, int toffset, string other, int ooffset, int len)
	{
		if(toffset < 0 || ooffset < 0 || toffset + len > s.Length || ooffset + len > other.Length)
		{
			return false;
		}
		while(--len >= 0)
		{
			char c1 = s[toffset++];
			char c2 = other[ooffset++];
			if(c1 != c2 && (!ignoreCase || (Char.ToLower(c1) != Char.ToLower(c2) && (Char.ToUpper(c1) != Char.ToUpper(c2)))))
			{
				return false;
			}
		}
		return true;
	}

a142 12
	public static string toUpperCase(string s, object locale)
	{
		// TODO
		return s.ToUpper();
	}

	public static string toLowerCase(string s, object locale)
	{
		// TODO
		return s.ToLower();
	}

d196 11
@


1.8
log
@no message
@
text
@d161 5
d182 5
a186 1
		return s.Substring(toffset).StartsWith(prefix);
d229 14
d265 4
d342 13
a354 2
		// Java allow fromIndex to both below zero or above the length of the string, .NET doesn't
		return s.LastIndexOf(ch, Math.Max(0, Math.Min(s.Length - 1, fromIndex)));
d359 22
a380 2
		// Java allow fromIndex to both below zero or above the length of the string, .NET doesn't
		return s.LastIndexOf(o, Math.Max(0, Math.Min(s.Length - 1, fromIndex)));
@


1.7
log
@no message
@
text
@d57 1
a57 1
		catch (Exception ex) {
d185 1
a185 1
		catch (IndexOutOfRangeException ex) {
@


1.6
log
@no message
@
text
@d54 6
a59 1
		return System.Text.Encoding.ASCII.GetString(data, offset, count);
d115 7
a121 2
		object decoder = t.InvokeMember("getDecoder", BindingFlags.InvokeMethod | BindingFlags.Public | BindingFlags.Static, null, null, new object[] { charsetName });
		return new String((char[])decoder.GetType().InvokeMember("convertToChars", BindingFlags.InvokeMethod | BindingFlags.Instance | BindingFlags.Public, null, decoder, new object[] { sdata, offset, count }));
d178 10
@


1.5
log
@no message
@
text
@d167 1
a167 2
		// TODO
		throw new NotImplementedException();
@


1.4
log
@no message
@
text
@d281 24
@


1.3
log
@no message
@
text
@d275 6
@


1.2
log
@no message
@
text
@d374 6
@


1.1
log
@Initial revision
@
text
@d146 5
@


1.1.1.1
log
@no message
@
text
@@
