head	1.19;
access;
symbols
	initial:1.1.1.1 ikvm:1.1.1;
locks; strict;
comment	@ * @;


1.19
date	2004.05.27.07.12.13;	author jfrijters;	state dead;
branches;
next	1.18;

1.18
date	2004.05.14.09.31.54;	author jfrijters;	state Exp;
branches;
next	1.17;

1.17
date	2004.03.16.17.10.10;	author jfrijters;	state Exp;
branches;
next	1.16;

1.16
date	2004.01.11.13.14.42;	author jfrijters;	state Exp;
branches;
next	1.15;

1.15
date	2003.12.24.11.51.41;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2003.12.19.22.19.18;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2003.08.13.15.00.42;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2003.08.05.14.07.22;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2003.05.30.12.09.00;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2003.04.14.09.41.58;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2003.02.27.16.41.48;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2003.02.25.16.53.27;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2003.02.15.16.23.16;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2003.02.15.11.20.24;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2003.01.17.14.36.13;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2003.01.02.13.50.03;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2002.12.29.16.30.10;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.27.09.09.02;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.16.01.17;	author jfrijters;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.12.18.16.01.17;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.19
log
@*** empty log message ***
@
text
@/*
  Copyright (C) 2002 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;
using System.Reflection;
using System.Diagnostics;
using System.Text;
using System.Collections;
using OpenSystem.Java;
using NetSystem = System;

namespace NativeCode.java.lang
{
	public class ExceptionHelper
	{
		public static bool IsNative(MethodBase m)
		{
			if(m.IsDefined(typeof(ModifiersAttribute), false))
			{
				object[] methodFlagAttribs = m.GetCustomAttributes(typeof(ModifiersAttribute), false);
				if(methodFlagAttribs.Length == 1)
				{
					ModifiersAttribute modifiersAttrib = (ModifiersAttribute)methodFlagAttribs[0];
					if((modifiersAttrib.Modifiers & Modifiers.Native) != 0)
					{
						return true;
					}
				}
			}
			return false;
		}

		public static string getClassNameFromType(Type type)
		{
			return TypeWrapper.GetNameFromType(type);
		}
	}
}

class ExceptionHelper
{
	static MethodInfo mapExceptionFastMethod;
	static MethodInfo printStackTraceMethod;

	static ExceptionHelper()
	{
		TypeWrapper tw = ClassLoaderWrapper.LoadClassCritical("java.lang.ExceptionHelper");
		tw.Finish();
		Type exceptionHelper = tw.TypeAsTBD;
		mapExceptionFastMethod = exceptionHelper.GetMethod("MapExceptionFast");
		printStackTraceMethod = exceptionHelper.GetMethod("printStackTrace", new Type[] { typeof(Exception) });
	}

	internal static void printStackTrace(Exception x)
	{
		try
		{
			printStackTraceMethod.Invoke(null, new object[] { x });
		}
		catch(TargetInvocationException t)
		{
			throw t.InnerException;
		}
	}

	// HACK this is used in ClassFile.cs and MemberWrapper.cs
	internal static Exception MapExceptionFast(Exception x)
	{
		try
		{
			return (Exception)mapExceptionFastMethod.Invoke(null, new object[] { x });
		}
		catch(TargetInvocationException t)
		{
			throw t.InnerException;
		}
	}
}
@


1.18
log
@*** empty log message ***
@
text
@@


1.17
log
@*** empty log message ***
@
text
@d60 1
a60 1
public class ExceptionHelper
d87 1
a87 1
	public static Exception MapExceptionFast(Exception x)
@


1.16
log
@*** empty log message ***
@
text
@d86 1
a86 1
	// HACK this is used by starter.cs (ikvm.exe) to map exceptions that escape from main
@


1.15
log
@*** empty log message ***
@
text
@a29 1
using ClassHelper = NativeCode.java.lang.VMClass;
a52 5
		public static Type @@typeof(object clazz)
		{
			return NativeCode.java.lang.VMClass.getType(clazz);
		}

d55 1
a55 1
			return ClassHelper.getName(type);
d69 1
a69 1
		Type exceptionHelper = tw.Type;
@


1.14
log
@*** empty log message ***
@
text
@d73 3
a75 1
		Type exceptionHelper = ClassLoaderWrapper.GetType("java.lang.ExceptionHelper");
d92 1
a102 7
	}

	// NOTE this is used by compiler.cs to obfuscate certain exceptions for the CLR verifier
	// (it doesn't like unreachable code)
	public static void ThrowHack(Exception x)
	{
		throw x;
@


1.13
log
@*** empty log message ***
@
text
@a28 1
using java.lang;
d31 1
d33 1
a33 1
public class ExceptionHelper
d35 1
a35 6
	// the contents of the NULL_STRING should be empty (because when the exception propagates to other .NET code
	// it will return that text as the Message property), but it *must* be a copy, because we need to be
	// able to distinguish it from a user specified blank string
	private static readonly string NULL_STRING = string.Copy("");

	private class ExceptionInfoHelper
d37 1
a37 59
		private static readonly Exception CAUSE_NOT_SET = new Exception();
		private StackTrace tracePart1;
		private StackTrace tracePart2;
		private ArrayList stackTrace;
		private Exception cause;

		[StackTraceInfo(Hidden = true)]
		internal ExceptionInfoHelper(Exception x)
		{
			Profiler.Enter("new ExceptionInfoHelper");
			try
			{
				tracePart1 = new StackTrace(x, true);
				tracePart2 = new StackTrace(true);
				cause = x.InnerException;
				if(cause == null)
				{
					cause = CAUSE_NOT_SET;
				}
			}
			finally
			{
				Profiler.Leave("new ExceptionInfoHelper");
			}	
		}

		internal Exception Cause
		{
			get
			{
				return cause == CAUSE_NOT_SET ? null : cause;
			}
			set
			{
				if(cause == CAUSE_NOT_SET)
				{
					cause = value;
				}
				else
				{
					throw JavaException.IllegalStateException("Throwable cause already initialized");
				}
			}
		}

		internal void ResetStackTrace()
		{
			stackTrace = null;
			tracePart1 = new StackTrace(true);
			tracePart2 = null;
		}

		private static bool IsPrivateScope(MethodBase mb)
		{
			// HACK shouldn't there be a better way to determine whether a method is privatescope?
			return !mb.IsPrivate && !mb.IsFamily && !mb.IsFamilyAndAssembly && !mb.IsFamilyOrAssembly && !mb.IsPublic;
		}

		private void Append(StackTrace st)
d39 1
a39 2
			Profiler.Enter("ExceptionInfoHelper.Append");
			try
d41 2
a42 1
				if(st.FrameCount > 0)
d44 2
a45 113
					int baseSize = stackTrace.Count;
					for(int i = 0; i < st.FrameCount; i++)
					{
						StackFrame frame = st.GetFrame(i);
						MethodBase m = frame.GetMethod();
						// TODO I may need more safety checks like these
						if(m == null || m.DeclaringType == null || m.ReflectedType == null)
						{
							continue;
						}
						if(JVM.CleanStackTraces && (m.DeclaringType == typeof(System.Runtime.CompilerServices.RuntimeHelpers)
							|| m.DeclaringType.IsSubclassOf(typeof(System.Reflection.MethodInfo))
							|| IsPrivateScope(m))) // NOTE we assume that privatescope methods are always stubs that we should exclude
						{
							continue;
						}
						string methodName = frame.GetMethod().Name;
						if(methodName == ".ctor")
						{
							methodName = "<init>";
						}
						else if(methodName == ".cctor")
						{
							methodName = "<clinit>";
						}
						int lineNumber = frame.GetFileLineNumber();
						if(lineNumber == 0)
						{
							lineNumber = -1;
						}
						string fileName = frame.GetFileName();
						if(fileName != null)
						{
							try
							{
								fileName = new System.IO.FileInfo(fileName).Name;
							}
							catch
							{
								// Mono returns "<unknown>" for frame.GetFileName() and the FileInfo constructor
								// doesn't like that
								fileName = null;
							}
						}
						string className = ClassHelper.getName(frame.GetMethod().ReflectedType);
						bool native = false;
						if(m.IsDefined(typeof(ModifiersAttribute), false))
						{
							object[] methodFlagAttribs = m.GetCustomAttributes(typeof(ModifiersAttribute), false);
							if(methodFlagAttribs.Length == 1)
							{
								ModifiersAttribute modifiersAttrib = (ModifiersAttribute)methodFlagAttribs[0];
								if((modifiersAttrib.Modifiers & Modifiers.Native) != 0)
								{
									native = true;
								}
							}
						}
						if(JVM.CleanStackTraces)
						{
							if(AttributeHelper.IsHideFromReflection(m))
							{
								continue;
							}
							object[] attribs = m.DeclaringType.GetCustomAttributes(typeof(StackTraceInfoAttribute), false);
							if(attribs.Length == 1)
							{
								StackTraceInfoAttribute sta = (StackTraceInfoAttribute)attribs[0];
								if(sta.EatFrames > 0)
								{
									stackTrace.RemoveRange(stackTrace.Count - sta.EatFrames, sta.EatFrames);
								}
								if(sta.Hidden)
								{
									continue;
								}
								if(sta.Truncate)
								{
									stackTrace.RemoveRange(baseSize, stackTrace.Count - baseSize);
									continue;
								}
								if(sta.Class != null)
								{
									className = sta.Class;
								}
							}
							attribs = m.GetCustomAttributes(typeof(StackTraceInfoAttribute), false);
							if(attribs.Length == 1)
							{
								StackTraceInfoAttribute sta = (StackTraceInfoAttribute)attribs[0];
								if(sta.EatFrames > 0)
								{
									int eat = Math.Min(stackTrace.Count, sta.EatFrames);
									stackTrace.RemoveRange(stackTrace.Count - eat, eat);
								}
								if(sta.Hidden)
								{
									continue;
								}
								if(sta.Truncate)
								{
									stackTrace.RemoveRange(baseSize, stackTrace.Count - baseSize);
									continue;
								}
								if(sta.Class != null)
								{
									className = sta.Class;
								}
							}
						}
						stackTrace.Add(new StackTraceElement(fileName, lineNumber, className, methodName, native));
					}
					if(JVM.CleanStackTraces)
d47 1
a47 15
						int chop = 0;
						for(int i = stackTrace.Count - 1; i >= 0; i--)
						{
							StackTraceElement ste = (StackTraceElement)stackTrace[i];
							if(ste.getClassName() == "System.Reflection.MethodBase")
							{
								// skip method invocation by reflection, if it is at the top of the stack
								chop++;
							}
							else
							{
								break;
							}
						}
						stackTrace.RemoveRange(stackTrace.Count - chop, chop);
d51 1
a51 4
			finally
			{
				Profiler.Leave("ExceptionInfoHelper.Append");
			}
d54 1
a54 1
		internal StackTraceElement[] StackTrace
d56 1
a56 27
			get
			{
				if(stackTrace == null)
				{
					stackTrace = new ArrayList();
					Append(tracePart1);
					if(tracePart2 != null)
					{
						// don't have a clue why this was here, but it doesn't work for jni.class
						//bool chopFirst = stackTrace.Count != 0;
						Append(tracePart2);
						//if(chopFirst && stackTrace.Count > 0 && JVM.CleanStackTraces)
						//{
						//	stackTrace.RemoveAt(0);
						//}
					}
					tracePart1 = null;
					tracePart2 = null;
				}
				return (StackTraceElement[])stackTrace.ToArray(typeof(StackTraceElement));
			}
			set
			{
				stackTrace = new ArrayList(value);
				tracePart1 = null;
				tracePart2 = null;
			}
a57 1
	}
d59 1
a59 6
	// TODO this should be an "identity" hashtable instead of "equality"
	private static WeakHashtable exceptions = new WeakHashtable();

	public static void printStackTrace(Exception x)
	{
		if(x == null)
d61 1
a61 1
			throw JavaException.NullPointerException();
a62 3
		Type type = ClassLoaderWrapper.GetType("java.lang.System");
		object err = type.GetProperty("err").GetValue(null, null);
		printStackTrace(x, err);
d64 1
d66 4
a69 61
	public static void printStackTrace(Exception x, object printStreamOrWriter)
	{
		if(x == null)
		{
			throw JavaException.NullPointerException();
		}
		StringBuilder sb = new StringBuilder();
		sb.Append(toString_Virtual(x)).Append(Environment.NewLine);
		StackTraceElement[] stack = getStackTrace_Virtual(x);
		for(int i = 0; i < stack .Length; i++)
		{
			sb.Append("\tat ").Append(stack[i]).Append(Environment.NewLine);
		}
		Exception cause = getCause_Virtual(x);
		while(cause != null)
		{
			sb.Append("Caused by: ").Append(toString_Virtual(cause)).Append(Environment.NewLine);

			// Cause stacktrace
			StackTraceElement[] parentStack = stack;
			stack = getStackTrace_Virtual(cause);
			bool equal = false; // Is rest of stack equal to parent frame?
			for(int i = 0; i < stack.Length && !equal; i++)
			{
				// Check if we already printed the rest of the stack
				// since it was the tail of the parent stack
				int remaining = stack.Length - i;
				int element = i;
				int parentElement = parentStack.Length - remaining;
				equal = parentElement >= 0
					&& parentElement < parentStack.Length; // be optimistic
				while(equal && element < stack.Length)
				{
					if(stack[element].Equals(parentStack[parentElement]))
					{
						element++;
						parentElement++;
					}
					else
					{
						equal = false;
					}
				}
				// Print stacktrace element or indicate the rest is equal 
				if(!equal)
				{
					sb.Append("\tat ").Append(stack[i]).Append(Environment.NewLine);
				}
				else
				{
					sb.Append("\t... ").Append(remaining).Append(" more").Append(Environment.NewLine);
					break; // from stack printing for loop
				}
			}
			cause = getCause_Virtual(cause);
		}
		// NOTE since we use reflection to lookup the print method each time, we can use this one method for both
		// the printStackTrace(..., PrintStream) & printStackTrace(..., PrintWriter) versions
		MethodInfo write = printStreamOrWriter.GetType().GetMethod("print", BindingFlags.Public | BindingFlags.Instance, null, CallingConventions.Standard, new Type[] { typeof(string) }, null);
		write.Invoke(printStreamOrWriter, new object[] { sb.ToString() });
	}
d71 1
a71 1
	public static Exception initCause(Exception x, Exception cause)
d73 3
a75 16
		if(x == null)
		{
			throw JavaException.NullPointerException();
		}
		if(cause == x)
		{
			throw JavaException.IllegalArgumentException("Cause cannot be self");
		}
		ExceptionInfoHelper eih = (ExceptionInfoHelper)exceptions[x];
		if(eih == null)
		{
			eih = new ExceptionInfoHelper(x);
			exceptions[x] = eih;
		}
		eih.Cause = cause;
		return x;
d78 1
a78 1
	public static Exception getCause(Exception x)
d80 1
a80 68
		if(x == null)
		{
			throw JavaException.NullPointerException();
		}
		ExceptionInfoHelper eih = (ExceptionInfoHelper)exceptions[x];
		if(eih == null)
		{
			return x.InnerException;
		}
		return eih.Cause;
	}

	public static StackTraceElement[] getStackTrace(Exception x)
	{
		if(x == null)
		{
			throw JavaException.NullPointerException();
		}
		ExceptionInfoHelper ei = (ExceptionInfoHelper)exceptions[x];
		if(ei == null)
		{
			return new StackTraceElement[0];
		}
		return ei.StackTrace;
	}

	public static void setStackTrace(Exception x, StackTraceElement[] stackTrace)
	{
		if(x == null)
		{
			throw JavaException.NullPointerException();
		}
		for(int i = 0; i < stackTrace.Length; i++)
		{
			if(stackTrace[i] == null)
			{
				throw JavaException.NullPointerException();
			}
		}
		ExceptionInfoHelper ei = (ExceptionInfoHelper)exceptions[x];
		if(ei == null)
		{
			ei = new ExceptionInfoHelper(x);
			exceptions[x] = ei;
		}
		ei.StackTrace = stackTrace;
	}

	public static string NullString
	{
		get
		{
			return NULL_STRING;
		}
	}

	public static string FilterMessage(string message)
	{
		if(message == null)
		{
			message = NULL_STRING;
		}
		return message;
	}

	public static string GetMessageFromCause(Exception cause)
	{
		if(cause == null)
d82 1
a82 1
			return NULL_STRING;
d84 1
a84 20
		return toString_Virtual(cause);
	}

	public static string getMessage(Exception x)
	{
		if(x == null)
		{
			throw JavaException.NullPointerException();
		}
		string message = x.Message;
		if(message == NULL_STRING)
		{
			message = null;
		}
		return message;
	}

	public static string getLocalizedMessage(Exception x)
	{
		if(x == null)
d86 1
a86 1
			throw JavaException.NullPointerException();
a87 1
		return getMessage_Virtual(x);
d90 1
a90 2
	[StackTraceInfo(Hidden = true)]
	public static Exception fillInStackTrace(Exception x)
a91 31
		if(x == null)
		{
			throw JavaException.NullPointerException();
		}
		ExceptionInfoHelper eih = (ExceptionInfoHelper)exceptions[x];
		if(eih == null)
		{
			eih = new ExceptionInfoHelper(x);
			exceptions[x] = eih;
		}
		else
		{
			eih.ResetStackTrace();
		}
		return x;
	}

	[StackTraceInfo(Hidden = true)]
	public static Exception MapExceptionFast(Exception t)
	{
		if(exceptions.ContainsKey(t))
		{
			return t;
		}
		return MapException(t, typeof(Exception));
	}

	[StackTraceInfo(Truncate = true)]
	public static Exception MapException(Exception t, Type handler)
	{
		Profiler.Enter("MapException");
d94 1
a94 161
			//Console.WriteLine("MapException: {0}, {1}", t, handler);
			//Console.WriteLine(new StackTrace(t));
			Exception org = t;
			Type type = t.GetType();
			// TODO don't remap if the exception already has associated ExceptionInfoHelper object (this means
			// that the .NET exception was thrown from Java code, explicitly).
			if(type == typeof(NullReferenceException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.NullPointerException"));
			}
			// HACK many of the String and Object methods throw ArgumentNullException where Java throws an NPE
			else if(type == typeof(ArgumentNullException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.NullPointerException"));
			}
			else if(type == typeof(IndexOutOfRangeException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ArrayIndexOutOfBoundsException"));
			}
			// HACK for String methods, we remap ArgumentOutOfRangeException to StringIndexOutOfBoundsException
			else if(type == typeof(ArgumentOutOfRangeException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.StringIndexOutOfBoundsException"));
			}
			else if(type == typeof(InvalidCastException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ClassCastException"));
			}
			else if(type == typeof(TypeInitializationException))
			{
				t = (Exception)MapExceptionFast(t.InnerException);
				if(!ClassLoaderWrapper.GetType("java.lang.Error").IsInstanceOfType(t))
				{
					ConstructorInfo constructor = ClassLoaderWrapper.GetType("java.lang.ExceptionInInitializerError").GetConstructor(new Type[] { typeof(Exception) });
					t = (Exception)constructor.Invoke(new object[] { t });
				}
			}
			else if(type == typeof(System.Threading.SynchronizationLockException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.IllegalMonitorStateException"));
			}
			else if(type == typeof(System.Threading.ThreadInterruptedException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.InterruptedException"));
			}
			else if(type == typeof(OutOfMemoryException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.OutOfMemoryError"));
			}
			else if(type == typeof(DivideByZeroException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ArithmeticException"), new object[] { "/ by zero" });
			}
			else if(type == typeof(ArrayTypeMismatchException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ArrayStoreException"));
			}
			else if(type == typeof(StackOverflowException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.StackOverflowError"));
			}
			else if(type == typeof(System.Security.VerificationException))
			{
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.VerifyError"));
			}
			else if(type == typeof(System.Threading.ThreadAbortException))
			{
				System.Threading.ThreadAbortException abort = (System.Threading.ThreadAbortException)t;
				if(abort.ExceptionState is Exception)
				{
					t = (Exception)abort.ExceptionState;
				}
				else
				{
					t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ThreadDeath"));
				}
				System.Threading.Thread.ResetAbort();
			}
			else if(type == typeof(OverflowException))
			{
				// TODO make sure the originating method was from an IK.VM.NET generated assembly, because if it was
				// generated by non-Java code, this remapping is obviously bogus.
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.NegativeArraySizeException"));
			}
			else if(type.FullName.StartsWith("System.") && type != typeof(TargetInvocationException))
			{
				if(handler != typeof(Exception) && handler.FullName.StartsWith("System."))
				{
					// this is Java code explicitly handling a .NET exception (e.g. System.IO.IOException in java.io.FileDescriptor)
					// so we don't need to print this
				}
				else
				{
					// TODO this is just for debugging
					Console.WriteLine("caught: {0}, handler: {1}", t.GetType().FullName, handler.FullName);
					Console.WriteLine(t);
				}
			}
			if(!exceptions.ContainsKey(t))
			{
				exceptions.Add(t, new ExceptionInfoHelper(org));
				Exception inner = org.InnerException;
				if(inner != null && !exceptions.ContainsKey(inner))
				{
					exceptions.Add(inner, new ExceptionInfoHelper(inner));
				}
			}
			return handler.IsInstanceOfType(t) ? t : null;
		}
		finally
		{
			Profiler.Leave("MapException");
		}
	}

	public static string toString(Exception x)
	{
		if(x == null)
		{
			throw JavaException.NullPointerException();
		}
		string message = getLocalizedMessage_Virtual(x);
		if(message == null)
		{
			return ClassHelper.getName(x.GetType());
		}
		return ClassHelper.getName(x.GetType()) + ": " + message;
	}

	// below are some helper methods to support calling virtual methods on Throwable
	private static readonly object[] noargs = new object[0];
	private static TypeWrapper throwableWrapper;
	private static MethodWrapper toString_methodWrapper;
	private static MethodWrapper getMessage_methodWrapper;
	private static MethodWrapper getStackTrace_methodWrapper;
	private static MethodWrapper getCause_methodWrapper;
	private static MethodWrapper getLocalizedMessage_methodWrapper;

	private static MethodWrapper GetMethod(string name, string sig)
	{
		if(throwableWrapper == null)
		{
			throwableWrapper = ClassLoaderWrapper.GetBootstrapClassLoader().LoadClassByDottedName("java.lang.Throwable");
		}
		return throwableWrapper.GetMethodWrapper(MethodDescriptor.FromNameSig(ClassLoaderWrapper.GetBootstrapClassLoader(), name, sig), true);
	}

	private static string toString_Virtual(Exception x)
	{
		if(toString_methodWrapper == null)
		{
			toString_methodWrapper = GetMethod("toString", "()Ljava.lang.String;");
		}
		return (string)toString_methodWrapper.Invoke(x, noargs, false);
	}

	private static string getMessage_Virtual(Exception x)
	{
		if(getMessage_methodWrapper == null)
		{
			getMessage_methodWrapper = GetMethod("getMessage", "()Ljava.lang.String;");
d96 1
a96 24
		return (string)getMessage_methodWrapper.Invoke(x, noargs, false);
	}

	private static StackTraceElement[] getStackTrace_Virtual(Exception x)
	{
		if(getStackTrace_methodWrapper == null)
		{
			getStackTrace_methodWrapper = GetMethod("getStackTrace", "()[Ljava.lang.StackTraceElement;");
		}
		return (StackTraceElement[])getStackTrace_methodWrapper.Invoke(x, noargs, false);
	}

	private static Exception getCause_Virtual(Exception x)
	{
		if(getCause_methodWrapper == null)
		{
			getCause_methodWrapper = GetMethod("getCause", "()Ljava.lang.Throwable;");
		}
		return (Exception)getCause_methodWrapper.Invoke(x, noargs, false);
	}

	private static string getLocalizedMessage_Virtual(Exception x)
	{
		if(getLocalizedMessage_methodWrapper == null)
d98 1
a98 1
			getLocalizedMessage_methodWrapper = GetMethod("getLocalizedMessage", "()Ljava.lang.String;");
a99 1
		return (string)getLocalizedMessage_methodWrapper.Invoke(x, noargs, false);
d102 2
a103 1
	[StackTraceInfo(Hidden = true)]
@


1.12
log
@*** empty log message ***
@
text
@d652 1
a652 1
		return throwableWrapper.GetMethodWrapper(new MethodDescriptor(ClassLoaderWrapper.GetBootstrapClassLoader(), name, sig), true);
@


1.11
log
@*** empty log message ***
@
text
@d284 1
a284 1
			throw new NullReferenceException();
d295 1
a295 1
			throw new NullReferenceException();
d357 1
a357 1
			throw new NullReferenceException();
d377 1
a377 1
			throw new NullReferenceException();
d391 1
a391 1
			throw new NullReferenceException();
d405 1
a405 1
			throw new NullReferenceException();
d411 1
a411 1
				throw new NullReferenceException();
d453 1
a453 1
			throw new NullReferenceException();
d467 1
a467 1
			throw new NullReferenceException();
d477 1
a477 1
			throw new NullReferenceException();
d627 1
a627 1
			throw new NullReferenceException();
@


1.10
log
@*** empty log message ***
@
text
@d30 1
d153 1
a153 1
						if(JVM.CleanStackTraces && m.IsDefined(typeof(ModifiersAttribute), false))
a158 4
								if((modifiersAttrib.Modifiers & Modifiers.Synthetic) != 0)
								{
									continue;
								}
d167 4
d659 1
a659 1
			toString_methodWrapper = GetMethod("toString", "()Ljava/lang/String;");
d668 1
a668 1
			getMessage_methodWrapper = GetMethod("getMessage", "()Ljava/lang/String;");
d677 1
a677 1
			getStackTrace_methodWrapper = GetMethod("getStackTrace", "()[Ljava/lang/StackTraceElement;");
d686 1
a686 1
			getCause_methodWrapper = GetMethod("getCause", "()Ljava/lang/Throwable;");
d695 1
a695 1
			getLocalizedMessage_methodWrapper = GetMethod("getLocalizedMessage", "()Ljava/lang/String;");
@


1.9
log
@*** empty log message ***
@
text
@d30 1
a30 1
using ClassHelper = NativeCode.java.lang.Class;
@


1.8
log
@*** empty log message ***
@
text
@d517 5
@


1.7
log
@no message
@
text
@d139 10
a148 1
							fileName = new System.IO.FileInfo(fileName).Name;
@


1.6
log
@no message
@
text
@d149 1
a149 1
								if(modifiersAttrib.IsSynthetic)
@


1.5
log
@no message
@
text
@d112 1
a112 1
						if(m.DeclaringType == null || m.ReflectedType == null)
d622 8
a629 1
	// below are some helper properties to support calling virtual methods on Throwable
d631 8
a638 2
	private delegate string toString_Delegate(Exception x);
	private static toString_Delegate toString_Virtual_;
d640 1
a640 1
	private static toString_Delegate toString_Virtual
d642 1
a642 1
		get
d644 1
a644 6
			if(toString_Virtual_ == null)
			{
				MethodInfo method = ClassLoaderWrapper.GetType("java.lang.Throwable$VirtualMethodsHelper").GetMethod("toString");
				toString_Virtual_ = (toString_Delegate)Delegate.CreateDelegate(typeof(toString_Delegate), method);
			}
			return toString_Virtual_;
d646 1
d649 1
a649 4
	private delegate string getMessage_Delegate(Exception x);
	private static getMessage_Delegate getMessage_Virtual_;

	private static getMessage_Delegate getMessage_Virtual
d651 1
a651 1
		get
d653 1
a653 6
			if(getMessage_Virtual_ == null)
			{
				MethodInfo method = ClassLoaderWrapper.GetType("java.lang.Throwable$VirtualMethodsHelper").GetMethod("getMessage");
				getMessage_Virtual_ = (getMessage_Delegate)Delegate.CreateDelegate(typeof(getMessage_Delegate), method);
			}
			return getMessage_Virtual_;
d655 1
d658 1
a658 4
	private delegate StackTraceElement[] getStackTrace_Delegate(Exception x);
	private static getStackTrace_Delegate getStackTrace_Virtual_;

	private static getStackTrace_Delegate getStackTrace_Virtual
d660 1
a660 1
		get
d662 1
a662 6
			if(getStackTrace_Virtual_ == null)
			{
				MethodInfo method = ClassLoaderWrapper.GetType("java.lang.Throwable$VirtualMethodsHelper").GetMethod("getStackTrace");
				getStackTrace_Virtual_ = (getStackTrace_Delegate)Delegate.CreateDelegate(typeof(getStackTrace_Delegate), method);
			}
			return getStackTrace_Virtual_;
d664 1
d667 1
a667 4
	private delegate Exception getCause_Delegate(Exception x);
	private static getCause_Delegate getCause_Virtual_;

	private static getCause_Delegate getCause_Virtual
d669 1
a669 1
		get
d671 1
a671 6
			if(getCause_Virtual_ == null)
			{
				MethodInfo method = ClassLoaderWrapper.GetType("java.lang.Throwable$VirtualMethodsHelper").GetMethod("getCause");
				getCause_Virtual_ = (getCause_Delegate)Delegate.CreateDelegate(typeof(getCause_Delegate), method);
			}
			return getCause_Virtual_;
d673 1
d676 1
a676 4
	private delegate string getLocalizedMessage_Delegate(Exception x);
	private static getLocalizedMessage_Delegate getLocalizedMessage_Virtual_;

	private static getLocalizedMessage_Delegate getLocalizedMessage_Virtual
d678 1
a678 1
		get
d680 1
a680 6
			if(getLocalizedMessage_Virtual_ == null)
			{
				MethodInfo method = ClassLoaderWrapper.GetType("java.lang.Throwable$VirtualMethodsHelper").GetMethod("getLocalizedMessage");
				getLocalizedMessage_Virtual_ = (getLocalizedMessage_Delegate)Delegate.CreateDelegate(typeof(getLocalizedMessage_Delegate), method);
			}
			return getLocalizedMessage_Virtual_;
d682 1
@


1.4
log
@no message
@
text
@d215 1
a215 1
							if(ste.getClassName() == "System.Reflection.RuntimeMethodInfo")
d245 2
a246 1
						bool chopFirst = stackTrace.Count != 0;
d248 4
a251 4
						if(chopFirst && stackTrace.Count > 0 && JVM.CleanStackTraces)
						{
							stackTrace.RemoveAt(0);
						}
@


1.3
log
@no message
@
text
@d42 3
a44 1
		private ArrayList stackTrace = new ArrayList();
d53 2
a54 7
				Append(new StackTrace(x, true));
				bool chopFirst = stackTrace.Count != 0;
				Append(new StackTrace(true));
				if(chopFirst && stackTrace.Count > 0 && JVM.CleanStackTraces)
				{
					stackTrace.RemoveAt(0);
				}
d88 3
a90 2
			stackTrace.Clear();
			Append(new StackTrace(true));
d239 16
d260 2
d511 1
a511 1
				// HACK for String methods, we remap ArgumentOutOfRangeException to StringIndexOutOfBoundsException
d578 11
a588 3
				// TODO this is just for debugging
				Console.WriteLine("caught: {0}, handler: {1}", t.GetType().FullName, handler.FullName);
				Console.WriteLine(t);
@


1.2
log
@no message
@
text
@d48 2
a49 4
			Append(new StackTrace(x, true));
			bool chopFirst = stackTrace.Count != 0;
			Append(new StackTrace(true));
			if(chopFirst && stackTrace.Count > 0 && JVM.CleanStackTraces)
d51 12
a62 1
				stackTrace.RemoveAt(0);
d64 1
a64 2
			cause = x.InnerException;
			if(cause == null)
d66 2
a67 2
				cause = CAUSE_NOT_SET;
			}
d103 2
a104 1
			if(st.FrameCount > 0)
d106 1
a106 2
				int baseSize = stackTrace.Count;
				for(int i = 0; i < st.FrameCount; i++)
d108 2
a109 4
					StackFrame frame = st.GetFrame(i);
					MethodBase m = frame.GetMethod();
					// TODO I may need more safety checks like these
					if(m.DeclaringType == null || m.ReflectedType == null)
d111 10
a120 7
						continue;
					}
					if(m.DeclaringType == typeof(System.Runtime.CompilerServices.RuntimeHelpers)
						|| m.DeclaringType.IsSubclassOf(typeof(System.Reflection.MethodInfo))
						|| IsPrivateScope(m)) // NOTE we assume that privatescope methods are always stubs that we should exclude
					{
						if(JVM.CleanStackTraces)
d124 22
a145 26
					}
					string methodName = frame.GetMethod().Name;
					if(methodName == ".ctor")
					{
						methodName = "<init>";
					}
					else if(methodName == ".cctor")
					{
						methodName = "<clinit>";
					}
					int lineNumber = frame.GetFileLineNumber();
					if(lineNumber == 0)
					{
						lineNumber = -1;
					}
					string fileName = frame.GetFileName();
					if(fileName != null)
					{
						fileName = new System.IO.FileInfo(fileName).Name;
					}
					string className = ClassHelper.getName(frame.GetMethod().ReflectedType);
					bool native = false;
					if(m.IsDefined(typeof(ModifiersAttribute), false))
					{
						object[] methodFlagAttribs = m.GetCustomAttributes(typeof(ModifiersAttribute), false);
						if(methodFlagAttribs.Length == 1)
d147 2
a148 2
							ModifiersAttribute modifiersAttrib = (ModifiersAttribute)methodFlagAttribs[0];
							if(modifiersAttrib.IsSynthetic)
d150 9
a158 5
								continue;
							}
							if((modifiersAttrib.Modifiers & Modifiers.Native) != 0)
							{
								native = true;
d161 1
a161 5
					}
					if(JVM.CleanStackTraces)
					{
						object[] attribs = m.DeclaringType.GetCustomAttributes(typeof(StackTraceInfoAttribute), false);
						if(attribs.Length == 1)
d163 2
a164 6
							StackTraceInfoAttribute sta = (StackTraceInfoAttribute)attribs[0];
							if(sta.EatFrames > 0)
							{
								stackTrace.RemoveRange(stackTrace.Count - sta.EatFrames, sta.EatFrames);
							}
							if(sta.Hidden)
d166 18
a183 1
								continue;
d185 2
a186 1
							if(sta.Truncate)
d188 19
a206 6
								stackTrace.RemoveRange(baseSize, stackTrace.Count - baseSize);
								continue;
							}
							if(sta.Class != null)
							{
								className = sta.Class;
d209 6
a214 2
						attribs = m.GetCustomAttributes(typeof(StackTraceInfoAttribute), false);
						if(attribs.Length == 1)
d216 2
a217 11
							StackTraceInfoAttribute sta = (StackTraceInfoAttribute)attribs[0];
							if(sta.EatFrames > 0)
							{
								int eat = Math.Min(stackTrace.Count, sta.EatFrames);
								stackTrace.RemoveRange(stackTrace.Count - eat, eat);
							}
							if(sta.Hidden)
							{
								continue;
							}
							if(sta.Truncate)
d219 2
a220 2
								stackTrace.RemoveRange(baseSize, stackTrace.Count - baseSize);
								continue;
d222 1
a222 1
							if(sta.Class != null)
d224 1
a224 1
								className = sta.Class;
d227 1
a228 19
					stackTrace.Add(new StackTraceElement(fileName, lineNumber, className, methodName, native));
				}
				if(JVM.CleanStackTraces)
				{
					int chop = 0;
					for(int i = stackTrace.Count - 1; i >= 0; i--)
					{
						StackTraceElement ste = (StackTraceElement)stackTrace[i];
						if(ste.getClassName() == "System.Reflection.RuntimeMethodInfo")
						{
							// skip method invocation by reflection, if it is at the top of the stack
							chop++;
						}
						else
						{
							break;
						}
					}
					stackTrace.RemoveRange(stackTrace.Count - chop, chop);
d230 4
d478 2
a479 7
		//Console.WriteLine("MapException: {0}, {1}", t, handler);
		//Console.WriteLine(new StackTrace(t));
		Exception org = t;
		Type type = t.GetType();
		// TODO don't remap if the exception already has associated ExceptionInfoHelper object (this means
		// that the .NET exception was thrown from Java code, explicitly).
		if(type == typeof(NullReferenceException))
d481 74
a554 19
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.NullPointerException"));
		}
		else if(type == typeof(IndexOutOfRangeException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ArrayIndexOutOfBoundsException"));
		}
		// HACK for String methods, we remap ArgumentOutOfRangeException to StringIndexOutOfBoundsException
		else if(type == typeof(ArgumentOutOfRangeException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.StringIndexOutOfBoundsException"));
		}
		else if(type == typeof(InvalidCastException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ClassCastException"));
		}
		else if(type == typeof(TypeInitializationException))
		{
			t = (Exception)MapExceptionFast(t.InnerException);
			if(!ClassLoaderWrapper.GetType("java.lang.Error").IsInstanceOfType(t))
d556 3
a558 2
				ConstructorInfo constructor = ClassLoaderWrapper.GetType("java.lang.ExceptionInInitializerError").GetConstructor(new Type[] { typeof(Exception) });
				t = (Exception)constructor.Invoke(new object[] { t });
d560 1
a560 33
		}
		else if(type == typeof(System.Threading.SynchronizationLockException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.IllegalMonitorStateException"));
		}
		else if(type == typeof(System.Threading.ThreadInterruptedException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.InterruptedException"));
		}
		else if(type == typeof(OutOfMemoryException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.OutOfMemoryError"));
		}
		else if(type == typeof(DivideByZeroException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ArithmeticException"), new object[] { "/ by zero" });
		}
		else if(type == typeof(ArrayTypeMismatchException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ArrayStoreException"));
		}
		else if(type == typeof(StackOverflowException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.StackOverflowError"));
		}
		else if(type == typeof(System.Security.VerificationException))
		{
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.VerifyError"));
		}
		else if(type == typeof(System.Threading.ThreadAbortException))
		{
			System.Threading.ThreadAbortException abort = (System.Threading.ThreadAbortException)t;
			if(abort.ExceptionState is Exception)
d562 3
a564 1
				t = (Exception)abort.ExceptionState;
d566 1
a566 1
			else
d568 6
a573 1
				t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.ThreadDeath"));
d575 1
a575 7
			System.Threading.Thread.ResetAbort();
		}
		else if(type == typeof(OverflowException))
		{
			// TODO make sure the originating method was from an IK.VM.NET generated assembly, because if it was
			// generated by non-Java code, this remapping is obviously bogus.
			t = (Exception)Activator.CreateInstance(ClassLoaderWrapper.GetType("java.lang.NegativeArraySizeException"));
d577 1
a577 1
		else if(type.FullName.StartsWith("System.") && type != typeof(TargetInvocationException))
d579 1
a579 12
			// TODO this is just for debugging
			Console.WriteLine("caught: {0}, handler: {1}", t.GetType().FullName, handler.FullName);
			Console.WriteLine(t);
		}
		if(!exceptions.ContainsKey(t))
		{
			exceptions.Add(t, new ExceptionInfoHelper(org));
			Exception inner = org.InnerException;
			if(inner != null && !exceptions.ContainsKey(inner))
			{
				exceptions.Add(inner, new ExceptionInfoHelper(inner));
			}
a580 1
		return handler.IsInstanceOfType(t) ? t : null;
@


1.1
log
@Initial revision
@
text
@a107 1
						|| m.DeclaringType == typeof(JNI) // HACK we exclude the JNI class from the stack trace
d478 5
@


1.1.1.1
log
@no message
@
text
@@
