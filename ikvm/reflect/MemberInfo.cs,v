head	1.12;
access;
symbols
	v8_1_5717_0:1.12
	v8_1:1.12.0.8
	v8_0_5449_1:1.12
	v8_0_5449_0:1.12
	v8_0:1.12.0.6
	v7_4_5196_0:1.12
	v7_4:1.12.0.4
	v7_3:1.12.0.2
	v7_2_4630_6:1.11
	v7_2_4630_5:1.11
	v7_2_4630_4:1.11
	v7_2_4630_3:1.11
	v7_2_4630_2:1.11
	v0_46_0_4:1.7
	v7_2_4630_1:1.11
	v7_2:1.11.0.2
	v7_1_4532_2:1.10
	v7_1_4532_1:1.10
	v7_1_4532_0:1.10
	v7_1:1.10.0.2
	v7_0_4335_3:1.7
	v7_0_4335_2:1.7
	v7_0_4335_1:1.7
	v0_46_0_2:1.7
	v7_0_4335_0:1.7
	v7_0:1.7.0.4
	v0_46_0_1:1.7
	v0_46_0_0:1.7
	v0_46:1.7.0.2
	v0_44_0_6:1.5
	v0_44_0_5:1.5
	v0_44_0_4:1.5
	v0_44_0_3:1.5
	v0_44_0_2:1.5
	v0_44_0_1:1.5
	v0_44_0_0:1.5
	v0_44:1.5.0.2;
locks; strict;
comment	@ * @;


1.12
date	2012.10.11.10.33.42;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2012.07.16.10.14.37;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2012.04.11.13.00.31;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2012.04.10.09.07.54;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2012.04.10.06.18.32;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.26.06.59.57;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2011.01.13.05.58.54;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.20.12.17.16;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.20.09.25.30;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2010.02.09.07.57.49;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.25.05.49.01;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.25.05.29.31;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.12
log
@- Added new .NET 4.0 method GetCustomAttributesData() to Assembly, MemberInfo, Module and ParameterInfo.
- Added new .NET 4.5 property CustomAttributes to Assembly, MemberInfo, Module and ParameterInfo.
@
text
@/*
  Copyright (C) 2009 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/

using System;
using System.Collections.Generic;
using System.Text;

namespace IKVM.Reflection
{
// disable warnings that complain about us having == and != operators without also overriding Equals/GetHashCode,
// this is intentional because most subtypes use reference equality
#pragma warning disable 660, 661
	public abstract class MemberInfo : ICustomAttributeProvider
	{
		// prevent external subclasses
		internal MemberInfo()
		{
		}

		public abstract string Name { get; }
		public abstract Type DeclaringType { get; }
		public abstract MemberTypes MemberType { get; }

		public virtual Type ReflectedType
		{
			get { return DeclaringType; }
		}

		internal abstract MemberInfo SetReflectedType(Type type);

		public virtual int MetadataToken
		{
			get { throw new NotSupportedException(); }
		}

		public abstract Module Module
		{
			get;
		}

		public virtual bool __IsMissing
		{
			get { return false; }
		}

		public bool IsDefined(Type attributeType, bool inherit)
		{
			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit).Count != 0;
		}

		public IList<CustomAttributeData> __GetCustomAttributes(Type attributeType, bool inherit)
		{
			return CustomAttributeData.__GetCustomAttributes(this, attributeType, inherit);
		}

		public IList<CustomAttributeData> GetCustomAttributesData()
		{
			return CustomAttributeData.GetCustomAttributes(this);
		}

		public IEnumerable<CustomAttributeData> CustomAttributes
		{
			get { return GetCustomAttributesData(); }
		}

		public static bool operator ==(MemberInfo m1, MemberInfo m2)
		{
			return ReferenceEquals(m1, m2) || (!ReferenceEquals(m1, null) && m1.Equals(m2));
		}

		public static bool operator !=(MemberInfo m1, MemberInfo m2)
		{
			return !(m1 == m2);
		}

		internal abstract int GetCurrentToken();

		internal abstract List<CustomAttributeData> GetPseudoCustomAttributes(Type attributeType);

		internal abstract bool IsBaked { get; }

		internal virtual bool BindingFlagsMatch(BindingFlags flags)
		{
			throw new InvalidOperationException();
		}

		internal virtual bool BindingFlagsMatchInherited(BindingFlags flags)
		{
			throw new InvalidOperationException();
		}

		protected static bool BindingFlagsMatch(bool state, BindingFlags flags, BindingFlags trueFlag, BindingFlags falseFlag)
		{
			return (state && (flags & trueFlag) == trueFlag)
				|| (!state && (flags & falseFlag) == falseFlag);
		}

		protected static T SetReflectedType<T>(T member, Type type)
			where T : MemberInfo
		{
			return member == null ? null : (T)member.SetReflectedType(type);
		}

		protected static T[] SetReflectedType<T>(T[] members, Type type)
			where T : MemberInfo
		{
			for (int i = 0; i < members.Length; i++)
			{
				members[i] = SetReflectedType(members[i], type);
			}
			return members;
		}
	}
}
@


1.11
log
@Refactored custom attribute handling of MemberInfo types.
@
text
@d77 10
@


1.10
log
@Fixed two bugs in the ReflectedType wrappers for PropertyInfo and EventInfo:
- GetXxxMethod would throw a NullReferenceException if the corresponding method didn't exist.
- EventInfo.GetAccessors() called itself instead of the wrapped object.
@
text
@d87 5
a91 4
		internal virtual IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
		{
			return this.Module.GetCustomAttributes(this.MetadataToken, attributeType);
		}
@


1.9
log
@Added MemberInfo.ReflectedType.
@
text
@d107 16
@


1.8
log
@Moved GetEvents(), GetFields(), GetConstructors(), GetNestedTypes() and GetProperties() to a common implementation that fixes a number of bugs.
@
text
@d45 7
@


1.7
log
@Added support for resolving methods in missing types (primarily to enable CustomAttributeData.Constructor to work for missing attribute types).
@
text
@d85 11
a95 1
		internal static bool BindingFlagsMatch(bool state, BindingFlags flags, BindingFlags trueFlag, BindingFlags falseFlag)
@


1.6
log
@Prevent external subclassing. It's not part of the design to suppor that, now it is also enforced.
@
text
@d55 5
@


1.5
log
@Added ICustomAttributeProvider interface.
@
text
@d36 5
@


1.4
log
@Implemented custom attribute filtering at the source. Added support for custom attribute sub typing.
@
text
@d34 1
a34 1
	public abstract class MemberInfo
d55 5
@


1.3
log
@Added == and != operators to MemberInfo to mask the fact that we don't implement reference identity for various members (most notably the constructor wrappers, generic wrappers and events and properties).
Changed Type.Equals() to avoid infinite recursion, now that we overload the == operator.
@
text
@d65 1
a65 1
		internal virtual IList<CustomAttributeData> GetCustomAttributesData()
d67 1
a67 1
			return this.Module.GetCustomAttributes(this.MetadataToken);
@


1.2
log
@Removed UTF-8 byte order marks.
@
text
@d31 3
d55 10
@


1.1
log
@New IKVM.Reflection implementation.
@
text
@d1 1
a1 1
ï»¿/*
@

