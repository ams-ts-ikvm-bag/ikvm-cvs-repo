head	1.30;
access;
symbols
	v8_1_5717_0:1.28
	v8_1:1.28.0.6
	v8_0_5449_1:1.28
	v8_0_5449_0:1.28
	v8_0:1.28.0.4
	v7_4_5196_0:1.28
	v7_4:1.28.0.2
	v7_3:1.25.0.2
	v7_2_4630_6:1.20
	v7_2_4630_5:1.20
	v7_2_4630_4:1.20
	v7_2_4630_3:1.20
	v7_2_4630_2:1.20
	v0_46_0_4:1.10
	v7_2_4630_1:1.20
	v7_2:1.20.0.2
	v7_1_4532_2:1.19
	v7_1_4532_1:1.19
	v7_1_4532_0:1.19
	v7_1:1.19.0.2
	v7_0_4335_3:1.14
	v7_0_4335_2:1.14
	v7_0_4335_1:1.14
	v0_46_0_2:1.10
	v7_0_4335_0:1.14
	v7_0:1.14.0.2
	v0_46_0_1:1.10
	v0_46_0_0:1.10
	v0_46:1.10.0.2
	v0_44_0_6:1.7
	v0_44_0_5:1.7
	v0_44_0_4:1.7
	v0_44_0_3:1.7
	v0_44_0_2:1.7
	v0_44_0_1:1.7
	v0_44_0_0:1.7
	v0_44:1.7.0.2;
locks; strict;
comment	@ * @;


1.30
date	2016.07.01.05.15.22;	author jfrijters;	state Exp;
branches;
next	1.29;

1.29
date	2015.11.03.08.19.22;	author jfrijters;	state Exp;
branches;
next	1.28;

1.28
date	2013.06.04.10.11.23;	author jfrijters;	state Exp;
branches;
next	1.27;

1.27
date	2013.05.30.15.40.33;	author jfrijters;	state Exp;
branches;
next	1.26;

1.26
date	2013.05.10.06.16.58;	author jfrijters;	state Exp;
branches;
next	1.25;

1.25
date	2013.01.28.07.17.27;	author jfrijters;	state Exp;
branches;
next	1.24;

1.24
date	2012.11.20.14.09.41;	author jfrijters;	state Exp;
branches;
next	1.23;

1.23
date	2012.11.20.14.02.54;	author jfrijters;	state Exp;
branches;
next	1.22;

1.22
date	2012.10.24.17.08.07;	author jfrijters;	state Exp;
branches;
next	1.21;

1.21
date	2012.10.24.16.50.30;	author jfrijters;	state Exp;
branches;
next	1.20;

1.20
date	2012.07.16.12.45.42;	author jfrijters;	state Exp;
branches;
next	1.19;

1.19
date	2012.04.09.10.04.58;	author jfrijters;	state Exp;
branches;
next	1.18;

1.18
date	2012.01.25.14.56.35;	author jfrijters;	state Exp;
branches;
next	1.17;

1.17
date	2012.01.25.08.10.15;	author jfrijters;	state Exp;
branches;
next	1.16;

1.16
date	2012.01.18.11.15.46;	author jfrijters;	state Exp;
branches;
next	1.15;

1.15
date	2011.11.07.14.05.52;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2011.10.13.11.01.12;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2011.03.17.10.01.58;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2011.03.11.14.11.15;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2011.03.10.16.09.59;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2011.01.20.05.38.12;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.08.06.33.03;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2010.12.06.05.56.51;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2010.05.20.09.25.30;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2010.05.11.09.05.15;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2010.05.11.06.07.20;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2010.05.06.05.48.40;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2010.04.18.08.39.21;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.25.05.49.02;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.25.05.29.32;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.30
log
@Added support for building against .NET Standard 1.3.
@
text
@/*
  Copyright (C) 2009 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;
using System.Collections.Generic;
#if !NETSTANDARD
using System.Configuration.Assemblies;
#endif
using System.IO;
using IKVM.Reflection.Metadata;

namespace IKVM.Reflection.Reader
{
	sealed class AssemblyReader : Assembly
	{
		private const int ContainsNoMetaData = 0x0001;
		private readonly string location;
		private readonly ModuleReader manifestModule;
		private readonly Module[] externalModules;

		internal AssemblyReader(string location, ModuleReader manifestModule)
			: base(manifestModule.universe)
		{
			this.location = location;
			this.manifestModule = manifestModule;
			externalModules = new Module[manifestModule.File.records.Length];
		}

		public override string Location
		{
			get { return location ?? ""; }
		}

		public override AssemblyName GetName()
		{
			return GetNameImpl(ref manifestModule.AssemblyTable.records[0]);
		}

		private AssemblyName GetNameImpl(ref AssemblyTable.Record rec)
		{
			AssemblyName name = new AssemblyName();
			name.Name = manifestModule.GetString(rec.Name);
			name.Version = new Version(rec.MajorVersion, rec.MinorVersion, rec.BuildNumber, rec.RevisionNumber);
			if (rec.PublicKey != 0)
			{
				name.SetPublicKey(manifestModule.GetBlobCopy(rec.PublicKey));
			}
			else
			{
				name.SetPublicKey(Empty<byte>.Array);
			}
			if (rec.Culture != 0)
			{
				name.CultureName = manifestModule.GetString(rec.Culture);
			}
			else
			{
				name.CultureName = "";
			}
			name.HashAlgorithm = (AssemblyHashAlgorithm)rec.HashAlgId;
			name.CodeBase = this.CodeBase;
			PortableExecutableKinds peKind;
			ImageFileMachine machine;
			manifestModule.GetPEKind(out peKind, out machine);
			switch (machine)
			{
				case ImageFileMachine.I386:
					// FXBUG we copy the .NET bug that Preferred32Bit implies x86
					if ((peKind & (PortableExecutableKinds.Required32Bit | PortableExecutableKinds.Preferred32Bit)) != 0)
					{
						name.ProcessorArchitecture = ProcessorArchitecture.X86;
					}
					else if ((rec.Flags & 0x70) == 0x70)
					{
						// it's a reference assembly
						name.ProcessorArchitecture = ProcessorArchitecture.None;
					}
					else
					{
						name.ProcessorArchitecture = ProcessorArchitecture.MSIL;
					}
					break;
				case ImageFileMachine.IA64:
					name.ProcessorArchitecture = ProcessorArchitecture.IA64;
					break;
				case ImageFileMachine.AMD64:
					name.ProcessorArchitecture = ProcessorArchitecture.Amd64;
					break;
				case ImageFileMachine.ARM:
					name.ProcessorArchitecture = ProcessorArchitecture.Arm;
					break;
			}
			name.RawFlags = (AssemblyNameFlags)rec.Flags;
			return name;
		}

		public override Type[] GetTypes()
		{
			if (externalModules.Length == 0)
			{
				return manifestModule.GetTypes();
			}

			List<Type> list = new List<Type>();
			foreach (Module module in GetModules(false))
			{
				list.AddRange(module.GetTypes());
			}
			return list.ToArray();
		}

		internal override Type FindType(TypeName typeName)
		{
			Type type = manifestModule.FindType(typeName);
			for (int i = 0; type == null && i < externalModules.Length; i++)
			{
				if ((manifestModule.File.records[i].Flags & ContainsNoMetaData) == 0)
				{
					type = GetModule(i).FindType(typeName);
				}
			}
			return type;
		}

		internal override Type FindTypeIgnoreCase(TypeName lowerCaseName)
		{
			Type type = manifestModule.FindTypeIgnoreCase(lowerCaseName);
			for (int i = 0; type == null && i < externalModules.Length; i++)
			{
				if ((manifestModule.File.records[i].Flags & ContainsNoMetaData) == 0)
				{
					type = GetModule(i).FindTypeIgnoreCase(lowerCaseName);
				}
			}
			return type;
		}

		public override string ImageRuntimeVersion
		{
			get { return manifestModule.__ImageRuntimeVersion; }
		}

		public override Module ManifestModule
		{
			get { return manifestModule; }
		}

		public override Module[] GetLoadedModules(bool getResourceModules)
		{
			List<Module> list = new List<Module>();
			list.Add(manifestModule);
			foreach (Module m in externalModules)
			{
				if (m != null)
				{
					list.Add(m);
				}
			}
			return list.ToArray();
		}

		public override Module[] GetModules(bool getResourceModules)
		{
			if (externalModules.Length == 0)
			{
				return new Module[] { manifestModule };
			}
			else
			{
				List<Module> list = new List<Module>();
				list.Add(manifestModule);
				for (int i = 0; i < manifestModule.File.records.Length; i++)
				{
					if (getResourceModules || (manifestModule.File.records[i].Flags & ContainsNoMetaData) == 0)
					{
						list.Add(GetModule(i));
					}
				}
				return list.ToArray();
			}
		}

		public override Module GetModule(string name)
		{
			if (name.Equals(manifestModule.ScopeName, StringComparison.OrdinalIgnoreCase))
			{
				return manifestModule;
			}
			int index = GetModuleIndex(name);
			if (index != -1)
			{
				return GetModule(index);
			}
			return null;
		}

		private int GetModuleIndex(string name)
		{
			for (int i = 0; i < manifestModule.File.records.Length; i++)
			{
				if (name.Equals(manifestModule.GetString(manifestModule.File.records[i].Name), StringComparison.OrdinalIgnoreCase))
				{
					return i;
				}
			}
			return -1;
		}

		private Module GetModule(int index)
		{
			if (externalModules[index] != null)
			{
				return externalModules[index];
			}
			return LoadModule(index, null, manifestModule.GetString(manifestModule.File.records[index].Name));
		}

		private Module LoadModule(int index, byte[] rawModule, string name)
		{
			string location = name == null ? null : Path.Combine(Path.GetDirectoryName(this.location), name);
			if ((manifestModule.File.records[index].Flags & ContainsNoMetaData) != 0)
			{
				return externalModules[index] = new ResourceModule(manifestModule, index, location);
			}
			else
			{
				if (rawModule == null)
				{
					try
					{
						rawModule = File.ReadAllBytes(location);
					}
					catch (FileNotFoundException)
					{
						if (resolvers != null)
						{
							ResolveEventArgs arg = new ResolveEventArgs(name, this);
							foreach (ModuleResolveEventHandler resolver in resolvers)
							{
								Module module = resolver(this, arg);
								if (module != null)
								{
									return module;
								}
							}
						}
						if (universe.MissingMemberResolution)
						{
							return externalModules[index] = new MissingModule(this, index);
						}
						throw;
					}
				}
				return externalModules[index] = new ModuleReader(this, manifestModule.universe, new MemoryStream(rawModule), location, false);
			}
		}

		public override Module LoadModule(string moduleName, byte[] rawModule)
		{
			int index = GetModuleIndex(moduleName);
			if (index == -1)
			{
				throw new ArgumentException();
			}
			if (externalModules[index] != null)
			{
				return externalModules[index];
			}
			return LoadModule(index, rawModule, null);
		}

		public override MethodInfo EntryPoint
		{
			get { return manifestModule.GetEntryPoint(); }
		}

		public override string[] GetManifestResourceNames()
		{
			return manifestModule.GetManifestResourceNames();
		}

		public override ManifestResourceInfo GetManifestResourceInfo(string resourceName)
		{
			return manifestModule.GetManifestResourceInfo(resourceName);
		}

		public override Stream GetManifestResourceStream(string resourceName)
		{
			return manifestModule.GetManifestResourceStream(resourceName);
		}

		public override AssemblyName[] GetReferencedAssemblies()
		{
			return manifestModule.__GetReferencedAssemblies();
		}

		protected override AssemblyNameFlags GetAssemblyFlags()
		{
			return (AssemblyNameFlags)manifestModule.AssemblyTable.records[0].Flags;
		}

		internal string Name
		{
			get { return manifestModule.GetString(manifestModule.AssemblyTable.records[0].Name); }
		}

		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
		{
			return CustomAttributeData.GetCustomAttributesImpl(null, manifestModule, 0x20000001, attributeType) ?? CustomAttributeData.EmptyList;
		}
	}
}
@


1.29
log
@Added AssemblyName.CultureName property setter that was introduced with .NET 4.6.
@
text
@d26 1
d28 1
@


1.28
log
@Added Universe.OpenMappedRawModule() API to enable reading modules from memory or a crash dump file.
@
text
@d72 1
a72 1
				name.Culture = manifestModule.GetString(rec.Culture);
d76 1
a76 1
				name.Culture = "";
@


1.27
log
@Bug fix. Assembly.Location should return "" instead of null, if there is no location.
@
text
@d272 1
a272 1
				return externalModules[index] = new ModuleReader(this, manifestModule.universe, new MemoryStream(rawModule), location);
@


1.26
log
@Replaced incorrect usage of StringComparison.InvariantCultureIgnoreCase with StringComparison.OrdinalIgnoreCase.
@
text
@d49 1
a49 1
			get { return location; }
@


1.25
log
@Expose the Name and __ModuleHash for missing external Modules.
@
text
@d203 1
a203 1
			if (name.Equals(manifestModule.ScopeName, StringComparison.InvariantCultureIgnoreCase))
d219 1
a219 1
				if (name.Equals(manifestModule.GetString(manifestModule.File.records[i].Name), StringComparison.InvariantCultureIgnoreCase))
@


1.24
log
@If missing member resolution is enabled, automatically create missing modules as needed.
@
text
@d267 1
a267 1
							return externalModules[index] = new MissingModule(this);
@


1.23
log
@Added the Assembly.ModuleResolve event.
@
text
@d265 4
@


1.22
log
@Bug fix. Changed AssemblyName.ProcessorArchitecture to match (weird) .NET behavior. When reading the property it returns the architecture of the PE file, not the field from the AssemblyDef record.
@
text
@d233 1
a233 3
			// TODO add ModuleResolve event
			string location = Path.Combine(Path.GetDirectoryName(this.location), manifestModule.GetString(manifestModule.File.records[index].Name));
			return LoadModule(index, null, location);
d236 1
a236 1
		private Module LoadModule(int index, byte[] rawModule, string location)
d238 1
d247 20
a266 1
					rawModule = File.ReadAllBytes(location);
@


1.21
log
@Made AssemblyBuilder.__AssemblyFlags a read/write property and marked __SetAssemblyFlags() obsolete.
@
text
@d80 31
@


1.20
log
@Removed Module.GetCustomAttributes(int, Type) helper.
@
text
@d262 1
a262 1
		public override AssemblyNameFlags __AssemblyFlags
d264 1
a264 1
			get { return (AssemblyNameFlags)manifestModule.AssemblyTable.records[0].Flags; }
@


1.19
log
@Added support for case-insensitive type lookup.
@
text
@d274 1
a274 1
			return manifestModule.GetCustomAttributes(0x20000001, attributeType);
@


1.18
log
@Cache the assembly FullName in Assembly. This brings the Assembly.FullName property performance more inline with System.Reflection which also caches the FullName (computing the FullName is expensive).
@
text
@d112 13
@


1.17
log
@Optimized assembly lookup. Thanks to Marek Safar for the pointer.
@
text
@a51 5
		public override string FullName
		{
			get { return GetName().FullName; }
		}

@


1.16
log
@Added Module.__ImageRuntimeVersion API.
@
text
@d259 5
@


1.15
log
@Implemented most of AssemblyName (except parsing) without dependency on System.Reflection.AssemblyName.
@
text
@d119 1
a119 1
			get { return manifestModule.ImageRuntimeVersion; }
@


1.14
log
@Added support for process architecture in assembly flags.
@
text
@d77 1
a77 1
				name.CultureInfo = new System.Globalization.CultureInfo(manifestModule.GetString(rec.Culture));
d81 1
a81 1
				name.CultureInfo = System.Globalization.CultureInfo.InvariantCulture;
@


1.13
log
@Don't needlessly read the contents of a resource module.
@
text
@d85 1
a85 1
			name.Flags = (AssemblyNameFlags)rec.Flags;
@


1.12
log
@Added API extension to get the file hash of a resource module.
@
text
@d196 1
a196 1
			return LoadModule(index, File.ReadAllBytes(location), location);
d207 4
@


1.11
log
@Added API extension Assembly.__AssemblyFlags to query all the assembly flags. The AssemblyName.Flags property returns only a subset of the flags.
@
text
@d203 1
a203 1
				return externalModules[index] = new ResourceModule(this, manifestModule.GetString(manifestModule.File.records[index].Name), location);
@


1.10
log
@More type name fixes. This time to support the fact that the CLR and Mono both treat TypeNamespace and TypeName as separate names and do not consider fullName to be relevant.
@
text
@d250 5
@


1.9
log
@Added Module.__GetReferencedAssemblies() API.
@
text
@d104 1
a104 1
		internal override Type GetTypeImpl(string typeName)
d106 1
a106 1
			Type type = manifestModule.GetType(typeName);
d111 1
a111 1
					type = GetModule(i).GetType(typeName);
@


1.8
log
@HashAlgId in assembly manifest record turns out to be useless (SHA1 is always used).
@
text
@d247 1
a247 1
			return manifestModule.GetReferencedAssemblies();
@


1.7
log
@Implemented custom attribute filtering at the source. Added support for custom attribute sub typing.
@
text
@d83 1
a83 14
			switch (rec.HashAlgId)
			{
				case 0:
					name.HashAlgorithm = AssemblyHashAlgorithm.None;
					break;
				case 0x8003:
					name.HashAlgorithm = AssemblyHashAlgorithm.MD5;
					break;
				case 0x8004:
					name.HashAlgorithm = AssemblyHashAlgorithm.SHA1;
					break;
				default:
					throw new BadImageFormatException();
			}
@


1.6
log
@Set flags in AssemblyName returned by GetName().
@
text
@d263 1
a263 1
		internal override IList<CustomAttributeData> GetCustomAttributesData()
d265 1
a265 1
			return manifestModule.GetCustomAttributes(0x20000001);
@


1.5
log
@Added Assembly.CodeBase property and fixes Assembly.GetName() and AssemblyName.GetAssemblyName() to set the CodeBase of the AssemblyName.
@
text
@d98 1
@


1.4
log
@Fixed Assembly.GetTypes() bug that caused it to return types in manifest module twice for multi-module assemblies. Thanks to Kornel Pal for this fix..
@
text
@d97 1
@


1.3
log
@Introduced Empty<T> to cache zero length arrays.
@
text
@d102 7
a108 2
			Type[] types = manifestModule.GetTypes();
			if (externalModules.Length > 0)
d110 1
a110 7
				List<Type> list = new List<Type>();
				list.AddRange(types);
				foreach (Module module in GetModules(false))
				{
					list.AddRange(module.GetTypes());
				}
				types = list.ToArray();
d112 1
a112 1
			return types;
@


1.2
log
@Removed UTF-8 byte order marks.
@
text
@d73 1
a73 1
				name.SetPublicKey(new byte[0]);
@


1.1
log
@New IKVM.Reflection implementation.
@
text
@d1 1
a1 1
﻿/*
@

