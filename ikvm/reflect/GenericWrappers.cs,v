head	1.36;
access;
symbols
	v8_1_5717_0:1.36
	v8_1:1.36.0.10
	v8_0_5449_1:1.36
	v8_0_5449_0:1.36
	v8_0:1.36.0.8
	v7_4_5196_0:1.36
	v7_4:1.36.0.6
	v7_3:1.36.0.4
	v7_2_4630_6:1.36
	v7_2_4630_5:1.36
	v7_2_4630_4:1.36
	v7_2_4630_3:1.36
	v7_2_4630_2:1.36
	v0_46_0_4:1.13
	v7_2_4630_1:1.36
	v7_2:1.36.0.2
	v7_1_4532_2:1.23
	v7_1_4532_1:1.23
	v7_1_4532_0:1.23
	v7_1:1.23.0.2
	v7_0_4335_3:1.19
	v7_0_4335_2:1.19
	v7_0_4335_1:1.19
	v0_46_0_2:1.13
	v7_0_4335_0:1.19
	v7_0:1.19.0.2
	v0_46_0_1:1.13
	v0_46_0_0:1.13
	v0_46:1.13.0.4
	v0_44_0_6:1.13
	v0_44_0_5:1.13
	v0_44_0_4:1.13
	v0_44_0_3:1.13
	v0_44_0_2:1.13
	v0_44_0_1:1.13
	v0_44_0_0:1.13
	v0_44:1.13.0.2;
locks; strict;
comment	@ * @;


1.36
date	2012.07.16.10.14.37;	author jfrijters;	state Exp;
branches;
next	1.35;

1.35
date	2012.07.16.07.23.00;	author jfrijters;	state Exp;
branches;
next	1.34;

1.34
date	2012.07.13.13.08.28;	author jfrijters;	state Exp;
branches;
next	1.33;

1.33
date	2012.07.13.11.01.07;	author jfrijters;	state Exp;
branches;
next	1.32;

1.32
date	2012.07.13.10.26.07;	author jfrijters;	state Exp;
branches;
next	1.31;

1.31
date	2012.07.13.10.22.19;	author jfrijters;	state Exp;
branches;
next	1.30;

1.30
date	2012.07.13.10.17.11;	author jfrijters;	state Exp;
branches;
next	1.29;

1.29
date	2012.07.13.07.37.54;	author jfrijters;	state Exp;
branches;
next	1.28;

1.28
date	2012.07.13.06.33.30;	author jfrijters;	state Exp;
branches;
next	1.27;

1.27
date	2012.07.12.15.10.58;	author jfrijters;	state Exp;
branches;
next	1.26;

1.26
date	2012.07.12.13.30.06;	author jfrijters;	state Exp;
branches;
next	1.25;

1.25
date	2012.07.12.09.13.43;	author jfrijters;	state Exp;
branches;
next	1.24;

1.24
date	2012.06.26.13.07.02;	author jfrijters;	state Exp;
branches;
next	1.23;

1.23
date	2012.04.10.06.18.32;	author jfrijters;	state Exp;
branches;
next	1.22;

1.22
date	2012.01.27.13.51.08;	author jfrijters;	state Exp;
branches;
next	1.21;

1.21
date	2012.01.12.06.51.17;	author jfrijters;	state Exp;
branches;
next	1.20;

1.20
date	2011.12.01.06.30.50;	author jfrijters;	state Exp;
branches;
next	1.19;

1.19
date	2011.03.13.09.03.15;	author jfrijters;	state Exp;
branches;
next	1.18;

1.18
date	2011.03.10.11.05.54;	author jfrijters;	state Exp;
branches;
next	1.17;

1.17
date	2011.03.09.06.00.33;	author jfrijters;	state Exp;
branches;
next	1.16;

1.16
date	2011.03.07.07.56.52;	author jfrijters;	state Exp;
branches;
next	1.15;

1.15
date	2011.03.06.07.36.55;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2011.03.06.07.03.05;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2010.06.28.09.38.00;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2010.06.24.08.49.43;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2010.06.24.08.44.33;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2010.06.24.07.22.58;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2010.05.20.09.25.30;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2010.04.19.05.26.28;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2010.02.26.09.26.20;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2010.02.09.07.54.54;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.09.07.22.40;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.04.10.49.24;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.27.06.12.37;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.25.05.49.01;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.25.05.29.31;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.36
log
@Refactored custom attribute handling of MemberInfo types.
@
text
@/*
  Copyright (C) 2009, 2010 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;
using System.Collections.Generic;
using System.Text;

namespace IKVM.Reflection
{
	// this represents both generic method instantiations and non-generic methods on generic type instantations
	// (this means that it can be a generic method declaration as well as a generic method instance)
	sealed class GenericMethodInstance : MethodInfo
	{
		private readonly Type declaringType;
		private readonly MethodInfo method;
		private readonly Type[] methodArgs;
		private MethodSignature lazyMethodSignature;

		internal GenericMethodInstance(Type declaringType, MethodInfo method, Type[] methodArgs)
		{
			System.Diagnostics.Debug.Assert(!(method is GenericMethodInstance));
			this.declaringType = declaringType;
			this.method = method;
			this.methodArgs = methodArgs;
		}

		public override bool Equals(object obj)
		{
			GenericMethodInstance other = obj as GenericMethodInstance;
			return other != null
				&& other.method.Equals(method)
				&& other.declaringType.Equals(declaringType)
				&& Util.ArrayEquals(other.methodArgs, methodArgs);
		}

		public override int GetHashCode()
		{
			return declaringType.GetHashCode() * 33 ^ method.GetHashCode() ^ Util.GetHashCode(methodArgs);
		}

		public override Type ReturnType
		{
			get { return method.ReturnType.BindTypeParameters(this); }
		}

		public override ParameterInfo ReturnParameter
		{
			get { return new GenericParameterInfoImpl(this, method.ReturnParameter); }
		}

		public override ParameterInfo[] GetParameters()
		{
			ParameterInfo[] parameters = method.GetParameters();
			for (int i = 0; i < parameters.Length; i++)
			{
				parameters[i] = new GenericParameterInfoImpl(this, parameters[i]);
			}
			return parameters;
		}

		internal override int ParameterCount
		{
			get { return method.ParameterCount; }
		}

		public override CallingConventions CallingConvention
		{
			get { return method.CallingConvention; }
		}

		public override MethodAttributes Attributes
		{
			get { return method.Attributes; }
		}

		public override MethodImplAttributes GetMethodImplementationFlags()
		{
			return method.GetMethodImplementationFlags();
		}

		public override string Name
		{
			get { return method.Name; }
		}

		public override Type DeclaringType
		{
			get { return declaringType.IsModulePseudoType ? null : declaringType; }
		}

		public override Module Module
		{
			get { return method.Module; }
		}

		public override int MetadataToken
		{
			get { return method.MetadataToken; }
		}

		public override MethodBody GetMethodBody()
		{
			IKVM.Reflection.Reader.MethodDefImpl md = method as IKVM.Reflection.Reader.MethodDefImpl;
			if (md != null)
			{
				return md.GetMethodBody(this);
			}
			throw new NotSupportedException();
		}

		public override int __MethodRVA
		{
			get { return method.__MethodRVA; }
		}

		public override MethodInfo MakeGenericMethod(params Type[] typeArguments)
		{
			return new GenericMethodInstance(declaringType, method, typeArguments);
		}

		public override bool IsGenericMethod
		{
			get { return method.IsGenericMethod; }
		}

		public override bool IsGenericMethodDefinition
		{
			get { return method.IsGenericMethodDefinition && methodArgs == null; }
		}

		public override bool ContainsGenericParameters
		{
			get
			{
				if (declaringType.ContainsGenericParameters)
				{
					return true;
				}
				if (methodArgs != null)
				{
					foreach (Type type in methodArgs)
					{
						if (type.ContainsGenericParameters)
						{
							return true;
						}
					}
				}
				return false;
			}
		}

		public override MethodInfo GetGenericMethodDefinition()
		{
			if (this.IsGenericMethod)
			{
				if (this.IsGenericMethodDefinition)
				{
					return this;
				}
				else if (declaringType.IsConstructedGenericType)
				{
					return new GenericMethodInstance(declaringType, method, null);
				}
				else
				{
					return method;
				}
			}
			throw new InvalidOperationException();
		}

		public override MethodBase __GetMethodOnTypeDefinition()
		{
			return method;
		}

		public override Type[] GetGenericArguments()
		{
			if (methodArgs == null)
			{
				return method.GetGenericArguments();
			}
			else
			{
				return (Type[])methodArgs.Clone();
			}
		}

		internal override Type GetGenericMethodArgument(int index)
		{
			if (methodArgs == null)
			{
				return method.GetGenericMethodArgument(index);
			}
			else
			{
				return methodArgs[index];
			}
		}

		internal override int GetGenericMethodArgumentCount()
		{
			return method.GetGenericMethodArgumentCount();
		}

		internal override MethodInfo GetMethodOnTypeDefinition()
		{
			return method.GetMethodOnTypeDefinition();
		}

		internal override int ImportTo(Emit.ModuleBuilder module)
		{
			if (methodArgs == null)
			{
				return module.ImportMethodOrField(declaringType, method.Name, method.MethodSignature);
			}
			else
			{
				return module.ImportMethodSpec(declaringType, method, methodArgs);
			}
		}

		internal override MethodSignature MethodSignature
		{
			get { return lazyMethodSignature ?? (lazyMethodSignature = method.MethodSignature.Bind(declaringType, methodArgs)); }
		}

		internal override MethodBase BindTypeParameters(Type type)
		{
			System.Diagnostics.Debug.Assert(methodArgs == null);
			return new GenericMethodInstance(declaringType.BindTypeParameters(type), method, null);
		}

		internal override bool HasThis
		{
			get { return method.HasThis; }
		}

		public override MethodInfo[] __GetMethodImpls()
		{
			MethodInfo[] methods = method.__GetMethodImpls();
			for (int i = 0; i < methods.Length; i++)
			{
				methods[i] = (MethodInfo)methods[i].BindTypeParameters(declaringType);
			}
			return methods;
		}

		internal override int GetCurrentToken()
		{
			return method.GetCurrentToken();
		}

		internal override bool IsBaked
		{
			get { return method.IsBaked; }
		}
	}

	sealed class GenericFieldInstance : FieldInfo
	{
		private readonly Type declaringType;
		private readonly FieldInfo field;

		internal GenericFieldInstance(Type declaringType, FieldInfo field)
		{
			this.declaringType = declaringType;
			this.field = field;
		}

		public override bool Equals(object obj)
		{
			GenericFieldInstance other = obj as GenericFieldInstance;
			return other != null && other.declaringType.Equals(declaringType) && other.field.Equals(field);
		}

		public override int GetHashCode()
		{
			return declaringType.GetHashCode() * 3 ^ field.GetHashCode();
		}

		public override FieldAttributes Attributes
		{
			get { return field.Attributes; }
		}

		public override string Name
		{
			get { return field.Name; }
		}

		public override Type DeclaringType
		{
			get { return declaringType; }
		}

		public override Module Module
		{
			get { return declaringType.Module; }
		}

		public override int MetadataToken
		{
			get { return field.MetadataToken; }
		}

		public override object GetRawConstantValue()
		{
			return field.GetRawConstantValue();
		}

		public override void __GetDataFromRVA(byte[] data, int offset, int length)
		{
			field.__GetDataFromRVA(data, offset, length);
		}

		public override int __FieldRVA
		{
			get { return field.__FieldRVA; }
		}

		public override bool __TryGetFieldOffset(out int offset)
		{
			return field.__TryGetFieldOffset(out offset);
		}

		public override FieldInfo __GetFieldOnTypeDefinition()
		{
			return field;
		}

		internal override FieldSignature FieldSignature
		{
			get { return field.FieldSignature.ExpandTypeParameters(declaringType); }
		}

		internal override int ImportTo(Emit.ModuleBuilder module)
		{
			return module.ImportMethodOrField(declaringType, field.Name, field.FieldSignature);
		}

		internal override FieldInfo BindTypeParameters(Type type)
		{
			return new GenericFieldInstance(declaringType.BindTypeParameters(type), field);
		}

		internal override int GetCurrentToken()
		{
			return field.GetCurrentToken();
		}

		internal override bool IsBaked
		{
			get { return field.IsBaked; }
		}
	}

	sealed class GenericParameterInfoImpl : ParameterInfo
	{
		private readonly GenericMethodInstance method;
		private readonly ParameterInfo parameterInfo;

		internal GenericParameterInfoImpl(GenericMethodInstance method, ParameterInfo parameterInfo)
		{
			this.method = method;
			this.parameterInfo = parameterInfo;
		}

		public override string Name
		{
			get { return parameterInfo.Name; }
		}

		public override Type ParameterType
		{
			get { return parameterInfo.ParameterType.BindTypeParameters(method); }
		}

		public override ParameterAttributes Attributes
		{
			get { return parameterInfo.Attributes; }
		}

		public override int Position
		{
			get { return parameterInfo.Position; }
		}

		public override object RawDefaultValue
		{
			get { return parameterInfo.RawDefaultValue; }
		}

		public override CustomModifiers __GetCustomModifiers()
		{
			return parameterInfo.__GetCustomModifiers().Bind(method);
		}

		public override bool __TryGetFieldMarshal(out FieldMarshal fieldMarshal)
		{
			return parameterInfo.__TryGetFieldMarshal(out fieldMarshal);
		}

		public override MemberInfo Member
		{
			get { return method; }
		}

		public override int MetadataToken
		{
			get { return parameterInfo.MetadataToken; }
		}

		internal override Module Module
		{
			get { return method.Module; }
		}
	}

	sealed class GenericPropertyInfo : PropertyInfo
	{
		private readonly Type typeInstance;
		private readonly PropertyInfo property;

		internal GenericPropertyInfo(Type typeInstance, PropertyInfo property)
		{
			this.typeInstance = typeInstance;
			this.property = property;
		}

		public override bool Equals(object obj)
		{
			GenericPropertyInfo other = obj as GenericPropertyInfo;
			return other != null && other.typeInstance == typeInstance && other.property == property;
		}

		public override int GetHashCode()
		{
			return typeInstance.GetHashCode() * 537 + property.GetHashCode();
		}

		public override PropertyAttributes Attributes
		{
			get { return property.Attributes; }
		}

		public override bool CanRead
		{
			get { return property.CanRead; }
		}

		public override bool CanWrite
		{
			get { return property.CanWrite; }
		}

		private MethodInfo Wrap(MethodInfo method)
		{
			if (method == null)
			{
				return null;
			}
			return new GenericMethodInstance(typeInstance, method, null);
		}

		public override MethodInfo GetGetMethod(bool nonPublic)
		{
			return Wrap(property.GetGetMethod(nonPublic));
		}

		public override MethodInfo GetSetMethod(bool nonPublic)
		{
			return Wrap(property.GetSetMethod(nonPublic));
		}

		public override MethodInfo[] GetAccessors(bool nonPublic)
		{
			MethodInfo[] accessors = property.GetAccessors(nonPublic);
			for (int i = 0; i < accessors.Length; i++)
			{
				accessors[i] = Wrap(accessors[i]);
			}
			return accessors;
		}

		public override object GetRawConstantValue()
		{
			return property.GetRawConstantValue();
		}

		internal override bool IsPublic
		{
			get { return property.IsPublic; }
		}

		internal override bool IsNonPrivate
		{
			get { return property.IsNonPrivate; }
		}

		internal override bool IsStatic
		{
			get { return property.IsStatic; }
		}

		internal override PropertySignature PropertySignature
		{
			get { return property.PropertySignature.ExpandTypeParameters(typeInstance); }
		}

		public override string Name
		{
			get { return property.Name; }
		}

		public override Type DeclaringType
		{
			get { return typeInstance; }
		}

		public override Module Module
		{
			get { return typeInstance.Module; }
		}

		public override int MetadataToken
		{
			get { return property.MetadataToken; }
		}

		internal override PropertyInfo BindTypeParameters(Type type)
		{
			return new GenericPropertyInfo(typeInstance.BindTypeParameters(type), property);
		}

		internal override bool IsBaked
		{
			get { return property.IsBaked; }
		}

		internal override int GetCurrentToken()
		{
			return property.GetCurrentToken();
		}
	}

	sealed class GenericEventInfo : EventInfo
	{
		private readonly Type typeInstance;
		private readonly EventInfo eventInfo;

		internal GenericEventInfo(Type typeInstance, EventInfo eventInfo)
		{
			this.typeInstance = typeInstance;
			this.eventInfo = eventInfo;
		}

		public override bool Equals(object obj)
		{
			GenericEventInfo other = obj as GenericEventInfo;
			return other != null && other.typeInstance == typeInstance && other.eventInfo == eventInfo;
		}

		public override int GetHashCode()
		{
			return typeInstance.GetHashCode() * 777 + eventInfo.GetHashCode();
		}

		public override EventAttributes Attributes
		{
			get { return eventInfo.Attributes; }
		}

		private MethodInfo Wrap(MethodInfo method)
		{
			if (method == null)
			{
				return null;
			}
			return new GenericMethodInstance(typeInstance, method, null);
		}

		public override MethodInfo GetAddMethod(bool nonPublic)
		{
			return Wrap(eventInfo.GetAddMethod(nonPublic));
		}

		public override MethodInfo GetRaiseMethod(bool nonPublic)
		{
			return Wrap(eventInfo.GetRaiseMethod(nonPublic));
		}

		public override MethodInfo GetRemoveMethod(bool nonPublic)
		{
			return Wrap(eventInfo.GetRemoveMethod(nonPublic));
		}

		public override MethodInfo[] GetOtherMethods(bool nonPublic)
		{
			MethodInfo[] others = eventInfo.GetOtherMethods(nonPublic);
			for (int i = 0; i < others.Length; i++)
			{
				others[i] = Wrap(others[i]);
			}
			return others;
		}

		public override MethodInfo[] __GetMethods()
		{
			MethodInfo[] others = eventInfo.__GetMethods();
			for (int i = 0; i < others.Length; i++)
			{
				others[i] = Wrap(others[i]);
			}
			return others;
		}

		public override Type EventHandlerType
		{
			get { return eventInfo.EventHandlerType.BindTypeParameters(typeInstance); }
		}

		public override string Name
		{
			get { return eventInfo.Name; }
		}

		public override Type DeclaringType
		{
			get { return typeInstance; }
		}

		public override Module Module
		{
			get { return eventInfo.Module; }
		}

		public override int MetadataToken
		{
			get { return eventInfo.MetadataToken; }
		}

		internal override EventInfo BindTypeParameters(Type type)
		{
			return new GenericEventInfo(typeInstance.BindTypeParameters(type), eventInfo);
		}

		internal override bool IsPublic
		{
			get { return eventInfo.IsPublic; }
		}

		internal override bool IsNonPrivate
		{
			get { return eventInfo.IsNonPrivate; }
		}

		internal override bool IsStatic
		{
			get { return eventInfo.IsStatic; }
		}

		internal override bool IsBaked
		{
			get { return eventInfo.IsBaked; }
		}

		internal override int GetCurrentToken()
		{
			return eventInfo.GetCurrentToken();
		}
	}
}
@


1.35
log
@Added new API MethodInfo.__TryGetImplMap().
@
text
@a226 5
		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
		{
			return method.GetCustomAttributesData(attributeType);
		}

d274 5
d373 1
a373 1
		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
d375 1
a375 1
			return field.GetCustomAttributesData(attributeType);
d552 6
a557 1
		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
d559 1
a559 1
			return property.GetCustomAttributesData(attributeType);
d562 1
a562 1
		internal override PropertyInfo BindTypeParameters(Type type)
d564 1
a564 1
			return new GenericPropertyInfo(typeInstance.BindTypeParameters(type), property);
a663 5
		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
		{
			return eventInfo.GetCustomAttributesData(attributeType);
		}

d683 10
@


1.34
log
@Fixed regression in __TryGetFieldOffset. The FieldLayout.Field field is an index (not a token), except for unsaved modules where it is a pseudo token.
@
text
@d274 5
@


1.33
log
@Restored GetCustomAttributesData forwarding, to allow FieldBuilder to throw exception if the type has not yet been baked.
@
text
@d338 5
@


1.32
log
@All FieldInfo subclasses should implement GetCurrentToken().
@
text
@d362 5
@


1.31
log
@Moved __TryGetFieldOffset and __TryGetFieldMarshal up into FieldInfo.
@
text
@d357 5
@


1.30
log
@Moved common custom attribute code into FieldInfo.
@
text
@a337 10
		public override bool __TryGetFieldOffset(out int offset)
		{
			return field.__TryGetFieldOffset(out offset);
		}

		public override bool __TryGetFieldMarshal(out FieldMarshal fieldMarshal)
		{
			return field.__TryGetFieldMarshal(out fieldMarshal);
		}

@


1.29
log
@- Changed FieldInfo.__FieldOffset property to __TryGetFieldOffset() method.
- Implemented __TryGetFieldMarshal() & __TryGetFieldOffest() for FieldBuilder.
- Fixed FieldBuilder to throw NotImplementedException when trying to get custom attributes on unbaked type.
- Fixed FieldBuilder to return pseudo custom attributes (but it is currently still broken after the module has been saved).
@
text
@a352 5
		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
		{
			return field.GetCustomAttributesData(attributeType);
		}

@


1.28
log
@- Changed [Field|Parameter]Info.__FieldMarshal property to __TryGetFieldMarshal method.
- Changed FieldMarshal class into a value type with public fields.
@
text
@d338 1
a338 1
		public override int __FieldOffset
d340 1
a340 1
			get { return field.__FieldOffset; }
@


1.27
log
@- Added new public APIs FieldInfo.__FieldMarshal and ParameterInfo.__FieldMarshal.
- Moved ParameterInfo pseudo custom attribute handling to CustomAttributeData.
- Ignore HasFieldMarshal attribute and always return the pseudo custom attribute if a FieldMarshal record exists. This is similar to .NET reflection.
@
text
@d343 1
a343 1
		public override FieldMarshal __FieldMarshal
d345 1
a345 1
			get { return field.__FieldMarshal; }
d415 1
a415 1
		public override FieldMarshal __FieldMarshal
d417 1
a417 1
			get { return parameterInfo.__FieldMarshal; }
@


1.26
log
@Added public API FieldInfo.__FieldOffset to get the offset of the field (in an explicit layout type) without having to parse the pseudo custom attribute.
@
text
@d343 5
d415 5
@


1.25
log
@Added new .NET 4.5 API Type.IsConstructedGenericType.
@
text
@d338 5
@


1.24
log
@Made MethodSpec handling more consistent with MemberRef handling. This avoids the need for the caching the MethodInfo to token mappings (which leaks memory, because generic method instances are not canonicalized).
@
text
@d181 1
a181 1
				else if (declaringType.IsGenericTypeInstance)
@


1.23
log
@Moved GetEvents(), GetFields(), GetConstructors(), GetNestedTypes() and GetProperties() to a common implementation that fixes a number of bugs.
@
text
@d245 1
a245 14
				Writer.ByteBuffer spec = new Writer.ByteBuffer(10);
				Signature.WriteMethodSpec(module, spec, methodArgs);
				Metadata.MethodSpecTable.Record rec = new Metadata.MethodSpecTable.Record();
				Emit.MethodBuilder mb = method as Emit.MethodBuilder;
				if (mb != null && mb.ModuleBuilder == module && !declaringType.IsGenericType)
				{
					rec.Method = mb.MetadataToken;
				}
				else
				{
					rec.Method = module.ImportMember(GetGenericMethodDefinition());
				}
				rec.Instantiation = module.Blobs.Add(spec);
				return 0x2B000000 | module.MethodSpec.FindOrAddRecord(rec);
@


1.22
log
@Added new API MethodInfo.__GetMethodImpls() to efficiently get the MethodImpls for a specific method.
@
text
@d510 5
d667 5
@


1.21
log
@Added MethodBase.__MethodRVA property.
@
text
@d277 10
@


1.20
log
@- Rewrote custom modifier handling to retain ordering.
- Added ConstructorInfo.__ReturnParameter to expose custom modifiers.
- Added __GetCustomModifiers() to various *Info types.
- Added CustomModifiers type to encapsulate a custom modifier sequence.
- Added CustomModifiersBuilder to create a CustomModifiers sequence.
- Marked a number of IKVM.Reflection specific methods Obsolete, because they are replaced with method that take CustomModifiers value(s).
@
text
@d131 5
@


1.19
log
@Added API extension FieldInfo.__FieldRVA.
@
text
@d398 1
a398 1
		public override Type[] GetOptionalCustomModifiers()
d400 1
a400 10
			Type[] modifiers = parameterInfo.GetOptionalCustomModifiers();
			Type.InplaceBindTypeParameters(method, modifiers);
			return modifiers;
		}

		public override Type[] GetRequiredCustomModifiers()
		{
			Type[] modifiers = parameterInfo.GetRequiredCustomModifiers();
			Type.InplaceBindTypeParameters(method, modifiers);
			return modifiers;
@


1.18
log
@- Retain event method ordering.
- Allow duplicate event methods.
- Added API extension EventInfo.__GetMethods() to get all methods associated with an event.
@
text
@d331 5
@


1.17
log
@Added API extension FieldInfo.__GetFieldOnTypeDefinition().
@
text
@d601 10
@


1.16
log
@Added API extension __GetMethodOnTypeDefinition() to easily go from MethodBase on generic type instance to the equivalent MethodBase on the generic type definition.
The alternative way of doing this (mb.Module.ResolveMethod(mb.MetadataToken)) doesn't work with missing members, because they don't have a metadata token.
@
text
@d331 5
@


1.15
log
@Added Type.IsGenericTypeInstance to make it easier (and more efficient) to test for generic type instantiations. Note that this property can be called on missing types (it will return false), unlike both IsGenericType and IsGenericTypeDefinition.
@
text
@d188 5
@


1.14
log
@Forward HasThis to underlying method for generic method wrappers.
@
text
@d176 1
a176 1
				else if (declaringType.IsGenericType && !declaringType.IsGenericTypeDefinition)
@


1.13
log
@Avoid adding duplicate MethodSpec rows.
@
text
@d262 5
@


1.12
log
@Made signature binding lazy for GenericMethodInstance.
@
text
@d248 1
a248 1
				return 0x2B000000 | module.MethodSpec.AddRecord(rec);
@


1.11
log
@Moved ImportMethodSpec to GenericMethodInstance and fixed it to make sure that methods on generic type definitions are referred to via MemberRef.
@
text
@d37 1
a37 1
		private readonly MethodSignature signature;
a44 1
			this.signature = method.MethodSignature.Bind(declaringType, methodArgs);
d254 1
a254 1
			get { return signature; }
@


1.10
log
@DeclaringType should return null for global generic method instances.
@
text
@d2 1
a2 1
  Copyright (C) 2009 Jeroen Frijters
d238 12
a249 1
				return module.ImportMethodSpec(this, spec);
@


1.9
log
@Implemented custom attribute filtering at the source. Added support for custom attribute sub typing.
@
text
@d109 1
a109 1
			get { return declaringType; }
@


1.8
log
@Made __GetDataFromRVA more generic by taking an offset and a length (to be able to reuse the byte array) and this also removes the need for the field type to have a StructLayout.
@
text
@d218 1
a218 1
		internal override IList<CustomAttributeData> GetCustomAttributesData()
d220 1
a220 1
			return method.GetCustomAttributesData();
d311 1
a311 1
		internal override IList<CustomAttributeData> GetCustomAttributesData()
d313 1
a313 1
			return field.GetCustomAttributesData();
d504 1
a504 1
		internal override IList<CustomAttributeData> GetCustomAttributesData()
d506 1
a506 1
			return property.GetCustomAttributesData();
d601 1
a601 1
		internal override IList<CustomAttributeData> GetCustomAttributesData()
d603 1
a603 1
			return eventInfo.GetCustomAttributesData();
@


1.7
log
@Made property and event public/static flag handling compatible with .NET
@
text
@d306 1
a306 1
		public override void __GetDataFromRVA(byte[] data)
d308 1
a308 1
			field.__GetDataFromRVA(data);
@


1.6
log
@Generic property and event wrappers should also override Equals/GetHashCode.
@
text
@d474 5
d610 10
@


1.5
log
@Removed some no longer needed remnants from when we had multiple generic ParameterInfo wrapper implementations.
@
text
@d409 11
d521 11
@


1.4
log
@Generic methods and methods on generic type instance fixes.
@
text
@d69 1
a69 1
			get { return new GenericParameterInfoImpl(this, this, method.ReturnParameter); }
d75 4
a78 1
			WrapGenericParameterInfos(this, this, parameters);
d334 1
a334 2
		private readonly MemberInfo member;
		private readonly IGenericBinder binder;
d337 1
a337 1
		internal GenericParameterInfoImpl(MemberInfo member, IGenericBinder binder, ParameterInfo parameterInfo)
d339 1
a339 2
			this.member = member;
			this.binder = binder;
d350 1
a350 1
			get { return parameterInfo.ParameterType.BindTypeParameters(binder); }
d371 1
a371 1
			Type.InplaceBindTypeParameters(binder, modifiers);
d378 1
a378 1
			Type.InplaceBindTypeParameters(binder, modifiers);
d384 1
a384 1
			get { return member; }
d394 1
a394 1
			get { return member.Module; }
@


1.3
log
@Several IKVM.Reflection fixes related to generics.
- MethodImpls in generic type definitions should be resolved with typeArgs as context.
- Cleaned up member on generic type rebinding.
- Fixed __GetDeclaredProperties and __GetDeclaredEvents to rebind properly.
@
text
@d174 4
d180 1
a180 1
					return method.GetGenericMethodDefinition();
d235 1
a235 1
				return module.ImportMethodSpec(method, spec);
@


1.2
log
@Removed UTF-8 byte order marks.
@
text
@d41 1
d239 6
d318 5
d487 5
d573 5
@


1.1
log
@New IKVM.Reflection implementation.
@
text
@d1 1
a1 1
﻿/*
@

