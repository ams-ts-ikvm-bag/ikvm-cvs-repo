head	1.17;
access;
symbols
	v8_1_5717_0:1.17
	v8_1:1.17.0.8
	v8_0_5449_1:1.17
	v8_0_5449_0:1.17
	v8_0:1.17.0.6
	v7_4_5196_0:1.17
	v7_4:1.17.0.4
	v7_3:1.17.0.2
	v7_2_4630_6:1.16
	v7_2_4630_5:1.16
	v7_2_4630_4:1.16
	v7_2_4630_3:1.16
	v7_2_4630_2:1.16
	v0_46_0_4:1.7
	v7_2_4630_1:1.16
	v7_2:1.16.0.2
	v7_1_4532_2:1.13
	v7_1_4532_1:1.13
	v7_1_4532_0:1.13
	v7_1:1.13.0.2
	v7_0_4335_3:1.9
	v7_0_4335_2:1.9
	v7_0_4335_1:1.9
	v0_46_0_2:1.7
	v7_0_4335_0:1.9
	v7_0:1.9.0.2
	v0_46_0_1:1.7
	v0_46_0_0:1.7
	v0_46:1.7.0.2
	v0_44_0_6:1.6
	v0_44_0_5:1.6
	v0_44_0_4:1.6
	v0_44_0_3:1.6
	v0_44_0_2:1.6
	v0_44_0_1:1.6
	v0_44_0_0:1.6
	v0_44:1.6.0.2;
locks; strict;
comment	@ * @;


1.17
date	2012.10.11.10.11.27;	author jfrijters;	state Exp;
branches;
next	1.16;

1.16
date	2012.07.16.10.14.37;	author jfrijters;	state Exp;
branches;
next	1.15;

1.15
date	2012.07.13.06.33.30;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2012.07.12.15.10.58;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2012.04.11.13.00.31;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2012.04.10.09.07.54;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2012.04.10.06.18.32;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2011.12.01.06.30.50;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2011.09.29.05.51.30;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2011.03.10.10.49.17;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2011.01.13.05.58.54;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2010.04.18.08.39.20;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2010.02.26.09.26.20;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2010.02.25.10.46.29;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2010.01.27.06.12.37;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.01.25.05.49.01;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2010.01.25.05.29.31;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Added new .NET 4.5 properties PropertyInfo.GetMethod and PropertyInfo.SetMethod.
@
text
@/*
  Copyright (C) 2009-2012 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;
using System.Collections.Generic;

namespace IKVM.Reflection
{
	public abstract class PropertyInfo : MemberInfo
	{
		// prevent external subclasses
		internal PropertyInfo()
		{
		}

		public sealed override MemberTypes MemberType
		{
			get { return MemberTypes.Property; }
		}

		public abstract PropertyAttributes Attributes { get; }
		public abstract bool CanRead { get; }
		public abstract bool CanWrite { get; }
		public abstract MethodInfo GetGetMethod(bool nonPublic);
		public abstract MethodInfo GetSetMethod(bool nonPublic);
		public abstract MethodInfo[] GetAccessors(bool nonPublic);
		public abstract object GetRawConstantValue();
		internal abstract bool IsPublic { get; }
		internal abstract bool IsNonPrivate { get; }
		internal abstract bool IsStatic { get; }
		internal abstract PropertySignature PropertySignature { get; }

		private sealed class ParameterInfoImpl : ParameterInfo
		{
			private readonly PropertyInfo property;
			private readonly int parameter;

			internal ParameterInfoImpl(PropertyInfo property, int parameter)
			{
				this.property = property;
				this.parameter = parameter;
			}

			public override string Name
			{
				get { return null; }
			}

			public override Type ParameterType
			{
				get { return property.PropertySignature.GetParameter(parameter); }
			}

			public override ParameterAttributes Attributes
			{
				get { return ParameterAttributes.None; }
			}

			public override int Position
			{
				get { return parameter; }
			}

			public override object RawDefaultValue
			{
				get { throw new InvalidOperationException(); }
			}

			public override CustomModifiers __GetCustomModifiers()
			{
				return property.PropertySignature.GetParameterCustomModifiers(parameter);
			}

			public override bool __TryGetFieldMarshal(out FieldMarshal fieldMarshal)
			{
				fieldMarshal = new FieldMarshal();
				return false;
			}

			public override MemberInfo Member
			{
				get { return property; }
			}

			public override int MetadataToken
			{
				get { return 0x08000000; }
			}

			internal override Module Module
			{
				get { return property.Module; }
			}
		}

		public virtual ParameterInfo[] GetIndexParameters()
		{
			ParameterInfo[] parameters = new ParameterInfo[this.PropertySignature.ParameterCount];
			for (int i = 0; i < parameters.Length; i++)
			{
				parameters[i] = new ParameterInfoImpl(this, i);
			}
			return parameters;
		}

		public Type PropertyType
		{
			get { return this.PropertySignature.PropertyType; }
		}

		public CustomModifiers __GetCustomModifiers()
		{
			return this.PropertySignature.GetCustomModifiers();
		}

		public Type[] GetRequiredCustomModifiers()
		{
			return __GetCustomModifiers().GetRequired();
		}

		public Type[] GetOptionalCustomModifiers()
		{
			return __GetCustomModifiers().GetOptional();
		}

		public bool IsSpecialName
		{
			get { return (Attributes & PropertyAttributes.SpecialName) != 0; }
		}

		public MethodInfo GetMethod
		{
			get { return GetGetMethod(true); }
		}

		public MethodInfo SetMethod
		{
			get { return GetSetMethod(true); }
		}

		public MethodInfo GetGetMethod()
		{
			return GetGetMethod(false);
		}

		public MethodInfo GetSetMethod()
		{
			return GetSetMethod(false);
		}

		public MethodInfo[] GetAccessors()
		{
			return GetAccessors(false);
		}

		public CallingConventions __CallingConvention
		{
			get { return this.PropertySignature.CallingConvention; }
		}

		internal virtual PropertyInfo BindTypeParameters(Type type)
		{
			return new GenericPropertyInfo(this.DeclaringType.BindTypeParameters(type), this);
		}

		public override string ToString()
		{
			return this.DeclaringType.ToString() + " " + Name;
		}

		internal sealed override bool BindingFlagsMatch(BindingFlags flags)
		{
			return BindingFlagsMatch(IsPublic, flags, BindingFlags.Public, BindingFlags.NonPublic)
				&& BindingFlagsMatch(IsStatic, flags, BindingFlags.Static, BindingFlags.Instance);
		}

		internal sealed override bool BindingFlagsMatchInherited(BindingFlags flags)
		{
			return IsNonPrivate
				&& BindingFlagsMatch(IsPublic, flags, BindingFlags.Public, BindingFlags.NonPublic)
				&& BindingFlagsMatch(IsStatic, flags, BindingFlags.Static | BindingFlags.FlattenHierarchy, BindingFlags.Instance);
		}

		internal sealed override MemberInfo SetReflectedType(Type type)
		{
			return new PropertyInfoWithReflectedType(type, this);
		}

		internal sealed override List<CustomAttributeData> GetPseudoCustomAttributes(Type attributeType)
		{
			// properties don't have pseudo custom attributes
			return null;
		}
	}

	sealed class PropertyInfoWithReflectedType : PropertyInfo
	{
		private readonly Type reflectedType;
		private readonly PropertyInfo property;

		internal PropertyInfoWithReflectedType(Type reflectedType, PropertyInfo property)
		{
			this.reflectedType = reflectedType;
			this.property = property;
		}

		public override PropertyAttributes Attributes
		{
			get { return property.Attributes; }
		}

		public override bool CanRead
		{
			get { return property.CanRead; }
		}

		public override bool CanWrite
		{
			get { return property.CanWrite; }
		}

		public override MethodInfo GetGetMethod(bool nonPublic)
		{
			return SetReflectedType(property.GetGetMethod(nonPublic), reflectedType);
		}

		public override MethodInfo GetSetMethod(bool nonPublic)
		{
			return SetReflectedType(property.GetSetMethod(nonPublic), reflectedType);
		}

		public override MethodInfo[] GetAccessors(bool nonPublic)
		{
			return SetReflectedType(property.GetAccessors(nonPublic), reflectedType);
		}

		public override object GetRawConstantValue()
		{
			return property.GetRawConstantValue();
		}

		internal override bool IsPublic
		{
			get { return property.IsPublic; }
		}

		internal override bool IsNonPrivate
		{
			get { return property.IsNonPrivate; }
		}

		internal override bool IsStatic
		{
			get { return property.IsStatic; }
		}

		internal override PropertySignature PropertySignature
		{
			get { return property.PropertySignature; }
		}

		public override ParameterInfo[] GetIndexParameters()
		{
			ParameterInfo[] parameters = property.GetIndexParameters();
			for (int i = 0; i < parameters.Length; i++)
			{
				parameters[i] = new ParameterInfoWrapper(this, parameters[i]);
			}
			return parameters;
		}

		internal override PropertyInfo BindTypeParameters(Type type)
		{
			return property.BindTypeParameters(type);
		}

		public override string ToString()
		{
			return property.ToString();
		}

		public override bool __IsMissing
		{
			get { return property.__IsMissing; }
		}

		public override Type DeclaringType
		{
			get { return property.DeclaringType; }
		}

		public override Type ReflectedType
		{
			get { return reflectedType; }
		}

		public override bool Equals(object obj)
		{
			PropertyInfoWithReflectedType other = obj as PropertyInfoWithReflectedType;
			return other != null
				&& other.reflectedType == reflectedType
				&& other.property == property;
		}

		public override int GetHashCode()
		{
			return reflectedType.GetHashCode() ^ property.GetHashCode();
		}

		public override int MetadataToken
		{
			get { return property.MetadataToken; }
		}

		public override Module Module
		{
			get { return property.Module; }
		}

		public override string Name
		{
			get { return property.Name; }
		}

		internal override bool IsBaked
		{
			get { return property.IsBaked; }
		}

		internal override int GetCurrentToken()
		{
			return property.GetCurrentToken();
		}
	}
}
@


1.16
log
@Refactored custom attribute handling of MemberInfo types.
@
text
@d151 10
@


1.15
log
@- Changed [Field|Parameter]Info.__FieldMarshal property to __TryGetFieldMarshal method.
- Changed FieldMarshal class into a value type with public fields.
@
text
@d198 6
a319 5
		internal override IList<CustomAttributeData> GetCustomAttributesData(Type attributeType)
		{
			return property.GetCustomAttributesData(attributeType);
		}

d334 10
@


1.14
log
@- Added new public APIs FieldInfo.__FieldMarshal and ParameterInfo.__FieldMarshal.
- Moved ParameterInfo pseudo custom attribute handling to CustomAttributeData.
- Ignore HasFieldMarshal attribute and always return the pseudo custom attribute if a FieldMarshal record exists. This is similar to .NET reflection.
@
text
@d94 1
a94 1
			public override FieldMarshal __FieldMarshal
d96 2
a97 1
				get { return null; }
@


1.13
log
@Fixed two bugs in the ReflectedType wrappers for PropertyInfo and EventInfo:
- GetXxxMethod would throw a NullReferenceException if the corresponding method didn't exist.
- EventInfo.GetAccessors() called itself instead of the wrapped object.
@
text
@d94 5
@


1.12
log
@Added MemberInfo.ReflectedType.
@
text
@d222 1
a222 1
			return (MethodInfo)property.GetGetMethod(nonPublic).SetReflectedType(reflectedType);
d227 1
a227 1
			return (MethodInfo)property.GetSetMethod(nonPublic).SetReflectedType(reflectedType);
d232 1
a232 6
			MethodInfo[] methods = GetAccessors(nonPublic);
			for (int i = 0; i < methods.Length; i++)
			{
				methods[i] = (MethodInfo)methods[i].SetReflectedType(reflectedType);
			}
			return methods;
@


1.11
log
@Moved GetEvents(), GetFields(), GetConstructors(), GetNestedTypes() and GetProperties() to a common implementation that fixes a number of bugs.
@
text
@d2 1
a2 1
  Copyright (C) 2009 Jeroen Frijters
d25 1
d110 1
a110 1
		public ParameterInfo[] GetIndexParameters()
d187 145
@


1.10
log
@- Rewrote custom modifier handling to retain ordering.
- Added ConstructorInfo.__ReturnParameter to expose custom modifiers.
- Added __GetCustomModifiers() to various *Info types.
- Added CustomModifiers type to encapsulate a custom modifier sequence.
- Added CustomModifiersBuilder to create a CustomModifiers sequence.
- Marked a number of IKVM.Reflection specific methods Obsolete, because they are replaced with method that take CustomModifiers value(s).
@
text
@d48 1
d173 13
@


1.9
log
@Implemented ToString() for EventInfo and PropertyInfo.
@
text
@d87 1
a87 1
			public override Type[] GetOptionalCustomModifiers()
d89 1
a89 6
				return property.PropertySignature.GetOptionalCustomModifiers(parameter);
			}

			public override Type[] GetRequiredCustomModifiers()
			{
				return property.PropertySignature.GetRequiredCustomModifiers(parameter);
d123 5
d130 1
a130 1
			return this.PropertySignature.GetRequiredCustomModifiers();
d135 1
a135 1
			return this.PropertySignature.GetOptionalCustomModifiers();
@


1.8
log
@Added API extension to expose property calling convention.
@
text
@d167 5
@


1.7
log
@Prevent external subclassing. It's not part of the design to suppor that, now it is also enforced.
@
text
@d158 5
@


1.6
log
@Introduced Empty<T> to cache zero length arrays.
@
text
@d30 5
@


1.5
log
@Made property and event public/static flag handling compatible with .NET
@
text
@a29 2
		internal static readonly PropertyInfo[] EmptyArray = new PropertyInfo[0];

@


1.4
log
@Added workaround for the fact that Mono doesn't set the HasThis flag on property signatures.
@
text
@d45 1
a154 5
		internal virtual bool IsStatic
		{
			get { return !this.PropertySignature.HasThis; }
		}

@


1.3
log
@Several IKVM.Reflection fixes related to generics.
- MethodImpls in generic type definitions should be resolved with typeArgs as context.
- Cleaned up member on generic type rebinding.
- Fixed __GetDeclaredProperties and __GetDeclaredEvents to rebind properly.
@
text
@d154 1
a154 1
		internal bool IsStatic
@


1.2
log
@Removed UTF-8 byte order marks.
@
text
@d158 5
@


1.1
log
@New IKVM.Reflection implementation.
@
text
@d1 1
a1 1
﻿/*
@

