head	1.4;
access;
symbols
	v8_1_5717_0:1.4
	v8_1:1.4.0.4
	v8_0_5449_1:1.4
	v8_0_5449_0:1.4
	v8_0:1.4.0.2
	v7_4_5196_0:1.3
	v7_4:1.3.0.10
	v7_3:1.3.0.8
	v7_2_4630_6:1.3
	v7_2_4630_5:1.3
	v7_2_4630_4:1.3
	v7_2_4630_3:1.3
	v7_2_4630_2:1.3
	v0_46_0_4:1.1
	v7_2_4630_1:1.3
	v7_2:1.3.0.6
	v7_1_4532_2:1.3
	v7_1_4532_1:1.3
	v7_1_4532_0:1.3
	v7_1:1.3.0.4
	v7_0_4335_3:1.3
	v7_0_4335_2:1.3
	v7_0_4335_1:1.3
	v0_46_0_2:1.1
	v7_0_4335_0:1.3
	v7_0:1.3.0.2
	v0_40_0_6:1.1
	v0_40_0_5:1.1
	v0_46_0_1:1.1
	v0_46_0_0:1.1
	v0_46:1.1.0.18
	v0_36_0_14:1.1
	v0_44_0_6:1.1
	v0_44_0_5:1.1
	v0_44_0_4:1.1
	v0_44_0_3:1.1
	v0_44_0_2:1.1
	v0_42_0_7:1.1
	v0_44_0_1:1.1
	v0_44_0_0:1.1
	v0_44:1.1.0.16
	v0_42_0_6:1.1
	v0_42_0_5:1.1
	v0_42_0_4:1.1
	v0_42_0_3:1.1
	v0_42_0_2:1.1
	v0_42_0_1:1.1
	v0_42_0_0:1.1
	v0_42:1.1.0.14
	v0_40_0_3:1.1
	v0_40_0_2:1.1
	v0_40_0_1:1.1
	v0_40_0_0:1.1
	v0_40:1.1.0.12
	v0_36_0_13:1.1
	v0_38_0_1:1.1
	v0_38_0_0:1.1
	v0_38:1.1.0.10
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.8
	v0_34_0_3:1.1
	v0_34_0_2:1.1
	v0_34_0_1:1.1
	v0_34_0_0:1.1
	v0_34:1.1.0.6
	v0_32:1.1.0.4
	v0_32_0_0:1.1
	v0_30:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2014.05.19.12.43.30;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2011.07.06.12.43.05;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2011.05.13.07.29.31;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2006.07.03.09.41.02;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.4
log
@First part of OpenJDK 8 integration.
@
text
@/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file is available under and governed by the GNU General Public
 * License version 2 only, as published by the Free Software Foundation.
 * However, the following notice accompanied the original version of this
 * file:
 *
 * Written by Doug Lea with assistance from members of JCP JSR-166
 * Expert Group and released to the public domain, as explained at
 * http://creativecommons.org/publicdomain/zero/1.0/
 */

package java.util.concurrent.atomic;
import java.util.function.LongUnaryOperator;
import java.util.function.LongBinaryOperator;

/**
 * A {@@code long} array in which elements may be updated atomically.
 * See the {@@link java.util.concurrent.atomic} package specification
 * for description of the properties of atomic variables.
 * @@since 1.5
 * @@author Doug Lea
 */
public class AtomicLongArray implements java.io.Serializable {
    private static final long serialVersionUID = -2308431214976778248L;

    private final long[] array;

    /**
     * Creates a new AtomicLongArray of the given length, with all
     * elements initially zero.
     *
     * @@param length the length of the array
     */
    public AtomicLongArray(int length) {
        array = new long[length];
    }

    /**
     * Creates a new AtomicLongArray with the same length as, and
     * all elements copied from, the given array.
     *
     * @@param array the array to copy elements from
     * @@throws NullPointerException if array is null
     */
    public AtomicLongArray(long[] array) {
        // Visibility guaranteed by final field guarantees
        this.array = array.clone();
    }

    /**
     * Returns the length of the array.
     *
     * @@return the length of the array
     */
    public final int length() {
        return array.length;
    }

    /**
     * Gets the current value at position {@@code i}.
     *
     * @@param i the index
     * @@return the current value
     */
    public final native long get(int i);

    /**
     * Sets the element at position {@@code i} to the given value.
     *
     * @@param i the index
     * @@param newValue the new value
     */
    public final native void set(int i, long newValue);

    /**
     * Eventually sets the element at position {@@code i} to the given value.
     *
     * @@param i the index
     * @@param newValue the new value
     * @@since 1.6
     */
    public final void lazySet(int i, long newValue) {
        set(i, newValue);
    }

    /**
     * Atomically sets the element at position {@@code i} to the given value
     * and returns the old value.
     *
     * @@param i the index
     * @@param newValue the new value
     * @@return the previous value
     */
    public final native long getAndSet(int i, long newValue);

    /**
     * Atomically sets the element at position {@@code i} to the given
     * updated value if the current value {@@code ==} the expected value.
     *
     * @@param i the index
     * @@param expect the expected value
     * @@param update the new value
     * @@return {@@code true} if successful. False return indicates that
     * the actual value was not equal to the expected value.
     */
    public final native boolean compareAndSet(int i, long expect, long update);

    /**
     * Atomically sets the element at position {@@code i} to the given
     * updated value if the current value {@@code ==} the expected value.
     *
     * <p><a href="package-summary.html#weakCompareAndSet">May fail
     * spuriously and does not provide ordering guarantees</a>, so is
     * only rarely an appropriate alternative to {@@code compareAndSet}.
     *
     * @@param i the index
     * @@param expect the expected value
     * @@param update the new value
     * @@return {@@code true} if successful
     */
    public final boolean weakCompareAndSet(int i, long expect, long update) {
        return compareAndSet(i, expect, update);
    }

    /**
     * Atomically increments by one the element at index {@@code i}.
     *
     * @@param i the index
     * @@return the previous value
     */
    public final long getAndIncrement(int i) {
        return incrementAndGet(i) - 1;
    }

    /**
     * Atomically decrements by one the element at index {@@code i}.
     *
     * @@param i the index
     * @@return the previous value
     */
    public final long getAndDecrement(int i) {
        return decrementAndGet(i) + 1;
    }

    /**
     * Atomically adds the given value to the element at index {@@code i}.
     *
     * @@param i the index
     * @@param delta the value to add
     * @@return the previous value
     */
    public final long getAndAdd(int i, long delta) {
        return addAndGet(i, delta) - delta;
    }

    /**
     * Atomically increments by one the element at index {@@code i}.
     *
     * @@param i the index
     * @@return the updated value
     */
    public final native long incrementAndGet(int i);

    /**
     * Atomically decrements by one the element at index {@@code i}.
     *
     * @@param i the index
     * @@return the updated value
     */
    public final native long decrementAndGet(int i);

    /**
     * Atomically adds the given value to the element at index {@@code i}.
     *
     * @@param i the index
     * @@param delta the value to add
     * @@return the updated value
     */
    public native long addAndGet(int i, long delta);

    /**
     * Atomically updates the element at index {@@code i} with the results
     * of applying the given function, returning the previous value. The
     * function should be side-effect-free, since it may be re-applied
     * when attempted updates fail due to contention among threads.
     *
     * @@param i the index
     * @@param updateFunction a side-effect-free function
     * @@return the previous value
     * @@since 1.8
     */
    public final long getAndUpdate(int i, LongUnaryOperator updateFunction) {
        long prev, next;
        do {
            prev = get(i);
            next = updateFunction.applyAsLong(prev);
        } while (!compareAndSet(i, prev, next));
        return prev;
    }

    /**
     * Atomically updates the element at index {@@code i} with the results
     * of applying the given function, returning the updated value. The
     * function should be side-effect-free, since it may be re-applied
     * when attempted updates fail due to contention among threads.
     *
     * @@param i the index
     * @@param updateFunction a side-effect-free function
     * @@return the updated value
     * @@since 1.8
     */
    public final long updateAndGet(int i, LongUnaryOperator updateFunction) {
        long prev, next;
        do {
            prev = get(i);
            next = updateFunction.applyAsLong(prev);
        } while (!compareAndSet(i, prev, next));
        return next;
    }

    /**
     * Atomically updates the element at index {@@code i} with the
     * results of applying the given function to the current and
     * given values, returning the previous value. The function should
     * be side-effect-free, since it may be re-applied when attempted
     * updates fail due to contention among threads.  The function is
     * applied with the current value at index {@@code i} as its first
     * argument, and the given update as the second argument.
     *
     * @@param i the index
     * @@param x the update value
     * @@param accumulatorFunction a side-effect-free function of two arguments
     * @@return the previous value
     * @@since 1.8
     */
    public final long getAndAccumulate(int i, long x,
                                      LongBinaryOperator accumulatorFunction) {
        long prev, next;
        do {
            prev = get(i);
            next = accumulatorFunction.applyAsLong(prev, x);
        } while (!compareAndSet(i, prev, next));
        return prev;
    }

    /**
     * Atomically updates the element at index {@@code i} with the
     * results of applying the given function to the current and
     * given values, returning the updated value. The function should
     * be side-effect-free, since it may be re-applied when attempted
     * updates fail due to contention among threads.  The function is
     * applied with the current value at index {@@code i} as its first
     * argument, and the given update as the second argument.
     *
     * @@param i the index
     * @@param x the update value
     * @@param accumulatorFunction a side-effect-free function of two arguments
     * @@return the updated value
     * @@since 1.8
     */
    public final long accumulateAndGet(int i, long x,
                                      LongBinaryOperator accumulatorFunction) {
        long prev, next;
        do {
            prev = get(i);
            next = accumulatorFunction.applyAsLong(prev, x);
        } while (!compareAndSet(i, prev, next));
        return next;
    }

    /**
     * Returns the String representation of the current values of array.
     * @@return the String representation of the current values of array
     */
    public String toString() {
        int iMax = array.length - 1;
        if (iMax == -1)
            return "[]";

        StringBuilder b = new StringBuilder();
        b.append('[');
        for (int i = 0; ; i++) {
            b.append(get(i));
            if (i == iMax)
                return b.append(']').toString();
            b.append(',').append(' ');
        }
    }

}
@


1.3
log
@Updated java.util.concurrent.* packages to OpenJDK 7.
@
text
@d37 2
a38 1
import java.util.*;
a109 1

d127 1
a127 1
     * @@return true if successful. False return indicates that
d136 3
a138 3
     * <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
     * and does not provide ordering guarantees, so is only rarely an
     * appropriate alternative to {@@code compareAndSet}.
d143 1
a143 1
     * @@return true if successful.
d206 90
d297 1
a297 1
     * @@return the String representation of the current values of array.
@


1.2
log
@- Updated AtomicInteger, AtomicIntegerArray, AtomicLonger, AtomicLongerArray to use .NET 2.0 interlocked operations.
- Added stind_i8 opcode to remapper.
@
text
@d2 17
a18 3
 * Written by Doug Lea with assistance from members of JCP JSR-166
 * Expert Group and released to the public domain, as explained at
 * http://creativecommons.org/licenses/publicdomain
d20 3
a22 1
 * Modified for IKVM.NET by Jeroen Frijters
d26 9
a34 22
  Parts Copyright (C) 2006-2011 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
d40 1
a40 1
 * A <tt>long</tt> array in which elements may be updated atomically.
d52 2
a53 1
     * Creates a new AtomicLongArray of given length.
a58 3
        // must perform at least one volatile write to conform to JMM
        if (length > 0)
            set(0, 0);
d69 2
a70 11
        if (array == null)
            throw new NullPointerException();
        int length = array.length;
        this.array = new long[length];
        if (length > 0) {
            int last = length-1;
            for (int i = 0; i < last; ++i)
                this.array[i] = array[i];
            // Do the last write as volatile
            set(last, array[last]);
        }
d83 1
a83 1
     * Gets the current value at position <tt>i</tt>.
d91 1
a91 1
     * Sets the element at position <tt>i</tt> to the given value.
d99 1
a99 1
     * Eventually sets the element at position <tt>i</tt> to the given value.
d111 1
a111 1
     * Atomically sets the element at position <tt>i</tt> to the given value
d121 2
a122 2
     * Atomically sets the value to the given updated value
     * if the current value <tt>==</tt> the expected value.
d133 6
a138 4
     * Atomically sets the value to the given updated value
     * if the current value <tt>==</tt> the expected value.
     * May fail spuriously and does not provide ordering guarantees,
     * so is only rarely an appropriate alternative to <tt>compareAndSet</tt>.
d150 1
a150 1
     * Atomically increments by one the element at index <tt>i</tt>.
d160 1
a160 1
     * Atomically decrements by one the element at index <tt>i</tt>.
d170 1
a170 1
     * Atomically adds the given value to the element at index <tt>i</tt>.
d181 1
a181 1
     * Atomically increments by one the element at index <tt>i</tt>.
d189 1
a189 1
     * Atomically decrements by one the element at index <tt>i</tt>.
d197 1
a197 1
     * Atomically adds the given value to the element at index <tt>i</tt>.
d210 12
a221 3
        if (array.length > 0) // force volatile read
            get(0);
        return Arrays.toString(array);
@


1.1
log
@*** empty log message ***
@
text
@d10 1
a10 1
  Parts Copyright (C) 2006 Jeroen Frijters
d55 3
d72 3
a74 2
        synchronized (this) {
            for (int i = 0; i < array.length; i++)
d76 2
d96 1
a96 3
    public final synchronized long get(int i) {
        return array[i];
    }
d104 1
a104 3
    public final synchronized void set(int i, long newValue) {
        array[i] = newValue;
    }
d126 1
a126 5
    public final synchronized long getAndSet(int i, long newValue) {
        long v = array[i];
        array[i] = newValue;
        return v;
    }
d138 1
a138 7
    public final synchronized boolean compareAndSet(int i, long expect, long update) {
        if (array[i] == expect) {
            array[i] = update;
            return true;
        }
        return false;
    }
d161 2
a162 2
    public final synchronized long getAndIncrement(int i) {
        return array[i]++;
d171 2
a172 2
    public final synchronized long getAndDecrement(int i) {
        return array[i]--;
d182 2
a183 4
    public final synchronized long getAndAdd(int i, long delta) {
        long v = array[i];
        array[i] += delta;
        return v;
d192 1
a192 3
    public final synchronized long incrementAndGet(int i) {
        return ++array[i];
    }
d200 1
a200 3
    public final synchronized long decrementAndGet(int i) {
        return --array[i];
    }
d209 1
a209 4
    public synchronized long addAndGet(int i, long delta) {
        array[i] += delta;
        return array[i];
    }
@

