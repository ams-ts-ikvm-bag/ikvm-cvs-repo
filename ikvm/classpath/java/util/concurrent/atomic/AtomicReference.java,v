head	1.4;
access;
symbols
	v8_1_5717_0:1.4
	v8_1:1.4.0.4
	v8_0_5449_1:1.4
	v8_0_5449_0:1.4
	v8_0:1.4.0.2
	v7_4_5196_0:1.2
	v7_4:1.2.0.10
	v7_3:1.2.0.8
	v7_2_4630_6:1.2
	v7_2_4630_5:1.2
	v7_2_4630_4:1.2
	v7_2_4630_3:1.2
	v7_2_4630_2:1.2
	v0_46_0_4:1.1
	v7_2_4630_1:1.2
	v7_2:1.2.0.6
	v7_1_4532_2:1.2
	v7_1_4532_1:1.2
	v7_1_4532_0:1.2
	v7_1:1.2.0.4
	v7_0_4335_3:1.2
	v7_0_4335_2:1.2
	v7_0_4335_1:1.2
	v0_46_0_2:1.1
	v7_0_4335_0:1.2
	v7_0:1.2.0.2
	v0_40_0_6:1.1
	v0_40_0_5:1.1
	v0_46_0_1:1.1
	v0_46_0_0:1.1
	v0_46:1.1.0.18
	v0_36_0_14:1.1
	v0_44_0_6:1.1
	v0_44_0_5:1.1
	v0_44_0_4:1.1
	v0_44_0_3:1.1
	v0_44_0_2:1.1
	v0_42_0_7:1.1
	v0_44_0_1:1.1
	v0_44_0_0:1.1
	v0_44:1.1.0.16
	v0_42_0_6:1.1
	v0_42_0_5:1.1
	v0_42_0_4:1.1
	v0_42_0_3:1.1
	v0_42_0_2:1.1
	v0_42_0_1:1.1
	v0_42_0_0:1.1
	v0_42:1.1.0.14
	v0_40_0_3:1.1
	v0_40_0_2:1.1
	v0_40_0_1:1.1
	v0_40_0_0:1.1
	v0_40:1.1.0.12
	v0_36_0_13:1.1
	v0_38_0_1:1.1
	v0_38_0_0:1.1
	v0_38:1.1.0.10
	v0_36_0_9:1.1
	v0_36_0_7:1.1
	v0_36_0_5:1.1
	v0_36_0_4:1.1
	v0_36_0_3:1.1
	v0_36_0_2:1.1
	v0_36_0_1:1.1
	v0_36_0_0:1.1
	v0_36:1.1.0.8
	v0_34_0_3:1.1
	v0_34_0_2:1.1
	v0_34_0_1:1.1
	v0_34_0_0:1.1
	v0_34:1.1.0.6
	v0_32:1.1.0.4
	v0_32_0_0:1.1
	v0_30:1.1.0.2;
locks; strict;
comment	@# @;


1.4
date	2014.05.26.12.21.18;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2014.05.19.12.43.30;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2011.07.06.12.43.05;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2006.06.09.13.17.55;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Replaced AtomicReference[Array].getAndSet() implementations with Interlocked.Exchange() based implementations.
@
text
@/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * This file is available under and governed by the GNU General Public
 * License version 2 only, as published by the Free Software Foundation.
 * However, the following notice accompanied the original version of this
 * file:
 *
 * Written by Doug Lea with assistance from members of JCP JSR-166
 * Expert Group and released to the public domain, as explained at
 * http://creativecommons.org/publicdomain/zero/1.0/
 */

package java.util.concurrent.atomic;
import java.util.function.UnaryOperator;
import java.util.function.BinaryOperator;

/**
 * An object reference that may be updated atomically. See the {@@link
 * java.util.concurrent.atomic} package specification for description
 * of the properties of atomic variables.
 * @@since 1.5
 * @@author Doug Lea
 * @@param <V> The type of object referred to by this reference
 */
public class AtomicReference<V> implements java.io.Serializable {
    private static final long serialVersionUID = -1848883965231344442L;

    private volatile V value;

    /**
     * Creates a new AtomicReference with the given initial value.
     *
     * @@param initialValue the initial value
     */
    public AtomicReference(V initialValue) {
        value = initialValue;
    }

    /**
     * Creates a new AtomicReference with null initial value.
     */
    public AtomicReference() {
    }

    /**
     * Gets the current value.
     *
     * @@return the current value
     */
    public final V get() {
        return value;
    }

    /**
     * Sets to the given value.
     *
     * @@param newValue the new value
     */
    public final void set(V newValue) {
        value = newValue;
    }

    /**
     * Eventually sets to the given value.
     *
     * @@param newValue the new value
     * @@since 1.6
     */
    public final void lazySet(V newValue) {
        value = newValue;
    }

    /**
     * Atomically sets the value to the given updated value
     * if the current value {@@code ==} the expected value.
     * @@param expect the expected value
     * @@param update the new value
     * @@return {@@code true} if successful. False return indicates that
     * the actual value was not equal to the expected value.
     */
    public final native boolean compareAndSet(V expect, V update);

    /**
     * Atomically sets the value to the given updated value
     * if the current value {@@code ==} the expected value.
     *
     * <p><a href="package-summary.html#weakCompareAndSet">May fail
     * spuriously and does not provide ordering guarantees</a>, so is
     * only rarely an appropriate alternative to {@@code compareAndSet}.
     *
     * @@param expect the expected value
     * @@param update the new value
     * @@return {@@code true} if successful
     */
    public final boolean weakCompareAndSet(V expect, V update) {
        return compareAndSet(expect, update);
    }

    /**
     * Atomically sets to the given value and returns the old value.
     *
     * @@param newValue the new value
     * @@return the previous value
     */
    @@SuppressWarnings("unchecked")
    public final native V getAndSet(V newValue);

    /**
     * Atomically updates the current value with the results of
     * applying the given function, returning the previous value. The
     * function should be side-effect-free, since it may be re-applied
     * when attempted updates fail due to contention among threads.
     *
     * @@param updateFunction a side-effect-free function
     * @@return the previous value
     * @@since 1.8
     */
    public final V getAndUpdate(UnaryOperator<V> updateFunction) {
        V prev, next;
        do {
            prev = get();
            next = updateFunction.apply(prev);
        } while (!compareAndSet(prev, next));
        return prev;
    }

    /**
     * Atomically updates the current value with the results of
     * applying the given function, returning the updated value. The
     * function should be side-effect-free, since it may be re-applied
     * when attempted updates fail due to contention among threads.
     *
     * @@param updateFunction a side-effect-free function
     * @@return the updated value
     * @@since 1.8
     */
    public final V updateAndGet(UnaryOperator<V> updateFunction) {
        V prev, next;
        do {
            prev = get();
            next = updateFunction.apply(prev);
        } while (!compareAndSet(prev, next));
        return next;
    }

    /**
     * Atomically updates the current value with the results of
     * applying the given function to the current and given values,
     * returning the previous value. The function should be
     * side-effect-free, since it may be re-applied when attempted
     * updates fail due to contention among threads.  The function
     * is applied with the current value as its first argument,
     * and the given update as the second argument.
     *
     * @@param x the update value
     * @@param accumulatorFunction a side-effect-free function of two arguments
     * @@return the previous value
     * @@since 1.8
     */
    public final V getAndAccumulate(V x,
                                    BinaryOperator<V> accumulatorFunction) {
        V prev, next;
        do {
            prev = get();
            next = accumulatorFunction.apply(prev, x);
        } while (!compareAndSet(prev, next));
        return prev;
    }

    /**
     * Atomically updates the current value with the results of
     * applying the given function to the current and given values,
     * returning the updated value. The function should be
     * side-effect-free, since it may be re-applied when attempted
     * updates fail due to contention among threads.  The function
     * is applied with the current value as its first argument,
     * and the given update as the second argument.
     *
     * @@param x the update value
     * @@param accumulatorFunction a side-effect-free function of two arguments
     * @@return the updated value
     * @@since 1.8
     */
    public final V accumulateAndGet(V x,
                                    BinaryOperator<V> accumulatorFunction) {
        V prev, next;
        do {
            prev = get();
            next = accumulatorFunction.apply(prev, x);
        } while (!compareAndSet(prev, next));
        return next;
    }

    /**
     * Returns the String representation of the current value.
     * @@return the String representation of the current value
     */
    public String toString() {
        return String.valueOf(get());
    }

}
@


1.3
log
@First part of OpenJDK 8 integration.
@
text
@d129 1
a129 7
    public final V getAndSet(V newValue) {
        while (true) {
            V x = get();
            if (compareAndSet(x, newValue))
                return x;
        }
    }
@


1.2
log
@Updated java.util.concurrent.* packages to OpenJDK 7.
@
text
@d37 2
d48 1
a48 1
public class AtomicReference<V>  implements java.io.Serializable {
d101 1
a101 1
     * @@return true if successful. False return indicates that
d110 3
a112 3
     * <p>May <a href="package-summary.html#Spurious">fail spuriously</a>
     * and does not provide ordering guarantees, so is only rarely an
     * appropriate alternative to {@@code compareAndSet}.
d116 1
a116 1
     * @@return true if successful.
d128 1
d138 86
d225 1
a225 1
     * @@return the String representation of the current value.
@


1.1
log
@*** empty log message ***
@
text
@d2 17
a18 3
 * Written by Doug Lea with assistance from members of JCP JSR-166
 * Expert Group and released to the public domain, as explained at
 * http://creativecommons.org/licenses/publicdomain
d20 3
a22 1
 * Modified for IKVM.NET by Jeroen Frijters
d26 9
a34 22
  Parts Copyright (C) 2006 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
d96 1
a96 1
     * if the current value <tt>==</tt> the expected value.
d106 6
a111 2
     * if the current value <tt>==</tt> the expected value.
     * May fail spuriously.
@

