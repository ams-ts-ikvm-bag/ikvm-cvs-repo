head	1.13;
access;
symbols
	initial:1.1.1.1 ikvm:1.1.1;
locks; strict;
comment	@# @;


1.13
date	2004.04.23.14.21.46;	author jfrijters;	state dead;
branches;
next	1.12;

1.12
date	2004.04.02.08.19.16;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2004.04.02.08.13.14;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2003.08.21.10.06.36;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2003.06.13.15.13.22;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2003.05.30.12.09.01;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2003.05.22.07.44.41;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2003.05.22.07.27.33;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.26.12.13.02;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.17.14.02.46;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.06.13.56.37;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.27.09.33.15;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.16.00.58;	author jfrijters;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.12.18.16.00.58;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.13
log
@*** empty log message ***
@
text
@/* FileDescriptor.java -- Opaque file handle class
   Copyright (C) 1998,2003 Free Software Foundation, Inc.

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.
 
GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */


package java.io;

import cli.System.Console;
import cli.System.IO.*;
import ikvm.lang.ByteArrayHack;

/**
  * This class represents an opaque file handle as a Java class.  It should
  * be used only to pass to other methods that expect an object of this
  * type.  No system specific information can be obtained from this object.
  *
  * @@author Aaron M. Renn (arenn@@urbanophile.com)
  * @@author Jeroen Frijters (jeroen@@sumatra.nl)
  */
public final class FileDescriptor
{
    public static final FileDescriptor in = new FileDescriptor(Console.OpenStandardInput());
    public static final FileDescriptor out = new FileDescriptor(Console.OpenStandardOutput());
    public static final FileDescriptor err = new FileDescriptor(Console.OpenStandardError());
    private Stream stream;

    static final int SET = SeekOrigin.Begin;
    static final int CUR = SeekOrigin.Current;
    static final int END = SeekOrigin.End;

    // These are mode values for open().
    static final int READ   = 1;
    static final int WRITE  = 2;
    static final int APPEND = 4;
    // NOTE EXCL is not used!
    //static final int EXCL   = 8;
    static final int SYNC   = 16;
    static final int DSYNC  = 32;

    public FileDescriptor()
    {
    }

    public FileDescriptor(Stream stream)
    {
	this.stream = stream;
    }

    FileDescriptor(String path, int mode) throws FileNotFoundException
    {
	open(path, mode);
    }

    public synchronized void sync() throws SyncFailedException
    {
	if(stream == null)
	{
	    throw new SyncFailedException("The handle is invalid");
	}
	try
	{
	    if(false) throw new cli.System.IO.IOException();
	    stream.Flush();
	}
	catch(cli.System.IO.IOException x)
	{
	    throw new SyncFailedException(x.getMessage());
	}
    }

    public synchronized boolean valid()
    {
	return stream != null;
    }

    synchronized void close() throws IOException
    {
	if(stream != null)
	{
	    // HACK don't close stdin because that throws a NotSupportedException (bug in System.IO.__ConsoleStream)
	    if(stream != in.stream)
	    {
		try
		{
		    stream.Close();
		    if(false) throw new cli.System.IO.IOException();
		}
		catch(cli.System.IO.IOException x)
		{
		    throw new IOException(x.getMessage());
		}
	    }
	    stream = null;
	}
    }

    private static String demanglePath(String path)
    {
	// HACK for some reason Java accepts: \c:\foo.txt
	// I don't know what else, but for now lets just support this
	if(path.length() > 3 && (path.charAt(0) == '\\' || path.charAt(0) == '/') && path.charAt(2) == ':')
	{
	    path = path.substring(1);
	}
	return path;
    }

    private void open(String path, int mode) throws FileNotFoundException
    {
	if(stream != null)
	    throw new InternalError("FileDescriptor already open");
	if ((path == null) || path.equals(""))
	    throw new IllegalArgumentException("Path cannot be null");
	try
	{
	    int fileMode;
	    int fileAccess;
	    int fileShare;
	    // NOTE we don't support SYNC or DSYNC
	    switch(mode & (READ|WRITE|APPEND))
	    {
		case READ:
		    fileMode = FileMode.Open;
		    fileAccess = FileAccess.Read;
		    break;
		case READ|WRITE:
		    fileMode = FileMode.OpenOrCreate;
		    fileAccess = FileAccess.ReadWrite;
		    break;
		case WRITE:
		    fileMode = FileMode.Create;
		    fileAccess = FileAccess.Write;
		    break;
		case APPEND:
		case APPEND|WRITE:
		    fileMode = FileMode.Append;
		    fileAccess = FileAccess.Write;
		    break;
		default:
		    throw new IllegalArgumentException("Invalid mode value: " + mode);
	    }
	    if(false) throw new cli.System.IO.IOException();
	    if(false) throw new cli.System.Security.SecurityException();
	    if(false) throw new cli.System.UnauthorizedAccessException();
	    stream = cli.System.IO.File.Open(demanglePath(path), FileMode.wrap(fileMode), FileAccess.wrap(fileAccess), FileShare.wrap(FileShare.ReadWrite));
	}
	catch(cli.System.Security.SecurityException x1)
	{
	    throw new SecurityException(x1.getMessage());
	}
	catch(cli.System.IO.IOException x2)
	{
	    throw new FileNotFoundException(x2.getMessage());
	}
	catch(cli.System.UnauthorizedAccessException x3)
	{
	    // this is caused by "name" being a directory instead of a file
	    throw new FileNotFoundException(x3.getMessage());
	}
	// TODO map al the other exceptions as well...
    }

    synchronized long getFilePointer() throws IOException
    {
	if(stream == null)
	    throw new IOException("Invalid FileDescriptor");

	try
	{
	    if(false) throw new cli.System.IO.IOException();
	    return stream.get_Position();
	}
	catch(cli.System.IO.IOException x)
	{
	    throw new IOException(x.getMessage());
	}
	// TODO map al the other exceptions as well...
    }

    synchronized long getLength() throws IOException
    {
	if(stream == null)
	    throw new IOException("Invalid FileDescriptor");

	try
	{
	    if(false) throw new cli.System.IO.IOException();
	    return stream.get_Length();
	}
	catch(cli.System.IO.IOException x)
	{
	    throw new IOException(x.getMessage());
	}
	// TODO map al the other exceptions as well...
    }

    synchronized void setLength(long len) throws IOException
    {
	if(stream == null)
	    throw new IOException("Invalid FileDescriptor");

	if (len < 0)
	    throw new IllegalArgumentException("Length cannot be less than zero " +
		len);

	try
	{
	    if(false) throw new cli.System.IO.IOException();
	    stream.SetLength(len);
	}
	catch(cli.System.IO.IOException x)
	{
	    throw new IOException(x.getMessage());
	}
	// TODO map al the other exceptions as well...
    }

    synchronized long seek(long offset, int whence, boolean stopAtEof) throws IOException
    {
	if(stream == null)
	    throw new IOException("Invalid FileDescriptor");

	if ((whence != SET) && (whence != CUR) && (whence != END))
	    throw new IllegalArgumentException("Invalid whence value: " + whence);

	try
	{
	    if(false) throw new cli.System.IO.IOException();
	    long newpos = stream.Seek(offset, SeekOrigin.wrap(whence));
	    if(stopAtEof && newpos > stream.get_Length())
	    {
		newpos = stream.Seek(0, SeekOrigin.wrap(SeekOrigin.End));
	    }
	    return newpos;
	}
	catch(cli.System.IO.IOException x)
	{
	    throw new IOException(x.getMessage());
	}
	// TODO map al the other exceptions as well...
    }

    synchronized int read() throws IOException
    {
	if(stream == null)
	    throw new IOException("Invalid FileDescriptor");

	try
	{
	    if(false) throw new cli.System.IO.IOException();
	    stream.Flush();
	    return stream.ReadByte();
	}
	catch(cli.System.IO.IOException x)
	{
	    throw new IOException(x.getMessage());
	}
	// TODO map al the other exceptions as well...
    }

    synchronized int read(byte[] buf, int offset, int len) throws IOException
    {
	if(stream == null)
	    throw new IOException("Invalid FileDescriptor");

	if (len == 0)
	    return(0);

	if ((offset < 0) || (offset > buf.length))
	    throw new IllegalArgumentException("Offset invalid: " + offset);

	if ((len < 0) || (len > (buf.length - offset)))
	    throw new IllegalArgumentException("Length invalid: " + len);

	try
	{
	    if(false) throw new cli.System.IO.IOException();
	    stream.Flush();
	    int count = stream.Read(ByteArrayHack.cast(buf), offset, len);
	    if(count == 0)
	    {
		count = -1;
	    }
	    return count;
	}
	catch(cli.System.IO.IOException x)
	{
	    throw new IOException(x.getMessage());
	}
	// TODO map al the other exceptions as well...
    }

    synchronized void write(int b) throws IOException
    {
	// HACK we can't call WriteByte because it takes a cli.System.Byte
	write(new byte[] { (byte)b }, 0, 1);
    }

    synchronized void write(byte[] buf, int offset, int len) throws IOException
    {
	if(stream == null)
	    throw new IOException("Invalid FileDescriptor");

	if (len == 0)
	    return;

	if ((offset < 0) || (offset > buf.length))
	    throw new IllegalArgumentException("Offset invalid: " + offset);

	if ((len < 0) || (len > (buf.length - offset)))
	    throw new IllegalArgumentException("Length invalid: " + len);

	try
	{
	    if(false) throw new cli.System.IO.IOException();
	    stream.Write(ByteArrayHack.cast(buf), offset, len);
	    // NOTE FileStream buffers the output, so we have to flush explicitly
	    stream.Flush();
	}
	catch(cli.System.IO.IOException x)
	{
	    throw new IOException(x.getMessage());
	}
	// TODO map al the other exceptions as well...
    }

    synchronized int available() throws IOException
    {
	if(stream == null)
	    throw new IOException("Invalid FileDescriptor");

	try
	{
	    if(false) throw new cli.System.IO.IOException();
	    if(false) throw new cli.System.NotSupportedException();
	    if(stream.get_CanSeek())
		return (int)Math.min(Integer.MAX_VALUE, Math.max(0, stream.get_Length() - stream.get_Position()));
	    return 0;
	}
	catch(cli.System.IO.IOException x)
	{
	    throw new IOException(x.getMessage());
	}
	catch(cli.System.NotSupportedException x1)
	{
	    // this means we have a broken Stream, because if CanSeek returns true, it must
	    // support Length and Position
	    return 0;
	}
    }
} // class FileDescriptor
@


1.12
log
@*** empty log message ***
@
text
@@


1.11
log
@*** empty log message ***
@
text
@d284 1
d311 1
@


1.10
log
@*** empty log message ***
@
text
@d348 2
@


1.9
log
@*** empty log message ***
@
text
@d41 3
a43 2
import system.Console;
import system.io.*;
d95 1
a95 1
	    if(false) throw new system.io.IOException();
d98 1
a98 1
	catch(system.io.IOException x)
d100 1
a100 1
	    throw new SyncFailedException(x.get_Message());
d119 1
a119 1
		    if(false) throw new system.io.IOException();
d121 1
a121 1
		catch(system.io.IOException x)
d123 1
a123 1
		    throw new IOException(x.get_Message());
d175 4
a178 4
	    if(false) throw new system.io.IOException();
	    if(false) throw new system.security.SecurityException();
	    if(false) throw new system.UnauthorizedAccessException();
	    stream = system.io.File.Open(demanglePath(path), fileMode, fileAccess, FileShare.ReadWrite);
d180 1
a180 1
	catch(system.security.SecurityException x1)
d182 1
a182 1
	    throw new SecurityException(x1.get_Message());
d184 1
a184 1
	catch(system.io.IOException x2)
d186 1
a186 1
	    throw new FileNotFoundException(x2.get_Message());
d188 1
a188 1
	catch(system.UnauthorizedAccessException x3)
d191 1
a191 1
	    throw new FileNotFoundException(x3.get_Message());
d203 1
a203 1
	    if(false) throw new system.io.IOException();
d206 1
a206 1
	catch(system.io.IOException x)
d208 1
a208 1
	    throw new IOException(x.get_Message());
d220 1
a220 1
	    if(false) throw new system.io.IOException();
d223 1
a223 1
	catch(system.io.IOException x)
d225 1
a225 1
	    throw new IOException(x.get_Message());
d241 1
a241 1
	    if(false) throw new system.io.IOException();
d244 1
a244 1
	catch(system.io.IOException x)
d246 1
a246 1
	    throw new IOException(x.get_Message());
d261 2
a262 2
	    if(false) throw new system.io.IOException();
	    long newpos = stream.Seek(offset, whence);
d265 1
a265 1
		newpos = stream.Seek(0, SeekOrigin.End);
d269 1
a269 1
	catch(system.io.IOException x)
d271 1
a271 1
	    throw new IOException(x.get_Message());
d283 1
a283 1
	    if(false) throw new system.io.IOException();
d286 1
a286 1
	catch(system.io.IOException x)
d288 1
a288 1
	    throw new IOException(x.get_Message());
d309 2
a310 2
	    if(false) throw new system.io.IOException();
	    int count = stream.Read(buf, offset, len);
d317 1
a317 1
	catch(system.io.IOException x)
d319 1
a319 1
	    throw new IOException(x.get_Message());
d326 2
a327 14
	if(stream == null)
	{
	    throw new IOException("Invalid FileDescriptor");
	}
	try
	{
	    if(false) throw new system.io.IOException();
	    stream.WriteByte((byte)b);
	}
	catch(system.io.IOException x)
	{
	    throw new IOException(x.get_Message());
	}
	// TODO map al the other exceptions as well...
d346 2
a347 2
	    if(false) throw new system.io.IOException();
	    stream.Write(buf, offset, len);
d349 1
a349 1
	catch(system.io.IOException x)
d351 1
a351 1
	    throw new IOException(x.get_Message());
d363 2
a364 2
	    if(false) throw new system.io.IOException();
	    if(false) throw new system.NotSupportedException();
d369 1
a369 1
	catch(system.io.IOException x)
d371 1
a371 1
	    throw new IOException(x.get_Message());
d373 1
a373 1
	catch(system.NotSupportedException x1)
@


1.8
log
@*** empty log message ***
@
text
@d167 1
@


1.7
log
@*** empty log message ***
@
text
@d54 4
a57 4
	public static final FileDescriptor in = new FileDescriptor(Console.OpenStandardInput());
	public static final FileDescriptor out = new FileDescriptor(Console.OpenStandardOutput());
	public static final FileDescriptor err = new FileDescriptor(Console.OpenStandardError());
	private Stream stream;
d59 34
a92 1
	public FileDescriptor()
d94 2
d97 1
a97 2

	public FileDescriptor(Stream stream)
d99 1
a99 1
		this.stream = stream;
d101 1
d103 8
a110 1
	public synchronized void sync() throws SyncFailedException
d112 3
a114 4
		if(stream == null)
		{
			throw new SyncFailedException("The handle is invalid");
		}
d117 2
a118 2
			if(false) throw new system.io.IOException();
			stream.Flush();
d122 1
a122 1
			throw new SyncFailedException(x.get_Message());
d124 2
d127 1
d129 5
a133 1
	public synchronized boolean valid()
d135 1
a135 1
		return stream != null;
d137 2
d140 47
a186 1
	synchronized void close() throws IOException
d188 2
a189 17
		if(stream != null)
		{
			// HACK don't close stdin because that throws a NotSupportedException (bug in System.IO.__ConsoleStream)
			if(stream != in.stream)
			{
				try
				{
					stream.Close();
					if(false) throw new system.io.IOException();
				}
				catch(system.io.IOException x)
				{
					throw new IOException(x.get_Message());
				}
			}
			stream = null;
		}
d191 7
d199 1
a199 1
	private static String demanglePath(String path)
d201 2
a202 7
		// HACK for some reason Java accepts: \c:\foo.txt
		// I don't know what else, but for now lets just support this
		if(path.length() > 3 && (path.charAt(0) == '\\' || path.charAt(0) == '/') && path.charAt(2) == ':')
		{
			path = path.substring(1);
		}
		return path;
d204 1
a204 2

	synchronized void open(String path, String mode) throws IOException
d206 1
a206 64
		if(stream != null)
			throw new IOException("FileDescriptor already open");
		if ((path == null) || path.equals(""))
			throw new IllegalArgumentException("Path cannot be null");
		try
		{
			int fileMode;
			int fileAccess;
			if(mode.equals("r"))
			{
				fileMode = FileMode.Open;
				fileAccess = FileAccess.Read;
			}
			else if(mode.equals("rw"))
			{
				fileMode = FileMode.OpenOrCreate;
				fileAccess = FileAccess.ReadWrite;
			}
			else if(mode.equals("rws") || mode.equals("rwd"))
			{
				// TODO implement this
				throw new IllegalArgumentException("rws and rwd not implemented");
				//fileMode = FileMode.OpenOrCreate;
				//fileAccess = FileAccess.ReadWrite;
			}
			else if(mode.equals("rwa"))
			{
				// TODO this is a bogus mode
				fileMode = FileMode.Append;
				fileAccess = FileAccess.ReadWrite;
			}
			else if(mode.equals("w"))
			{
				fileMode = FileMode.Create;
				fileAccess = FileAccess.Write;
			}
			else if(mode.equals("a"))
			{
				fileMode = FileMode.Append;
				fileAccess = FileAccess.Write;
			}
			else
			{
				throw new IllegalArgumentException("Invalid mode value: " + mode);
			}
			if(false) throw new system.io.IOException();
			if(false) throw new system.security.SecurityException();
			if(false) throw new system.UnauthorizedAccessException();
			stream = system.io.File.Open(demanglePath(path), fileMode, fileAccess, FileShare.ReadWrite);
		}
		catch(system.security.SecurityException x1)
		{
			throw new SecurityException(x1.get_Message());
		}
		catch(system.io.IOException x2)
		{
			throw new FileNotFoundException(x2.get_Message());
		}
		catch(system.UnauthorizedAccessException x3)
		{
			// this is caused by "name" being a directory instead of a file
			throw new FileNotFoundException(x3.get_Message());
		}
		// TODO map al the other exceptions as well...
d208 2
d211 6
a216 1
	synchronized long getFilePointer() throws IOException
d218 2
a219 13
		if(stream == null)
			throw new IOException("Invalid FileDescriptor");

		try
		{
			if(false) throw new system.io.IOException();
			return stream.get_Position();
		}
		catch(system.io.IOException x)
		{
			throw new IOException(x.get_Message());
		}
		// TODO map al the other exceptions as well...
d221 1
a221 2

	synchronized long getLength() throws IOException
d223 1
a223 13
		if(stream == null)
			throw new IOException("Invalid FileDescriptor");

		try
		{
			if(false) throw new system.io.IOException();
			return stream.get_Length();
		}
		catch(system.io.IOException x)
		{
			throw new IOException(x.get_Message());
		}
		// TODO map al the other exceptions as well...
d225 2
d228 4
a231 4
	synchronized void setLength(long len) throws IOException
	{
		if(stream == null)
			throw new IOException("Invalid FileDescriptor");
d233 3
a235 3
		if (len < 0)
			throw new IllegalArgumentException("Length cannot be less than zero " +
				len);
d237 8
a244 10
		try
		{
			if(false) throw new system.io.IOException();
			stream.SetLength(len);
		}
		catch(system.io.IOException x)
		{
			throw new IOException(x.get_Message());
		}
		// TODO map al the other exceptions as well...
d246 2
d249 4
a252 3
	static final int SET = SeekOrigin.Begin;
	static final int CUR = SeekOrigin.Current;
	static final int END = SeekOrigin.End;
d254 14
a267 1
	synchronized long seek(long offset, int whence, boolean stopAtEof) throws IOException
d269 4
a272 2
		if(stream == null)
			throw new IOException("Invalid FileDescriptor");
d274 4
a277 2
		if ((whence != SET) && (whence != CUR) && (whence != END))
			throw new IllegalArgumentException("Invalid whence value: " + whence);
d279 4
a282 15
		try
		{
			if(false) throw new system.io.IOException();
			long newpos = stream.Seek(offset, whence);
			if(stopAtEof && newpos > stream.get_Length())
			{
				newpos = stream.Seek(0, SeekOrigin.End);
			}
			return newpos;
		}
		catch(system.io.IOException x)
		{
			throw new IOException(x.get_Message());
		}
		// TODO map al the other exceptions as well...
d284 1
a284 2

	synchronized int read() throws IOException
d286 1
a286 13
		if(stream == null)
			throw new IOException("Invalid FileDescriptor");

		try
		{
			if(false) throw new system.io.IOException();
			return stream.ReadByte();
		}
		catch(system.io.IOException x)
		{
			throw new IOException(x.get_Message());
		}
		// TODO map al the other exceptions as well...
d288 2
d291 4
a294 4
	synchronized int read(byte[] buf, int offset, int len) throws IOException
	{
		if(stream == null)
			throw new IOException("Invalid FileDescriptor");
d296 2
a297 2
		if (len == 0)
			return(0);
d299 2
a300 2
		if ((offset < 0) || (offset > buf.length))
			throw new IllegalArgumentException("Offset invalid: " + offset);
d302 2
a303 2
		if ((len < 0) || (len > (buf.length - offset)))
			throw new IllegalArgumentException("Length invalid: " + len);
d305 13
a317 15
		try
		{
			if(false) throw new system.io.IOException();
			int count = stream.Read(buf, offset, len);
			if(count == 0)
			{
				count = -1;
			}
			return count;
		}
		catch(system.io.IOException x)
		{
			throw new IOException(x.get_Message());
		}
		// TODO map al the other exceptions as well...
d319 2
d322 12
a333 1
	synchronized void write(int b) throws IOException
d335 1
a335 14
		if(stream == null)
		{
			throw new IOException("Invalid FileDescriptor");
		}
		try
		{
			if(false) throw new system.io.IOException();
			stream.WriteByte((byte)b);
		}
		catch(system.io.IOException x)
		{
			throw new IOException(x.get_Message());
		}
		// TODO map al the other exceptions as well...
d337 2
d340 4
a343 4
	synchronized void write(byte[] buf, int offset, int len) throws IOException
	{
		if(stream == null)
			throw new IOException("Invalid FileDescriptor");
d345 2
a346 2
		if (len == 0)
			return;
d348 2
a349 2
		if ((offset < 0) || (offset > buf.length))
			throw new IllegalArgumentException("Offset invalid: " + offset);
d351 2
a352 2
		if ((len < 0) || (len > (buf.length - offset)))
			throw new IllegalArgumentException("Length invalid: " + len);
d354 8
a361 10
		try
		{
			if(false) throw new system.io.IOException();
			stream.Write(buf, offset, len);
		}
		catch(system.io.IOException x)
		{
			throw new IOException(x.get_Message());
		}
		// TODO map al the other exceptions as well...
d363 7
d371 1
a371 1
	synchronized int available() throws IOException
d373 15
a387 21
		if(stream == null)
			throw new IOException("Invalid FileDescriptor");

		try
		{
		    if(false) throw new system.io.IOException();
		    if(false) throw new system.NotSupportedException();
		    if(stream.get_CanSeek())
			    return (int)Math.min(Integer.MAX_VALUE, Math.max(0, stream.get_Length() - stream.get_Position()));
		    return 0;
		}
		catch(system.io.IOException x)
		{
		    throw new IOException(x.get_Message());
		}
		catch(system.NotSupportedException x1)
		{
		    // this means we have a broken Stream, because if CanSeek returns true, it must
		    // support Length and Position
		    return 0;
		}
d389 1
@


1.6
log
@*** empty log message ***
@
text
@d371 18
a388 4
		if(stream.get_CanSeek())
			return (int)Math.max(Integer.MAX_VALUE, stream.get_Length() - stream.get_Position());

		return 0;
@


1.5
log
@*** empty log message ***
@
text
@d371 3
a373 1
		// TODO might need to implement this
@


1.4
log
@*** empty log message ***
@
text
@a373 6

	long getNativeFd()
	{
		throw new Error("getNativeFd not supported");
	}

@


1.3
log
@no message
@
text
@d1 37
a37 2
/*
  Copyright (C) 2002 Jeroen Frijters
a38 20
  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
d44 8
d122 1
a122 6
	static final int Append = 0;	// FileMode.Append, FileAccess.Write (FileOutputStream(append = true))
	static final int Write = 1;		// FileMode.Create, FileAccess.Write (FileOutputStream(append = false))
	static final int Read = 2;		// FileMode.Open, FileAccess.Read (FileInputStream, RandomAccessFile("r"))
	static final int ReadWrite = 3; // FileMode.OpenOrCreate, FileAccess.ReadWrite (RandomAccessFile("rw"))

	static FileDescriptor open(String name, int mode) throws FileNotFoundException
d124 4
d132 34
a165 1
			switch(mode)
d167 1
a167 18
				case Append:
					fileMode = FileMode.Append;
					fileAccess = FileAccess.Write;
					break;
				case Write:
					fileMode = FileMode.Create;
					fileAccess = FileAccess.Write;
					break;
				case Read:
					fileMode = FileMode.Open;
					fileAccess = FileAccess.Read;
					break;
				case ReadWrite:
					fileMode = FileMode.OpenOrCreate;
					fileAccess = FileAccess.ReadWrite;
					break;
				default:
					throw new Error("Invalid mode: " + mode);
d172 1
a172 2
			FileStream fs = system.io.File.Open(demanglePath(name), fileMode, fileAccess, FileShare.ReadWrite);
			return new FileDescriptor(fs);
d193 2
a194 3
		{
			throw new IOException();
		}
d210 2
a211 3
		{
			throw new IOException();
		}
d224 1
a224 1
	synchronized void setLength(long length) throws IOException
d227 7
d235 6
a240 1
			throw new IOException();
d242 15
d260 6
a265 1
			stream.SetLength(length);
d274 1
a274 1
	synchronized void seek(long pos) throws IOException
d277 2
a278 3
		{
			throw new IOException();
		}
d282 1
a282 1
			stream.Seek(pos, SeekOrigin.Begin);
d291 1
a291 1
	synchronized int read(byte[] buf, int offset, int length) throws IOException
d294 11
a304 3
		{
			throw new IOException();
		}
d308 6
a313 1
			return stream.Read(buf, offset, length);
d322 1
a322 1
	synchronized void write(byte[] buf, int offset, int length) throws IOException
d326 1
a326 1
			throw new IOException();
d331 1
a331 1
			stream.Write(buf, offset, length);
d340 1
a340 1
	synchronized long skip(long n) throws IOException
d343 11
a353 3
		{
			throw new IOException();
		}
d357 1
a357 4
			// TODO this is broken, because non-seekable streams should support skip as well...
			// (and I don't think we should seek past EOF here)
			stream.Seek(n, SeekOrigin.Current);
			return n;
d365 16
a380 1
}
@


1.2
log
@no message
@
text
@d40 1
a40 1
	private FileDescriptor(Stream stream)
@


1.1
log
@Initial revision
@
text
@d92 1
a92 1
		if(path.length() > 3 && path.charAt(0) == '\\' && path.charAt(2) == ':')
d99 6
a104 1
	static FileDescriptor open(String name, boolean append, boolean create, boolean read, boolean write) throws FileNotFoundException
d108 23
d133 2
a134 3
			FileStream fs = system.io.File.Open(demanglePath(name),
				append ? FileMode.Append : (create ? FileMode.OpenOrCreate : FileMode.Open),
				write ? (read ? FileAccess.ReadWrite : FileAccess.Write) : FileAccess.Read, FileShare.ReadWrite);
d144 5
@


1.1.1.1
log
@no message
@
text
@@
