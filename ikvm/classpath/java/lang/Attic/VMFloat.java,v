head	1.4;
access;
symbols
	v0_36_0_14:1.3
	v0_36_0_13:1.3
	v0_36_0_9:1.3
	v0_36_0_7:1.3
	v0_36_0_5:1.3
	v0_36_0_4:1.3
	v0_36_0_3:1.3
	v0_36_0_2:1.3
	v0_36_0_1:1.3
	v0_36_0_0:1.3
	v0_36:1.3.0.2
	v0_34_0_3:1.2
	v0_34_0_2:1.2
	v0_34_0_1:1.2
	v0_34_0_0:1.2
	v0_34:1.2.0.6
	v0_32:1.2.0.4
	v0_32_0_0:1.2
	v0_30:1.2.0.2
	v0_28_0_0:1.2
	v0_26_0_1:1.2
	v0_26_0_0:1.2
	v0_24_0_1:1.2
	v0_24_0_0:1.2
	v0_22_0_0:1.2
	v0_20_0_0:1.2
	v0_18_0_0:1.2
	v0_16_0_0:1.2
	v0_14_0_1:1.2
	v0_14_0_0:1.2
	v0_12_0_0:1.2
	v0_10_0_1:1.2
	v0_10_0_0:1.2
	v0_8_0_0:1.2;
locks; strict;
comment	@# @;


1.4
date	2008.08.06.12.51.17;	author jfrijters;	state dead;
branches;
next	1.3;

1.3
date	2007.05.11.08.55.39;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2003.08.21.10.06.36;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2003.07.25.14.53.02;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.4
log
@Removed files that are no longer needed no that GNU Classpath support has been dropped.
@
text
@/*
  Copyright (C) 2003, 2007 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/

package java.lang;

import sun.misc.FloatingDecimal;

final class VMFloat
{
    static float intBitsToFloat(int v)
    {
	return cli.System.BitConverter.ToSingle(cli.System.BitConverter.GetBytes(v), 0);
    }

    static int floatToIntBits(float v)
    {
	if(Float.isNaN(v))
	{
	    return 0x7fc00000;
	}
	return cli.System.BitConverter.ToInt32(cli.System.BitConverter.GetBytes(v), 0);
    }

    static int floatToRawIntBits(float v)
    {
	return cli.System.BitConverter.ToInt32(cli.System.BitConverter.GetBytes(v), 0);
    }

    static String toString(float f)
    {
	return new FloatingDecimal(f).toJavaFormatString();
    }

    static float parseFloat(String str)
    {
	return FloatingDecimal.readJavaFormatString(str).floatValue();
    }
}
@


1.3
log
@Imported Sun's GPLed Double/Float toString and parsing code to fix the long standing incompatibilities. Update license and copyright texts to note the inclusion of Sun code.
Note that FloatingDecimal has a couple of IKVM specific changes to work around a bug in the x64 CLR JIT. These changes are marked with /*IKVM*/
@
text
@@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2003 Jeroen Frijters
d27 2
d49 10
@


1.1
log
@*** empty log message ***
@
text
@d31 1
a31 1
	return system.BitConverter.ToSingle(system.BitConverter.GetBytes(v), 0);
d40 1
a40 1
	return system.BitConverter.ToInt32(system.BitConverter.GetBytes(v), 0);
d45 1
a45 1
	return system.BitConverter.ToInt32(system.BitConverter.GetBytes(v), 0);
@

