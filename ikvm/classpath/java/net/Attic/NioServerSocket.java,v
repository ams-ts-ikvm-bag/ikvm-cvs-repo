head	1.3;
access;
symbols
	v0_36_0_14:1.2
	v0_36_0_13:1.2
	v0_36_0_9:1.2
	v0_36_0_7:1.2
	v0_36_0_5:1.2
	v0_36_0_4:1.2
	v0_36_0_3:1.2
	v0_36_0_2:1.2
	v0_36_0_1:1.2
	v0_36_0_0:1.2
	v0_36:1.2.0.2
	v0_34_0_3:1.1.4.1
	v0_34_0_2:1.1.4.1
	v0_34_0_1:1.1
	v0_34_0_0:1.1
	v0_34:1.1.0.4
	v0_32:1.1.0.2
	v0_32_0_0:1.1;
locks; strict;
comment	@# @;


1.3
date	2008.08.06.12.51.21;	author jfrijters;	state dead;
branches;
next	1.2;

1.2
date	2007.04.28.10.41.47;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2006.09.20.05.53.39;	author jfrijters;	state Exp;
branches
	1.1.4.1;
next	;

1.1.4.1
date	2007.04.29.08.50.49;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Removed files that are no longer needed no that GNU Classpath support has been dropped.
@
text
@/*
  Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
package java.net;

import gnu.java.net.PlainSocketImpl;
import ikvm.lang.Internal;
import java.io.IOException;
import java.nio.channels.IllegalBlockingModeException;
import java.nio.channels.ServerSocketChannel;

@@Internal
public final class NioServerSocket extends ServerSocket
{
    private ServerSocketChannel channel;
    private PlainSocketImpl impl;

    public NioServerSocket(ServerSocketChannel channel) throws IOException
    {
        super(new PlainSocketImpl());
        this.channel = channel;
        this.impl = (PlainSocketImpl)getImpl();
    }

    public Socket accept() throws IOException
    {
        if(channel.isBlocking() && !pollAccept())
            throw new IllegalBlockingModeException();

        return super.accept();
    }

    public ServerSocketChannel getChannel()
    {
        return channel;
    }

    public cli.System.Net.Sockets.Socket getSocket()
    {
        return impl.getSocket();
    }

    public boolean pollAccept() throws IOException
    {
        return impl.pollAccept();
    }

    public void accept(SocketImpl _impl) throws IOException
    {
        impl.accept(_impl);
    }

	public static void setFlags(Socket sock)
	{
		sock.implCreated = true;
		sock.bound = true;
	}
}
@


1.2
log
@- Fixed SocketChannel's underlying socket state for SocketChannels returned by ServerSocketChannel.accept()
- Fixed handling of read returning -1
@
text
@@


1.1
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2002, 2003, 2004, 2005, 2006 Jeroen Frijters
d72 6
@


1.1.4.1
log
@Backported socket fixes and NIO pipe implementation.
@
text
@d2 1
a2 1
  Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Jeroen Frijters
a71 6

	public static void setFlags(Socket sock)
	{
		sock.implCreated = true;
		sock.bound = true;
	}
@


