head	1.20;
access;
symbols
	v0_36_0_14:1.19
	v0_36_0_13:1.19
	v0_36_0_9:1.19
	v0_36_0_7:1.19
	v0_36_0_5:1.19
	v0_36_0_4:1.19
	v0_36_0_3:1.19
	v0_36_0_2:1.19
	v0_36_0_1:1.19
	v0_36_0_0:1.19
	v0_36:1.19.0.2
	v0_34_0_3:1.16.4.1
	v0_34_0_2:1.16.4.1
	v0_34_0_1:1.16
	v0_34_0_0:1.16
	v0_34:1.16.0.4
	v0_32:1.16.0.2
	v0_32_0_0:1.16
	v0_30:1.10.0.2
	v0_28_0_0:1.8
	v0_26_0_1:1.7
	v0_26_0_0:1.6
	v0_24_0_1:1.6
	v0_24_0_0:1.6
	v0_22_0_0:1.6
	v0_20_0_0:1.6
	v0_18_0_0:1.6
	v0_16_0_0:1.6
	v0_14_0_1:1.5
	v0_14_0_0:1.5
	v0_12_0_0:1.5
	v0_10_0_1:1.4
	v0_10_0_0:1.4
	v0_8_0_0:1.2;
locks; strict;
comment	@# @;


1.20
date	2008.08.06.12.51.15;	author jfrijters;	state dead;
branches;
next	1.19;

1.19
date	2007.05.08.12.20.40;	author jfrijters;	state Exp;
branches;
next	1.18;

1.18
date	2007.04.28.10.40.13;	author jfrijters;	state Exp;
branches;
next	1.17;

1.17
date	2007.04.18.08.08.00;	author jfrijters;	state Exp;
branches;
next	1.16;

1.16
date	2006.11.01.10.15.48;	author jfrijters;	state Exp;
branches
	1.16.4.1;
next	1.15;

1.15
date	2006.09.24.18.44.51;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2006.09.23.07.59.47;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.22.05.52.10;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.20.05.53.38;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.08.07.26.26;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.10.09.37.07;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.07.07.27.31;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2006.03.23.11.57.44;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.11.18.35.30;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.28.11.40.01;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.02.15.12.00;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.21.10.26.52;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.16.11.11.54;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2004.02.06.19.09.32;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.17.08.08.32;	author jfrijters;	state Exp;
branches;
next	;

1.16.4.1
date	2007.04.29.08.50.49;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.20
log
@Removed files that are no longer needed no that GNU Classpath support has been dropped.
@
text
@/*
  Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
package gnu.java.net;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.net.*;
import cli.System.Net.IPAddress;
import cli.System.Net.IPEndPoint;
import cli.System.Net.Sockets.SelectMode;
import cli.System.Net.Sockets.SocketOptionName;
import cli.System.Net.Sockets.SocketOptionLevel;
import cli.System.Net.Sockets.SocketFlags;
import cli.System.Net.Sockets.SocketType;
import cli.System.Net.Sockets.ProtocolType;
import cli.System.Net.Sockets.AddressFamily;
import cli.System.Net.Sockets.SocketShutdown;
import ikvm.lang.CIL;

public final class PlainSocketImpl extends SocketImpl
{
    // Winsock Error Codes
    private static final int WSAEWOULDBLOCK    = 10035;
    private static final int WSAEADDRINUSE     = 10048;
    private static final int WSAENETUNREACH    = 10051;
    private static final int WSAESHUTDOWN      = 10058;
    private static final int WSAETIMEDOUT      = 10060;
    private static final int WSAECONNREFUSED   = 10061;
    private static final int WSAEHOSTUNREACH   = 10065;
    private static final int WSAHOST_NOT_FOUND = 11001;

    static IOException convertSocketExceptionToIOException(cli.System.Net.Sockets.SocketException x) throws IOException
    {
        switch(x.get_ErrorCode())
        {
            case WSAEADDRINUSE:
                return new BindException(x.getMessage());
            case WSAENETUNREACH:
            case WSAEHOSTUNREACH:
                return new NoRouteToHostException(x.getMessage());
            case WSAETIMEDOUT:
                return new SocketTimeoutException(x.getMessage());
            case WSAECONNREFUSED:
                return new PortUnreachableException(x.getMessage());
            case WSAHOST_NOT_FOUND:
                return new UnknownHostException(x.getMessage());
            default:
                return new SocketException(x.getMessage() + "\nError Code: " + x.get_ErrorCode());
        }
    }

    private cli.System.Net.Sockets.Socket socket;
    private int timeout;
    private cli.System.IAsyncResult asyncConnect;
    private InetSocketAddress asyncAddress;

    public PlainSocketImpl()
    {
    }

    // public for use by ServerSocketChannelImpl
    public void accept(SocketImpl _impl) throws IOException
    {
        PlainSocketImpl impl = (PlainSocketImpl)_impl;
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            if(timeout > 0 && !socket.Poll(Math.min(timeout, Integer.MAX_VALUE / 1000) * 1000,
                SelectMode.wrap(SelectMode.SelectRead)))
            {
                throw new SocketTimeoutException("Accept timed out");
            }
            cli.System.Net.Sockets.Socket accept = socket.Accept();
            impl.socket = accept;
            IPEndPoint remoteEndPoint = ((IPEndPoint)accept.get_RemoteEndPoint());
            impl.address = getInetAddressFromIPEndPoint(remoteEndPoint);
            impl.port = remoteEndPoint.get_Port();
            impl.localport = ((IPEndPoint)accept.get_LocalEndPoint()).get_Port();
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    // for use by ServerSocketChannelImpl
    public boolean pollAccept() throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            return socket.Poll(0, SelectMode.wrap(SelectMode.SelectRead));
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }        
    }

    // public for use by SocketChannelImpl
    public int available() throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            return socket.get_Available();
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    protected void bind(InetAddress addr, int port) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.Bind(new IPEndPoint(getAddressFromInetAddress(addr), port));
            this.address = addr;
            this.localport = ((IPEndPoint)socket.get_LocalEndPoint()).get_Port();
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new BindException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    static IPAddress getAddressFromInetAddress(InetAddress addr)
    {
        byte[] b = addr.getAddress();
        if (b.length == 16)
        {
            // FXBUG in .NET 1.1 you can only construct IPv6 addresses with this constructor
            // (according to the documentation this was fixed in .NET 2.0)
            return new IPAddress(b);
        }
        else
        {
            return new IPAddress((((b[3] & 0xff) << 24) + ((b[2] & 0xff) << 16) + ((b[1] & 0xff) << 8) + (b[0] & 0xff)) & 0xffffffffL);
        }
    }

    // public for use by SocketChannelImpl
    public void close() throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            // if this socket was created by a failed accept(), socket may be null
            if (socket != null)
            {
                socket.Close();
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    // public for use by SocketChannelImpl
    public void connect(InetAddress addr, int port) throws IOException
    {
        connectImpl(addr, port, 0);
    }

    private void connectImpl(InetAddress addr, int port, int timeout) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            IPEndPoint ep = new IPEndPoint(getAddressFromInetAddress(addr), port);
            if(timeout <= 0)
            {
                socket.Connect(ep);
            }
            else
            {
                cli.System.IAsyncResult result = socket.BeginConnect(ep, null, null);
                if(!result.get_AsyncWaitHandle().WaitOne(timeout, false))
                {
                    socket.Close();
                    throw new SocketTimeoutException();
                }
                socket.EndConnect(result);
            }
            this.address = addr;
            this.port = port;
            this.localport = ((IPEndPoint)socket.get_LocalEndPoint()).get_Port();
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new ConnectException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    // for use by SocketChannelImpl
    public void beginConnect(InetSocketAddress address) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            asyncConnect = socket.BeginConnect(new IPEndPoint(getAddressFromInetAddress(address.getAddress()), address.getPort()), null, null);
            asyncAddress = address;
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new ConnectException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    // for use by SocketChannelImpl
    public void endConnect() throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            cli.System.IAsyncResult res = asyncConnect;
            asyncConnect = null;
            socket.EndConnect(res);
            this.address = asyncAddress.getAddress();
            this.port = asyncAddress.getPort();
            this.localport = ((IPEndPoint)socket.get_LocalEndPoint()).get_Port();
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new ConnectException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    // for use by SocketChannelImpl
    public boolean isConnectFinished()
    {
        return asyncConnect.get_IsCompleted();
    }

    protected void connect(String hostname, int port) throws IOException
    {
        connect(InetAddress.getByName(hostname), port);
    }

    // public for use by SocketChannelImpl
    public void create(boolean stream) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            if(stream)
            {
                socket = new cli.System.Net.Sockets.Socket(AddressFamily.wrap(AddressFamily.InterNetwork), SocketType.wrap(SocketType.Stream), ProtocolType.wrap(ProtocolType.Tcp));
            }
            else
            {
                socket = new cli.System.Net.Sockets.Socket(AddressFamily.wrap(AddressFamily.InterNetwork), SocketType.wrap(SocketType.Dgram), ProtocolType.wrap(ProtocolType.Udp));
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    protected void listen(int queuelen) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.Listen(queuelen);
            localport = ((IPEndPoint)socket.get_LocalEndPoint()).get_Port();
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    // public for use by SocketChannelImpl
    public int read(byte[] buf, int offset, int len) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            if(timeout > 0 && !socket.Poll(Math.min(timeout, Integer.MAX_VALUE / 1000) * 1000,
                SelectMode.wrap(SelectMode.SelectRead)))
            {
                throw new SocketTimeoutException();
            }
            int read = socket.Receive(buf, offset, len, SocketFlags.wrap(SocketFlags.None));
            return read == 0 ? -1 : read;
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            if(x.get_ErrorCode() == WSAESHUTDOWN)
            {
                // the socket was shutdown, so we have to return EOF
                return -1;
            }
            else if(x.get_ErrorCode() == WSAEWOULDBLOCK)
            {
                // nothing to read and would block
                return 0;
            }
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    protected void write(byte[] buf, int offset, int len) throws IOException
    {
        writeImpl(buf, offset, len);
    }

    // public for use by SocketChannelImpl
    public int writeImpl(byte[] buf, int offset, int len) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            return socket.Send(buf, offset, len, SocketFlags.wrap(SocketFlags.None));
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public void setOption(int option_id, Object val) throws SocketException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            switch(option_id)
            {
                case SocketOptions.TCP_NODELAY:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Tcp), SocketOptionName.wrap(SocketOptionName.NoDelay), ((Boolean)val).booleanValue() ? 1 : 0);
                    break;
                case SocketOptions.SO_KEEPALIVE:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.KeepAlive), ((Boolean)val).booleanValue() ? 1 : 0);
                    break;
                case SocketOptions.SO_LINGER:
                {
                    int seconds = ((Integer)val).intValue();
                    cli.System.Net.Sockets.LingerOption linger;
                    if(seconds < 0)
                    {
                        linger = new cli.System.Net.Sockets.LingerOption(false, 0);
                    }
                    else
                    {
                        linger = new cli.System.Net.Sockets.LingerOption(true, seconds);
                    }
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.Linger), linger);
                    break;
                }
                case SocketOptions.SO_OOBINLINE:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.OutOfBandInline), ((Boolean)val).booleanValue() ? 1 : 0);
                    break;
                case SocketOptions.SO_TIMEOUT:
                    timeout = ((Integer)val).intValue();
                    break;
                default:
                    setCommonSocketOption(socket, option_id, val);
                    break;
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    static void setCommonSocketOption(cli.System.Net.Sockets.Socket socket, int option_id, Object val) throws SocketException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            switch(option_id)
            {
                case SocketOptions.SO_REUSEADDR:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReuseAddress), ((Boolean)val).booleanValue() ? 1 : 0);
                    break;
                case SocketOptions.SO_SNDBUF:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.SendBuffer), ((Integer)val).intValue());
                    break;
                case SocketOptions.SO_RCVBUF:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReceiveBuffer), ((Integer)val).intValue());
                    break;
                case SocketOptions.IP_TOS:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.TypeOfService), ((Integer)val).intValue());
                    break;
                case SocketOptions.SO_BINDADDR:	// read-only
                default:
                    throw new SocketException("Invalid socket option: " + option_id);
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public Object getOption(int option_id) throws SocketException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            switch(option_id)
            {
                case SocketOptions.TCP_NODELAY:
                    return new Boolean(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Tcp), SocketOptionName.wrap(SocketOptionName.NoDelay))) != 0);
                case SocketOptions.SO_KEEPALIVE:
                    return new Boolean(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.KeepAlive))) != 0);
                case SocketOptions.SO_LINGER:
                {
                    cli.System.Net.Sockets.LingerOption linger = (cli.System.Net.Sockets.LingerOption)socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.Linger));
                    if(linger.get_Enabled())
                    {
                        return new Integer(linger.get_LingerTime());
                    }
                    return new Integer(-1);
                }
                case SocketOptions.SO_OOBINLINE:
                    return Boolean.valueOf(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.OutOfBandInline))) != 0);
                case SocketOptions.SO_TIMEOUT:
                    return new Integer(timeout);
                default:
                    return getCommonSocketOption(socket, option_id);
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    static Object getCommonSocketOption(cli.System.Net.Sockets.Socket socket, int option_id) throws SocketException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            switch(option_id)
            {
                case SocketOptions.SO_REUSEADDR:
                    return new Boolean(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReuseAddress))) != 0);
                case SocketOptions.SO_SNDBUF:
                    return new Integer(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.SendBuffer))));
                case SocketOptions.SO_RCVBUF:
                    return new Integer(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReceiveBuffer))));
                case SocketOptions.IP_TOS:
                    return new Integer(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.TypeOfService))));
                case SocketOptions.SO_BINDADDR:
                    return getInetAddressFromIPEndPoint((IPEndPoint)socket.get_LocalEndPoint());
                default:
                    throw new SocketException("Invalid socket option: " + option_id);
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    static InetAddress getInetAddressFromIPEndPoint(IPEndPoint endpoint)
    {
        try
        {
            return InetAddress.getByAddress(endpoint.get_Address().GetAddressBytes());
        }
        catch(UnknownHostException x)
        {
            // this exception only happens if the address byte array is of invalid length, which cannot happen unless
            // the .NET socket returns a bogus address
            throw (InternalError)new InternalError().initCause(x);
        }
    }

    protected InputStream getInputStream() throws IOException
    {
        return new InputStream() 
        {
            public int available() throws IOException 
            {
                return PlainSocketImpl.this.available();
            }
            public void close() throws IOException 
            {
                PlainSocketImpl.this.close();
            }
            public int read() throws IOException 
            {
                byte buf[] = new byte[1];
                int bytes_read = read(buf, 0, 1);
                if (bytes_read == 1)
                    return buf[0] & 0xFF;
                else
                    return -1;
            }
            public int read(byte[] buf) throws IOException 
            {
                return read(buf, 0, buf.length);
            }
            public int read(byte[] buf, int offset, int len) throws IOException 
            {
                return PlainSocketImpl.this.read(buf, offset, len);
            }
        };
    }

    protected OutputStream getOutputStream() throws IOException
    {
        return new OutputStream() 
        {
            public void close() throws IOException 
            {
                PlainSocketImpl.this.close();
            }
            public void write(int b) throws IOException 
            {
                byte buf[] = { (byte)b };
                write(buf, 0, 1);
            }
            public void write(byte[] buf) throws IOException 
            {
                write(buf, 0, buf.length);
            }
            public void write(byte[] buf, int offset, int len) throws IOException 
            {
                PlainSocketImpl.this.write(buf, offset, len);
            }
        };
    }

    protected void connect(SocketAddress address, int timeout) throws IOException
    {
        InetSocketAddress inetAddress = (InetSocketAddress)address;
        if(inetAddress.isUnresolved())
        {
            throw new UnknownHostException(inetAddress.getHostName());
        }
        connectImpl(inetAddress.getAddress(), inetAddress.getPort(), timeout);
    }

    protected boolean supportsUrgentData()
    {
        return true;
    }

    public void sendUrgentData(int data) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            byte[] oob = { (byte)data };
            socket.Send(oob, SocketFlags.wrap(SocketFlags.OutOfBand));
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public void shutdownInput() throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.Shutdown(SocketShutdown.wrap(SocketShutdown.Receive));
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public void shutdownOutput() throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.Shutdown(SocketShutdown.wrap(SocketShutdown.Send));
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public void setBlocking(boolean blocking)
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.set_Blocking(blocking);
        }
        catch(cli.System.Net.Sockets.SocketException _)
        {
        }
        catch(cli.System.ObjectDisposedException _)
        {
        }
    }

    public boolean isInChannelOperation()
    {
	return false;
    }

    public cli.System.Net.Sockets.Socket getSocket()
    {
        return socket;
    }

    public InetSocketAddress getLocalAddress()
    {
        if(socket == null)
        {
            return null;
        }
        IPEndPoint endpoint = null;
        try
        {
            endpoint = (IPEndPoint)socket.get_LocalEndPoint();
        }
        catch(Throwable _)
        {
        }
        if(endpoint == null)
        {
            return null;
        }
        return new InetSocketAddress(getInetAddressFromIPEndPoint(endpoint), endpoint.get_Port());
    }
}
@


1.19
log
@Fixed getOption(SO_OOBLINE) to return Boolean instead of Integer.
@
text
@@


1.18
log
@- Fixed bind to set the localport after binding.
- Fixed read to return -1 instead of 0 for closed sockets (this fixes SocketChannel.read, the non-nio socket InputStream previously had the conversion.)
@
text
@d516 1
a516 1
                    return new Integer(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.OutOfBandInline))));
@


1.17
log
@Implemented connect with timeout.
@
text
@d159 1
d362 2
a363 1
            return socket.Receive(buf, offset, len, SocketFlags.wrap(SocketFlags.None));
d606 1
a606 4
                int bytes_read = PlainSocketImpl.this.read(buf, offset, len);
                if (bytes_read == 0)
                    return -1;
                return bytes_read;
@


1.16
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2002, 2003, 2004, 2005, 2006 Jeroen Frijters
d211 5
d220 15
a234 1
            socket.Connect(new IPEndPoint(getAddressFromInetAddress(addr), port));
a637 1
        // TODO support timeout
d643 1
a643 1
        connect(inetAddress.getAddress(), inetAddress.getPort());
@


1.16.4.1
log
@Backported socket fixes and NIO pipe implementation.
@
text
@d2 1
a2 1
  Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Jeroen Frijters
a158 1
            this.localport = ((IPEndPoint)socket.get_LocalEndPoint()).get_Port();
a210 5
        connectImpl(addr, port, 0);
    }

    private void connectImpl(InetAddress addr, int port, int timeout) throws IOException
    {
d215 1
a215 15
            IPEndPoint ep = new IPEndPoint(getAddressFromInetAddress(addr), port);
            if(timeout <= 0)
            {
                socket.Connect(ep);
            }
            else
            {
                cli.System.IAsyncResult result = socket.BeginConnect(ep, null, null);
                if(!result.get_AsyncWaitHandle().WaitOne(timeout, false))
                {
                    socket.Close();
                    throw new SocketTimeoutException();
                }
                socket.EndConnect(result);
            }
d342 1
a342 2
            int read = socket.Receive(buf, offset, len, SocketFlags.wrap(SocketFlags.None));
            return read == 0 ? -1 : read;
d585 4
a588 1
                return PlainSocketImpl.this.read(buf, offset, len);
d619 1
d625 1
a625 1
        connectImpl(inetAddress.getAddress(), inetAddress.getPort(), timeout);
@


1.15
log
@*** empty log message ***
@
text
@d403 2
a404 1
                    {
d406 1
a406 1
                    if(val instanceof Boolean)
d412 1
a412 1
                        linger = new cli.System.Net.Sockets.LingerOption(true, ((Integer)val).intValue());
d486 1
a486 1
                    {
d492 1
a492 1
                    return Boolean.FALSE;
@


1.14
log
@*** empty log message ***
@
text
@d543 1
a543 1
    private static InetAddress getInetAddressFromIPEndPoint(IPEndPoint endpoint)
@


1.13
log
@*** empty log message ***
@
text
@d185 2
a186 1
    protected void close() throws IOException
@


1.12
log
@*** empty log message ***
@
text
@d132 2
a133 1
    protected int available() throws IOException
d688 12
a699 1
        socket.set_Blocking(blocking);
@


1.11
log
@*** empty log message ***
@
text
@d1 2
a2 36
/* PlainSocketImpl.java -- Default socket implementation
   Copyright (C) 1998, 1999 Free Software Foundation, Inc.

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.
 
GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */
d4 15
d20 4
d30 1
d42 1
a42 11
/**
  * Unless the application installs its own SocketImplFactory, this is the
  * default socket implemetation that will be used.  It simply uses a
  * combination of Java and native routines to implement standard BSD
  * style sockets of family AF_INET and types SOCK_STREAM and SOCK_DGRAM
  *
  * @@version 0.1
  *
  * @@author Aaron M. Renn (arenn@@urbanophile.com)
  */
public class PlainSocketImpl extends SocketImpl
d44 10
d58 1
a58 1
            case 10048: //WSAEADDRINUSE
d60 2
a61 2
            case 10051: //WSAENETUNREACH
            case 10065: //WSAEHOSTUNREACH
d63 1
a63 1
            case 10060: //WSAETIMEDOUT
d65 1
a65 1
            case 10061: //WSAECONNREFUSED
d67 1
a67 1
            case 11001: //WSAHOST_NOT_FOUND
a73 3
    /**
     * This is the native file descriptor for this socket
     */
d76 2
a78 4

    /**
     * Default do nothing constructor
     */
d83 2
a84 7
    /**
     * Accepts a new connection on this socket and returns in in the 
     * passed in SocketImpl.
     *
     * @@param impl The SocketImpl object to accept this connection.
     */
    protected void accept(SocketImpl _impl) throws IOException
d97 1
a97 1
            ((PlainSocketImpl)impl).socket = accept;
d99 1
a99 3
            long remoteIP = remoteEndPoint.get_Address().get_Address();
            String remote = (remoteIP & 0xff) + "." + ((remoteIP >> 8) & 0xff) + "." + ((remoteIP >> 16) & 0xff) + "." + ((remoteIP >> 24) & 0xff);
            impl.address = InetAddress.getByName(remote);
d113 19
a131 8
    /**
     * Returns the number of bytes that the caller can read from this socket
     * without blocking. 
     *
     * @@return The number of readable bytes before blocking
     *
     * @@exception IOException If an error occurs
     */
a149 9
    /**
     * Binds to the specified port on the specified addr.  Note that this addr
     * must represent a local IP address.  **** How bind to INADDR_ANY? ****
     *
     * @@param addr The address to bind to
     * @@param port The port number to bind to
     *
     * @@exception IOException If an error occurs
     */
d169 1
a169 1
    static long getAddressFromInetAddress(InetAddress addr)
d172 10
a181 1
        return (((b[3] & 0xff) << 24) + ((b[2] & 0xff) << 16) + ((b[1] & 0xff) << 8) + (b[0] & 0xff)) & 0xffffffffL;
a183 9
    /**
     * Closes the socket.  This will cause any InputStream or OutputStream
     * objects for this Socket to be closed as well.
     * <p>
     * Note that if the SO_LINGER option is set on this socket, then the
     * operation could block.
     *
     * @@exception IOException If an error occurs
     */
d190 5
a194 1
            socket.Close();
d206 2
a207 9
    /**
     * Connects to the remote address and port specified as arguments.
     *
     * @@param addr The remote address to connect to
     * @@param port The remote port to connect to
     *
     * @@exception IOException If an error occurs
     */
    protected void connect(InetAddress addr, int port) throws IOException
d228 50
a277 8
    /**
     * Connects to the remote hostname and port specified as arguments.
     *
     * @@param hostname The remote hostname to connect to
     * @@param port The remote port to connect to
     *
     * @@exception IOException If an error occurs
     */
d283 2
a284 9
    /**
     * Creates a new socket that is not bound to any local address/port and
     * is not connected to any remote address/port.  This will be created as
     * a stream socket if the stream parameter is true, or a datagram socket
     * if the stream parameter is false.
     *
     * @@param stream true for a stream socket, false for a datagram socket
     */
    protected void create(boolean stream) throws IOException
a285 6
        if(!stream)
        {
            // TODO
            System.out.println("NOTE: PlainSocketImpl.create(false) not implemented");
            throw new IOException("PlainSocketImpl.create(false) not implemented");
        }
d290 8
a297 1
            socket = new cli.System.Net.Sockets.Socket(AddressFamily.wrap(AddressFamily.InterNetwork), SocketType.wrap(SocketType.Stream), ProtocolType.wrap(ProtocolType.Tcp));
a308 10
    /**
     * Starts listening for connections on a socket. The queuelen parameter
     * is how many pending connections will queue up waiting to be serviced
     * before being accept'ed.  If the queue of pending requests exceeds this
     * number, additional connections will be refused.
     *
     * @@param queuelen The length of the pending connection queue
     * 
     * @@exception IOException If an error occurs
     */
d328 2
a329 10
    /**
     * Internal method used by SocketInputStream for reading data from
     * the connection.  Reads up to len bytes of data into the buffer
     * buf starting at offset bytes into the buffer.
     *
     * @@return The actual number of bytes read or -1 if end of stream.
     *
     * @@exception IOException If an error occurs
     */
    protected int read(byte[] buf, int offset, int len) throws IOException
d344 1
a344 1
            if(x.get_ErrorCode() == 10058) //WSAESHUTDOWN
d349 1
a349 1
            else if(x.get_ErrorCode() == 10035) //WSAEWOULDBLOCK
a361 7
    /**
     * Internal method used by SocketOuputStream for writing data to
     * the connection.  Writes up to len bytes of data from the buffer
     * buf starting at offset bytes into the buffer.
     *
     * @@exception IOException If an error occurs
     */
d364 6
d374 1
a374 1
            socket.Send(buf, offset, len, SocketFlags.wrap(SocketFlags.None));
a385 11
    /**
     * Sets the specified option on a socket to the passed in object.  For
     * options that take an integer argument, the passed in object is an
     * Integer.  The option_id parameter is one of the defined constants in
     * this interface.
     *
     * @@param option_id The identifier of the option
     * @@param val The value to set the option to
     *
     * @@exception SocketException If an error occurs
     */
a469 11
    /**
     * Returns the current setting of the specified option.  The Object returned
     * will be an Integer for options that have integer values.  The option_id
     * is one of the defined constants in this interface.
     *
     * @@param option_id The option identifier
     *
     * @@return The current value of the option
     *
     * @@exception SocketException If an error occurs
     */
d526 1
a526 8
                    try
                    {
                        return InetAddress.getByAddress(getLocalAddress(socket));
                    }
                    catch(UnknownHostException x)
                    {
                        throw new SocketException(x.getMessage());
                    }
d541 1
a541 1
    static byte[] getLocalAddress(cli.System.Net.Sockets.Socket socket)
d543 10
a552 2
        int address = (int)((cli.System.Net.IPEndPoint)socket.get_LocalEndPoint()).get_Address().get_Address();
        return new byte[] { (byte)address, (byte)(address >> 8), (byte)(address >> 16), (byte)(address >> 24) };
a554 8
    /**
     * Returns an InputStream object for reading from this socket.  This will
     * be an instance of SocketInputStream.
     *
     * @@return An InputStream
     *
     * @@exception IOException If an error occurs
     */
d570 1
a570 1
                int bytes_read = read(buf, 0, buf.length);
a589 8
    /**
     * Returns an OutputStream object for writing to this socket.  This will
     * be an instance of SocketOutputStream.
     * 
     * @@return An OutputStream
     *
     * @@exception IOException If an error occurs
     */
d601 1
a601 1
                write(buf, 0, buf.length);
d614 1
a614 1
    public void connect(SocketAddress address, int timeout) throws IOException
d616 1
a616 1
        // NOTE for now we ignore the timeout and we only support InetSocketAddress
a633 4
            // Send one byte of urgent data on the socket. The byte to be sent is
            // the lowest eight bits of the data parameter.
            // The urgent byte is sent after any preceding writes to the socket
            // OutputStream and before any future writes to the OutputStream.
d685 1
a685 14
    /**
     * Indicates whether a channel initiated whatever operation
     * is being invoked on this socket.
     */
    private boolean inChannelOperation;

    /**
     * Indicates whether we should ignore whether any associated
     * channel is set to non-blocking mode. Certain operations
     * throw an <code>IllegalBlockingModeException</code> if the
     * associated channel is in non-blocking mode, <i>except</i>
     * if the operation is invoked by the channel itself.
     */
    public final boolean isInChannelOperation()
d687 1
a687 1
	return inChannelOperation;
d689 2
a690 6
  
    /**
     * Sets our indicator of whether an I/O operation is being
     * initiated by a channel.
     */
    public final void setInChannelOperation(boolean b)
d692 1
a692 1
	inChannelOperation = b;
d694 1
a694 1
    
d699 21
@


1.10
log
@*** empty log message ***
@
text
@d464 3
d549 2
@


1.9
log
@*** empty log message ***
@
text
@d660 4
@


1.8
log
@*** empty log message ***
@
text
@a383 5
            if(timeout > 0 && !socket.Poll(Math.min(timeout, Integer.MAX_VALUE / 1000) * 1000,
                SelectMode.wrap(SelectMode.SelectWrite)))
            {
                throw new SocketTimeoutException();
            }
@


1.7
log
@*** empty log message ***
@
text
@d46 1
d78 1
a78 1
                return new java.net.SocketTimeoutException(x.getMessage());
d92 1
d115 2
a116 3
            int timeout = ((Integer)getOption(SO_TIMEOUT)).intValue();
            if(timeout != 0 && !socket.Poll(Math.min(timeout, Integer.MAX_VALUE / 1000) * 1000,
                cli.System.Net.Sockets.SelectMode.wrap(cli.System.Net.Sockets.SelectMode.SelectRead)))
d344 5
d384 5
d443 3
a468 4
                case SocketOptions.SO_TIMEOUT:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReceiveTimeout), ((Integer)val).intValue());
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.SendTimeout), ((Integer)val).intValue());
                    break;
d527 2
a550 2
                case SocketOptions.SO_TIMEOUT:
                    return new Integer(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReceiveTimeout))));
@


1.6
log
@*** empty log message ***
@
text
@d77 1
a77 1
                return new java.io.InterruptedIOException(x.getMessage());
d83 1
a83 1
                return new SocketException(x.getMessage());
d352 5
@


1.5
log
@*** empty log message ***
@
text
@d744 4
a747 1
    public int getNativeFD() { throw new NoSuchMethodError("Not supported"); }
@


1.4
log
@*** empty log message ***
@
text
@a53 1
import ikvm.lang.ByteArrayHack;
d343 1
a343 1
            return socket.Receive(ByteArrayHack.cast(buf), offset, len, SocketFlags.wrap(SocketFlags.None));
d373 1
a373 1
            socket.Send(ByteArrayHack.cast(buf), offset, len, SocketFlags.wrap(SocketFlags.None));
d669 1
a669 1
            socket.Send(ByteArrayHack.cast(oob), SocketFlags.wrap(SocketFlags.OutOfBand));
@


1.3
log
@*** empty log message ***
@
text
@d113 1
d133 4
d152 1
d159 4
d179 1
d187 4
d213 1
d220 4
d239 1
d249 4
d287 1
d294 4
d315 1
d323 4
d343 1
d348 5
d355 4
d373 1
d380 4
d402 1
d437 4
d448 1
d473 4
d495 1
d521 4
d532 1
d560 4
a655 2
        // This method has to be overwritten by socket classes that support
        // sending urgent data.
d659 1
a659 1
    public void sendUrgentData(int data)
d661 19
a679 6
        // Send one byte of urgent data on the socket. The byte to be sent is
        // the lowest eight bits of the data parameter.
        // The urgent byte is sent after any preceding writes to the socket
        // OutputStream and before any future writes to the OutputStream.
        byte[] oob = { (byte)data };
        socket.Send(ByteArrayHack.cast(oob), SocketFlags.wrap(SocketFlags.OutOfBand));
d682 1
a682 1
    public void shutdownInput()
d684 14
a697 1
        socket.Shutdown(SocketShutdown.wrap(SocketShutdown.Receive));
d700 1
a700 1
    public void shutdownOutput()
d702 14
a715 1
        socket.Shutdown(SocketShutdown.wrap(SocketShutdown.Send));
@


1.2
log
@*** empty log message ***
@
text
@d1 38
d41 26
a66 1
public class PlainSocketImpl extends java.net.PlainSocketImpl
d68 543
@


1.1
log
@*** empty log message ***
@
text
@d5 28
a32 1
   public int getNativeFD() { throw new NoSuchMethodError("Not supported"); }
@

