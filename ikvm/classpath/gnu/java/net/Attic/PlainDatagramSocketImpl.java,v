head	1.15;
access;
symbols
	v0_36_0_14:1.14
	v0_36_0_13:1.14
	v0_36_0_9:1.14
	v0_36_0_7:1.14
	v0_36_0_5:1.14
	v0_36_0_4:1.14
	v0_36_0_3:1.14
	v0_36_0_2:1.14
	v0_36_0_1:1.14
	v0_36_0_0:1.14
	v0_36:1.14.0.2
	v0_34_0_3:1.13
	v0_34_0_2:1.13
	v0_34_0_1:1.13
	v0_34_0_0:1.13
	v0_34:1.13.0.4
	v0_32:1.13.0.2
	v0_32_0_0:1.13
	v0_30:1.10.0.2
	v0_28_0_0:1.7
	v0_26_0_1:1.6
	v0_26_0_0:1.6
	v0_24_0_1:1.6
	v0_24_0_0:1.6
	v0_22_0_0:1.6
	v0_20_0_0:1.6
	v0_18_0_0:1.6
	v0_16_0_0:1.6
	v0_14_0_1:1.5
	v0_14_0_0:1.5
	v0_12_0_0:1.5
	v0_10_0_1:1.4
	v0_10_0_0:1.4
	v0_8_0_0:1.1;
locks; strict;
comment	@# @;


1.15
date	2008.08.06.12.51.15;	author jfrijters;	state dead;
branches;
next	1.14;

1.14
date	2007.05.08.12.19.50;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2006.09.24.18.44.51;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.20.05.53.38;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.08.07.26.26;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2006.07.10.09.37.06;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2006.07.07.07.27.31;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2006.06.15.12.29.12;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2006.03.23.11.57.44;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2005.06.28.11.40.01;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.02.15.12.00;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.21.10.26.52;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2004.11.29.09.48.01;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.16.11.11.54;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2003.10.17.08.08.32;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.15
log
@Removed files that are no longer needed no that GNU Classpath support has been dropped.
@
text
@/*
  Copyright (C) 2002, 2003, 2004, 2005, 2006 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
package gnu.java.net;

import java.io.IOException;
import java.net.*;
import java.util.*;
import cli.System.Net.IPAddress;
import cli.System.Net.IPEndPoint;
import cli.System.Net.Sockets.SocketOptionName;
import cli.System.Net.Sockets.SocketOptionLevel;
import cli.System.Net.Sockets.MulticastOption;
import cli.System.Net.Sockets.SocketFlags;
import cli.System.Net.Sockets.SocketType;
import cli.System.Net.Sockets.ProtocolType;
import cli.System.Net.Sockets.AddressFamily;
import ikvm.lang.CIL;

public class PlainDatagramSocketImpl extends DatagramSocketImpl
{
    // Winsock Error Codes
    private static final int WSAEMSGSIZE   = 10040;
    private static final int WSAECONNRESET = 10054;

    private cli.System.Net.Sockets.Socket socket;

    public PlainDatagramSocketImpl() throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            socket = new cli.System.Net.Sockets.Socket(
                AddressFamily.wrap(AddressFamily.InterNetwork), 
                SocketType.wrap(SocketType.Dgram),
                ProtocolType.wrap(ProtocolType.Udp));
	    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.Broadcast), 1);
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
    }

    protected void create() throws SocketException
    {
    }

    protected void close()
    {
        if(socket != null)
        {
            socket.Close();
            socket = null;
        }
    }

    protected void bind(int port, InetAddress addr) throws SocketException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.Bind(new IPEndPoint(PlainSocketImpl.getAddressFromInetAddress(addr), port));
            localPort = ((IPEndPoint)socket.get_LocalEndPoint()).get_Port();
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new BindException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public void send(DatagramPacket packet) throws IOException
    {
        try		
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            int len = packet.getLength();
            int port = packet.getPort();
            if(port < 1 || port > 65535)
            {
                throw new SocketException("Invalid port");
            }
            if(socket.SendTo(packet.getData(), packet.getOffset(), len, SocketFlags.wrap(SocketFlags.None), new IPEndPoint(PlainSocketImpl.getAddressFromInetAddress(packet.getAddress()), port)) != len)
            {
                throw new SocketException("Not all data was sent");
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    protected int peek(InetAddress addr) throws IOException
    {
        throw new IOException("Not Implemented Yet");
    }

    public void receive(DatagramPacket packet) throws IOException
    {
        byte[] data = packet.getData();
        cli.System.Net.EndPoint[] remoteEP = new cli.System.Net.EndPoint[] 
            {
                new cli.System.Net.IPEndPoint(0, 0)
            };
        for(;;)
        {
            try
            {
                if(false) throw new cli.System.Net.Sockets.SocketException();
                if(false) throw new cli.System.ObjectDisposedException("");
                int length = socket.ReceiveFrom(data, packet.getOffset(), getDatagramPacketBufferLength(packet),
                                cli.System.Net.Sockets.SocketFlags.wrap(cli.System.Net.Sockets.SocketFlags.None), remoteEP);
                setDatagramPacketLength(packet, length);
                break;
            }
            catch(cli.System.Net.Sockets.SocketException x)
            {
                if(x.get_ErrorCode() == WSAECONNRESET)
                {
                    // A previous send failed (i.e. the remote host responded with a ICMP that the port is closed) and
                    // the winsock stack helpfully lets us know this, but we don't care so we just retry the receive.
                    continue;
                }
                if(x.get_ErrorCode() == WSAEMSGSIZE)
                {
                    // The buffer size was too small for the packet, ReceiveFrom receives the part of the packet
                    // that fits in the buffer and then throws an exception, so we have to ignore the exception in this case.
                    break;
                }
                throw PlainSocketImpl.convertSocketExceptionToIOException(x);
            }
            catch(cli.System.ObjectDisposedException x1)
            {
                throw new SocketException("Socket is closed");
            }
        }
        IPEndPoint endpoint = (IPEndPoint)remoteEP[0];
        packet.setAddress(PlainSocketImpl.getInetAddressFromIPEndPoint(endpoint));
        packet.setPort(endpoint.get_Port());
    }

    // these methods live in map.xml, because we need to access the package accessible fields in DatagramPacket
    private static native void setDatagramPacketLength(DatagramPacket packet, int length);
    private static native int getDatagramPacketBufferLength(DatagramPacket packet);

    protected void join(InetAddress addr) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ArgumentException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.AddMembership), new MulticastOption(PlainSocketImpl.getAddressFromInetAddress(addr)));
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ArgumentException x1)
        {
            throw new IOException(x1.getMessage());
        }
        catch(cli.System.ObjectDisposedException x2)
        {
            throw new SocketException("Socket is closed");
        }
    }

    protected void leave(InetAddress addr) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ArgumentException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.DropMembership), new MulticastOption(PlainSocketImpl.getAddressFromInetAddress(addr)));
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ArgumentException x1)
        {
            throw new IOException(x1.getMessage());
        }
        catch(cli.System.ObjectDisposedException x2)
        {
            throw new SocketException("Socket is closed");
        }
    }

    protected byte getTTL() throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            return (byte)CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.IpTimeToLive)));
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x2)
        {
            throw new SocketException("Socket is closed");
        }
    }

    protected void setTTL(byte ttl) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.IpTimeToLive), ttl & 0xff);
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x2)
        {
            throw new SocketException("Socket is closed");
        }
    }

    protected int getTimeToLive() throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            return CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.IpTimeToLive)));
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x2)
        {
            throw new SocketException("Socket is closed");
        }
    }

    protected void setTimeToLive(int ttl) throws IOException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.IpTimeToLive), ttl);
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x2)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public Object getOption(int option_id) throws SocketException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            switch(option_id)
            {
                case SocketOptions.SO_BROADCAST:
                    return new Boolean(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.Broadcast))) != 0);
                case SocketOptions.IP_MULTICAST_IF:
                    return getInetAddressFromInt(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.MulticastInterface))));
                case SocketOptions.IP_MULTICAST_IF2:
                    throw new SocketException("SocketOptions.IP_MULTICAST_IF2 not implemented");
                case SocketOptions.IP_MULTICAST_LOOP:
                    return new Boolean(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.MulticastLoopback))) != 0);
                case SocketOptions.SO_TIMEOUT:
                    return new Integer(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReceiveTimeout))));
                default:
                    return PlainSocketImpl.getCommonSocketOption(socket, option_id);
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    private static InetAddress getInetAddressFromInt(int i) throws SocketException
    {
        byte[] b = new byte[4];
        b[0] = (byte)(i >>  0);
        b[1] = (byte)(i >>  8);
        b[2] = (byte)(i >> 16);
        b[3] = (byte)(i >> 24);
        try
        {
            return InetAddress.getByAddress(b);
        }
        catch(UnknownHostException x)
        {
            throw new SocketException(x.getMessage());
        }
    }

    public void setOption(int option_id, Object val) throws SocketException
    {
        try
        {
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            switch(option_id)
            {
                case SocketOptions.SO_BROADCAST:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.Broadcast), ((Boolean)val).booleanValue() ? 1 : 0);
                    break;
                case SocketOptions.IP_MULTICAST_IF:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.MulticastInterface), (int)PlainSocketImpl.getAddressFromInetAddress((InetAddress)val).get_Address());
                    break;
                case SocketOptions.IP_MULTICAST_IF2:
                    throw new SocketException("SocketOptions.IP_MULTICAST_IF2 not implemented");
                case SocketOptions.IP_MULTICAST_LOOP:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.MulticastLoopback), ((Boolean)val).booleanValue() ? 1 : 0);
                    break;
                case SocketOptions.SO_TIMEOUT:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReceiveTimeout), ((Integer)val).intValue());
                    break;
                default:
                    PlainSocketImpl.setCommonSocketOption(socket, option_id, val);
                    break;
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw new SocketException(x.getMessage());
        }
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public int peekData(DatagramPacket packet)
    {
        // TODO
        throw new InternalError("PlainDatagramSocketImpl::peekData is not implemented");
    }

    public void joinGroup(SocketAddress address, NetworkInterface netIf) throws IOException
    {
        try
        {
            if(!(address instanceof InetSocketAddress)) throw new cli.System.ArgumentException();
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");

            if(((InetSocketAddress)address).isUnresolved())
            {
                throw new UnknownHostException(((InetSocketAddress)address).getHostName());
            }

            InetAddress inetAddr = ((InetSocketAddress)address).getAddress();
            IPAddress mcastAddr = PlainSocketImpl.getAddressFromInetAddress(inetAddr);

            Enumeration e = netIf.getInetAddresses();
            if(e.hasMoreElements())
            {
                IPAddress bindAddr  = PlainSocketImpl.getAddressFromInetAddress((InetAddress)e.nextElement());
                MulticastOption mcastOption = new MulticastOption(mcastAddr, bindAddr);
                socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.AddMembership), mcastOption);
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ArgumentException x1)
        {
            throw new IOException(x1.getMessage());
        }
        catch(cli.System.ObjectDisposedException x2)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public void leaveGroup(SocketAddress address, NetworkInterface netIf) throws IOException
    {
        try
        {
            if(!(address instanceof InetSocketAddress)) throw new cli.System.ArgumentException();
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");

            if(((InetSocketAddress)address).isUnresolved())
            {
                throw new UnknownHostException(((InetSocketAddress)address).getHostName());
            }

            InetAddress inetAddr = ((InetSocketAddress)address).getAddress();
            IPAddress mcastAddr = PlainSocketImpl.getAddressFromInetAddress(inetAddr);

            Enumeration e = netIf.getInetAddresses();
            if(e.hasMoreElements())
            {
                IPAddress bindAddr  = PlainSocketImpl.getAddressFromInetAddress((InetAddress)e.nextElement());
                MulticastOption mcastOption = new MulticastOption(mcastAddr, bindAddr);
                socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.DropMembership), mcastOption);
            }
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
        }
        catch(cli.System.ArgumentException x1)
        {
            throw new IOException(x1.getMessage());
        }
        catch(cli.System.ObjectDisposedException x2)
        {
            throw new SocketException("Socket is closed");
        }
    }

    public cli.System.Net.Sockets.Socket getSocket()
    {
        return socket;
    }
}
@


1.14
log
@Fixed to set initial SO_BROADCAST option to enabled.
@
text
@@


1.13
log
@*** empty log message ***
@
text
@d57 1
@


1.12
log
@*** empty log message ***
@
text
@d42 4
d135 1
a135 1
        try
d137 10
a146 11
            if(false) throw new cli.System.Net.Sockets.SocketException();
            if(false) throw new cli.System.ObjectDisposedException("");
            int length = socket.ReceiveFrom(data, packet.getOffset(), getDatagramPacketBufferLength(packet),
                            cli.System.Net.Sockets.SocketFlags.wrap(cli.System.Net.Sockets.SocketFlags.None), remoteEP);
            setDatagramPacketLength(packet, length);
        }
        catch(cli.System.Net.Sockets.SocketException x)
        {
            // If the buffer size was too small for the packet, ReceiveFrom receives the part of the packet
            // that fits in the buffer and then throws an exception, so we have to ignore the exception in this case.
            if(x.get_ErrorCode() != 10040) //WSAEMSGSIZE
d148 12
d162 4
d167 3
a169 9
        catch(cli.System.ObjectDisposedException x1)
        {
            throw new SocketException("Socket is closed");
        }
        int remoteIP = (int)((cli.System.Net.IPEndPoint)remoteEP[0]).get_Address().get_Address();
        byte[] ipv4 = new byte[] { (byte)remoteIP, (byte)(remoteIP >> 8), (byte)(remoteIP >> 16), (byte)(remoteIP >> 24) };
        InetAddress remoteAddress = InetAddress.getByAddress(ipv4);
        packet.setAddress(remoteAddress);
        packet.setPort(((cli.System.Net.IPEndPoint)remoteEP[0]).get_Port());
@


1.11
log
@*** empty log message ***
@
text
@d1 2
a2 37
/* PlainDatagramSocketImpl.java -- Default DatagramSocket implementation
   Copyright (C) 1998, 1999, 2001 Free Software Foundation, Inc.

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.
 
GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

d4 20
a39 9
/**
* This is the default socket implementation for datagram sockets.
* It makes native calls to C routines that implement BSD style
* SOCK_DGRAM sockets in the AF_INET family.
*
* @@version 0.1
*
* @@author Aaron M. Renn (arenn@@urbanophile.com)
*/
d42 3
a44 22
    /*
     * Static Variables
     */

    /**
     * This is the actual underlying socket
     */
    private cli.System.Net.Sockets.Socket socket = new cli.System.Net.Sockets.Socket(
        AddressFamily.wrap(AddressFamily.InterNetwork), 
        SocketType.wrap(SocketType.Dgram),
        ProtocolType.wrap(ProtocolType.Udp));

    /*************************************************************************/

    /*
     * Constructors
     */

    /**
     * Default do nothing constructor
     */
    public PlainDatagramSocketImpl()
d46 12
a59 11
    /*************************************************************************/

    /*
     * Instance Methods
     */

    /**
     * Creates a new datagram socket
     *
     * @@exception SocketException If an error occurs
     */
a63 5
    /*************************************************************************/

    /**
     * Closes the socket
     */
a72 10
    /*************************************************************************/

    /**
     * Binds this socket to a particular port and interface
     *
     * @@param port The port to bind to
     * @@param addr The address to bind to
     *
     * @@exception SocketException If an error occurs
     */
d92 1
a92 10
    /*************************************************************************/

    /**
     * Sends a packet of data to a remote host
     *
     * @@param packet The packet to send
     *
     * @@exception IOException If an error occurs
     */
    protected void send(DatagramPacket packet) throws IOException
a118 5
    /*************************************************************************/

    /**
     * What does this method really do?
     */
d124 1
a124 10
    /*************************************************************************/

    /**
     * Receives a UDP packet from the network
     *
     * @@param packet The packet to fill in with the data received
     *
     * @@exception IOException IOException If an error occurs
     */
    protected void receive(DatagramPacket packet) throws IOException
a162 9
    /*************************************************************************/

    /**
     * Joins a multicast group
     *
     * @@param addr The group to join
     *
     * @@exception IOException If an error occurs
     */
d170 1
a170 1
            socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.AddMembership), new MulticastOption(new cli.System.Net.IPAddress(PlainSocketImpl.getAddressFromInetAddress(addr))));
a185 9
    /*************************************************************************/

    /**
     * Leaves a multicast group
     *
     * @@param addr The group to leave
     *
     * @@exception IOException If an error occurs
     */
d193 1
a193 1
            socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.DropMembership), new MulticastOption(new cli.System.Net.IPAddress(PlainSocketImpl.getAddressFromInetAddress(addr))));
a208 9
    /*************************************************************************/

    /**
     * Gets the Time to Live value for the socket
     *
     * @@return The TTL value
     *
     * @@exception IOException If an error occurs
     */
a226 9
    /*************************************************************************/

    /**
     * Sets the Time to Live value for the socket
     *
     * @@param ttl The new TTL value
     *
     * @@exception IOException If an error occurs
     */
a244 9
    /*************************************************************************/

    /**
     * Gets the Time to Live value for the socket
     *
     * @@return The TTL value
     *
     * @@exception IOException If an error occurs
     */
a262 9
    /*************************************************************************/

    /**
     * Sets the Time to Live value for the socket
     *
     * @@param ttl The new TTL value
     *
     * @@exception IOException If an error occurs
     */
a280 11
    /*************************************************************************/

    /**
     * Retrieves the value of an option on the socket
     *
     * @@param option_id The identifier of the option to retrieve
     *
     * @@return The value of the option
     *
     * @@exception SocketException If an error occurs
     */
a329 10
    /*************************************************************************/

    /**
     * Sets the value of an option on the socket
     *
     * @@param option_id The identifier of the option to set
     * @@param val The value of the option to set
     *
     * @@exception SocketException If an error occurs
     */
d342 1
a342 1
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.MulticastInterface), (int)PlainSocketImpl.getAddressFromInetAddress((InetAddress)val));
d370 1
a370 1
        throw new InternalError ("PlainDatagramSocketImpl::peekData is not implemented");
a372 8
    /**
     * Joins a multicast group
     *
     * @@param address The group to join
     * @@param netIf The interface to bind to
     *
     * @@exception IOException If an error occurs
     */
d387 1
a387 1
            IPAddress mcastAddr = new IPAddress(PlainSocketImpl.getAddressFromInetAddress(inetAddr));
d389 2
a390 2
            Enumeration e=netIf.getInetAddresses();
            if (e.hasMoreElements())
d392 1
a392 1
                IPAddress bindAddr  = new IPAddress(PlainSocketImpl.getAddressFromInetAddress((InetAddress)e.nextElement()));
a410 8
    /**
     * Leaves a multicast group
     *
     * @@param address The group to join
     * @@param netIf The interface to bind to
     *
     * @@exception IOException If an error occurs
     */
d425 1
a425 1
            IPAddress mcastAddr = new IPAddress(PlainSocketImpl.getAddressFromInetAddress(inetAddr));
d427 2
a428 2
            Enumeration e=netIf.getInetAddresses();
            if (e.hasMoreElements())
d430 1
a430 1
                IPAddress bindAddr  = new IPAddress(PlainSocketImpl.getAddressFromInetAddress((InetAddress)e.nextElement()));
d453 1
a453 1
} // class PlainDatagramSocketImpl
@


1.10
log
@*** empty log message ***
@
text
@a433 2
                case SocketOptions.SO_REUSEADDR:
                    return new Boolean(CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReuseAddress))) != 0);
a492 3
                case SocketOptions.SO_REUSEADDR:
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.ReuseAddress), ((Boolean)val).booleanValue() ? 1 : 0);
                    break;
@


1.9
log
@*** empty log message ***
@
text
@d549 5
d595 5
@


1.8
log
@*** empty log message ***
@
text
@a510 1
                    socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.Socket), SocketOptionName.wrap(SocketOptionName.SendTimeout), ((Integer)val).intValue());
@


1.7
log
@*** empty log message ***
@
text
@d43 2
d534 9
a542 1
    public void joinGroup(SocketAddress address, NetworkInterface netIf)
d544 29
a572 2
        // TODO
        throw new InternalError ("PlainDatagramSocketImpl::joinGroup is not implemented");
d575 9
a583 1
    public void leaveGroup(SocketAddress address, NetworkInterface netIf)
d585 29
a613 2
        // TODO
        throw new InternalError ("PlainDatagramSocketImpl::leaveGroup is not implemented");
@


1.6
log
@*** empty log message ***
@
text
@d442 2
d507 4
@


1.5
log
@*** empty log message ***
@
text
@d538 4
a541 1
    public int getNativeFD() { throw new NoSuchMethodError("Not supported"); }
@


1.4
log
@*** empty log message ***
@
text
@a51 1
import ikvm.lang.ByteArrayHack;
d168 1
a168 1
            if(socket.SendTo(ByteArrayHack.cast(packet.getData()), packet.getOffset(), len, SocketFlags.wrap(SocketFlags.None), new IPEndPoint(PlainSocketImpl.getAddressFromInetAddress(packet.getAddress()), port)) != len)
d213 1
a213 1
            int length = socket.ReceiveFrom(ByteArrayHack.cast(data), packet.getOffset(), getDatagramPacketBufferLength(packet),
@


1.3
log
@*** empty log message ***
@
text
@d134 1
d142 4
d162 1
d178 4
d213 1
d227 4
d257 1
d268 4
d289 1
d300 4
d317 14
a330 1
        return (byte)CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.IpTimeToLive)));
d344 14
a357 1
        socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.IpTimeToLive), ttl & 0xff);
d371 14
a384 1
        return CIL.unbox_int(socket.GetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.IpTimeToLive)));
d398 14
a411 1
        socket.SetSocketOption(SocketOptionLevel.wrap(SocketOptionLevel.IP), SocketOptionName.wrap(SocketOptionName.IpTimeToLive), ttl);
d430 1
d451 4
d489 1
d515 4
@


1.2
log
@*** empty log message ***
@
text
@d158 6
a163 1
            if(socket.SendTo(ByteArrayHack.cast(packet.getData()), len, SocketFlags.wrap(SocketFlags.None), new IPEndPoint(PlainSocketImpl.getAddressFromInetAddress(packet.getAddress()), packet.getPort())) != len)
d195 5
d203 3
a205 12
            byte[] data = packet.getData();
            cli.System.Net.EndPoint[] remoteEP = new cli.System.Net.EndPoint[] 
                {
                    new cli.System.Net.IPEndPoint(0, 0)
                };
            int length = socket.ReceiveFrom(ByteArrayHack.cast(data), remoteEP);
            packet.setLength(length);
            int remoteIP = (int)((cli.System.Net.IPEndPoint)remoteEP[0]).get_Address().get_Address();
            byte[] ipv4 = new byte[] { (byte)remoteIP, (byte)(remoteIP >> 8), (byte)(remoteIP >> 16), (byte)(remoteIP >> 24) };
            InetAddress remoteAddress = InetAddress.getByAddress(ipv4);
            packet.setAddress(remoteAddress);
            packet.setPort(((cli.System.Net.IPEndPoint)remoteEP[0]).get_Port());
d209 6
a214 1
            throw PlainSocketImpl.convertSocketExceptionToIOException(x);
d216 5
d223 4
@


1.1
log
@*** empty log message ***
@
text
@d1 38
d41 23
a63 1
public class PlainDatagramSocketImpl extends java.net.PlainDatagramSocketImpl
d65 374
a438 2
   public int getNativeFD() { throw new NoSuchMethodError("Not supported"); }
}
@

