head	1.5;
access;
symbols
	v0_36_0_14:1.4
	v0_36_0_13:1.4
	v0_36_0_9:1.4
	v0_36_0_7:1.4
	v0_36_0_5:1.4
	v0_36_0_4:1.4
	v0_36_0_3:1.4
	v0_36_0_2:1.4
	v0_36_0_1:1.4
	v0_36_0_0:1.4
	v0_36:1.4.0.6
	v0_34_0_3:1.4
	v0_34_0_2:1.4
	v0_34_0_1:1.4
	v0_34_0_0:1.4
	v0_34:1.4.0.4
	v0_32:1.4.0.2
	v0_32_0_0:1.4
	v0_30:1.1.0.2
	v0_28_0_0:1.1
	v0_26_0_1:1.1
	v0_26_0_0:1.1
	v0_24_0_1:1.1
	v0_24_0_0:1.1
	v0_22_0_0:1.1
	v0_20_0_0:1.1
	v0_18_0_0:1.1
	v0_16_0_0:1.1;
locks; strict;
comment	@# @;


1.5
date	2008.08.06.12.51.16;	author jfrijters;	state dead;
branches;
next	1.4;

1.4
date	2006.09.24.11.53.42;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2006.09.24.11.42.29;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2006.09.20.05.53.38;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.28.11.40.01;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.5
log
@Removed files that are no longer needed no that GNU Classpath support has been dropped.
@
text
@/*
  Copyright (C) 2002, 2003, 2004, 2005, 2006 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
package gnu.java.nio;

import java.nio.channels.CancelledKeyException;
import java.nio.channels.SelectableChannel;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.spi.AbstractSelectionKey;

final class SelectionKeyImpl extends AbstractSelectionKey
{
    private final SelectableChannel ch;
    private final SelectorImpl impl;
    private final cli.System.Net.Sockets.Socket socket;
    private int readyOps;
    private int interestOps;
    int savedInterestOps; // used by SelectorImpl to store interestOps at the begin of a select()

    SelectionKeyImpl(SelectableChannel ch, SelectorImpl impl, cli.System.Net.Sockets.Socket socket)
    {
        this.ch  = ch;
        this.impl = impl;
        this.socket = socket;
    }

    public SelectableChannel channel()
    {
        return ch;
    }

    public synchronized int readyOps()
    {
        if (!isValid())
            throw new CancelledKeyException();
    
        return readyOps;
    }

    void readyOps(int ops)
    {
        readyOps = ops;
    }

    public synchronized int interestOps()
    {
        if (!isValid())
            throw new CancelledKeyException();
    
        return interestOps;    
    }

    public synchronized SelectionKey interestOps(int ops)
    {
        if (!isValid())
            throw new CancelledKeyException();

        if ((ops & ~ch.validOps()) != 0)
            throw new IllegalArgumentException();
    
        interestOps = ops;
        return this;
    }
    
    public Selector selector()
    {
        return impl;
    }

    cli.System.Net.Sockets.Socket getSocket()
    {
        return socket;
    }
}
@


1.4
log
@*** empty log message ***
@
text
@@


1.3
log
@*** empty log message ***
@
text
@d1 23
d34 23
a56 23
  private final SelectableChannel ch;
  private final SelectorImpl impl;
  private final cli.System.Net.Sockets.Socket socket;
  private int readyOps;
  private int interestOps;
  int savedInterestOps; // used by SelectorImpl to store interestOps at the begin of a select()

  SelectionKeyImpl(SelectableChannel ch, SelectorImpl impl, cli.System.Net.Sockets.Socket socket)
  {
    this.ch  = ch;
    this.impl = impl;
    this.socket = socket;
  }

  public SelectableChannel channel()
  {
    return ch;
  }

  public synchronized int readyOps()
  {
    if (!isValid())
      throw new CancelledKeyException();
d58 2
a59 2
    return readyOps;
  }
d61 9
a69 13
  public synchronized SelectionKey readyOps(int ops)
  {
    if (!isValid())
      throw new CancelledKeyException();
    
    readyOps = ops;
    return this;
  }

  public synchronized int interestOps()
  {
    if (!isValid())
      throw new CancelledKeyException();
d71 2
a72 2
    return interestOps;    
  }
d74 4
a77 4
  public synchronized SelectionKey interestOps(int ops)
  {
    if (!isValid())
      throw new CancelledKeyException();
d79 2
a80 2
    if ((ops & ~ch.validOps()) != 0)
      throw new IllegalArgumentException();
d82 3
a84 3
    interestOps = ops;
    return this;
  }
d86 9
a94 9
  public Selector selector()
  {
    return impl;
  }

  cli.System.Net.Sockets.Socket getSocket()
  {
    return socket;
  }
@


1.2
log
@*** empty log message ***
@
text
@d11 3
d16 1
a16 3
  private SelectorImpl impl;
  private SelectableChannel ch;
  private cli.System.Net.Sockets.Socket socket;
d30 1
a30 1
  public int readyOps()
d38 1
a38 1
  public SelectionKey readyOps(int ops)
d47 1
a47 1
  public int interestOps()
d55 1
a55 1
  public SelectionKey interestOps(int ops)
d59 3
@


1.1
log
@*** empty log message ***
@
text
@a0 37
/* SelectionKeyImpl.java -- 
   Copyright (C) 2002, 2003 Free Software Foundation, Inc.

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

d9 1
a9 1
public abstract class SelectionKeyImpl extends AbstractSelectionKey
d14 2
a15 1
  SelectableChannel ch;
d17 1
a17 1
  public SelectionKeyImpl (SelectableChannel ch, SelectorImpl impl)
d21 1
d24 1
a24 1
  public SelectableChannel channel ()
d29 1
a29 1
  public int readyOps ()
d37 1
a37 1
  public SelectionKey readyOps (int ops)
d46 1
a46 1
  public int interestOps ()
d54 1
a54 1
  public SelectionKey interestOps (int ops)
d63 1
a63 1
  public Selector selector ()
d68 4
a71 1
  public abstract cli.System.Net.Sockets.Socket getSocket();
@

