head	1.16;
access;
symbols
	v0_36_0_14:1.15
	v0_36_0_13:1.15
	v0_36_0_9:1.15
	v0_36_0_7:1.15
	v0_36_0_5:1.15
	v0_36_0_4:1.15
	v0_36_0_3:1.15
	v0_36_0_2:1.15
	v0_36_0_1:1.15
	v0_36_0_0:1.15
	v0_36:1.15.0.2
	v0_34_0_3:1.14.4.1
	v0_34_0_2:1.14.4.1
	v0_34_0_1:1.14
	v0_34_0_0:1.14
	v0_34:1.14.0.4
	v0_32:1.14.0.2
	v0_32_0_0:1.14
	v0_30:1.7.0.2
	v0_28_0_0:1.7
	v0_26_0_1:1.7
	v0_26_0_0:1.7
	v0_24_0_1:1.7
	v0_24_0_0:1.7
	v0_22_0_0:1.6
	v0_20_0_0:1.2
	v0_18_0_0:1.2
	v0_16_0_0:1.1;
locks; strict;
comment	@# @;


1.16
date	2008.08.06.12.51.16;	author jfrijters;	state dead;
branches;
next	1.15;

1.15
date	2007.04.28.10.42.13;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2006.09.25.05.52.16;	author jfrijters;	state Exp;
branches
	1.14.4.1;
next	1.13;

1.13
date	2006.09.24.11.42.29;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2006.09.23.11.48.30;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2006.09.23.09.04.55;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2006.09.23.09.00.59;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2006.09.22.05.52.11;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2006.09.20.05.53.38;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2005.12.07.09.06.32;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2005.11.14.09.12.08;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2005.11.09.12.34.37;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2005.10.21.20.45.07;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2005.10.13.12.34.18;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2005.07.14.08.38.54;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2005.06.28.11.40.01;	author jfrijters;	state Exp;
branches;
next	;

1.14.4.1
date	2007.04.29.08.50.49;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.16
log
@Removed files that are no longer needed no that GNU Classpath support has been dropped.
@
text
@/*
  Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
package gnu.java.nio;

import java.io.IOException;
import java.nio.channels.ClosedSelectorException;
import java.nio.channels.SelectableChannel;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.spi.AbstractSelectableChannel;
import java.nio.channels.spi.AbstractSelector;
import java.nio.channels.spi.SelectorProvider;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import cli.System.Net.Sockets.Socket;
import cli.System.Net.Sockets.SocketException;
import cli.System.Net.Sockets.AddressFamily;
import cli.System.Net.Sockets.SocketType;
import cli.System.Net.Sockets.ProtocolType;
import cli.System.Net.Sockets.SelectMode;
import cli.System.Collections.ArrayList;

public final class SelectorImpl extends AbstractSelector implements VMThread.InterruptProc
{
    private final HashSet keys = new HashSet();
    private final RemoveOnlyHashSet selected = new RemoveOnlyHashSet();
    private final Object wakeupMutex = new Object();
    private Socket notifySocket;
    private volatile boolean unhandledWakeup;

    private static final class RemoveOnlyHashSet extends HashSet
    {
        void addInternal(Object o)
        {
            super.add(o);
        }

        public boolean add(Object o)
        {
            throw new UnsupportedOperationException();
        }

        public boolean addAll(Collection c)
        {
            throw new UnsupportedOperationException();
        }
    }

    public SelectorImpl(SelectorProvider provider)
    {
        super(provider);
    }

    protected void implCloseSelector() throws IOException
    {
        // note that notifySocket gets closed by wakeup
        wakeup();
    }

    public void interrupt()
    {
        wakeup();
    }

    public Set keys()
    {
        if (!isOpen())
            throw new ClosedSelectorException();

        return Collections.unmodifiableSet(keys);
    }
    
    public Set selectedKeys()
    {
        if (!isOpen())
            throw new ClosedSelectorException();

        return selected;
    }

    public int selectNow() throws IOException
    {
        return selectImpl(0);
    }

    public int select() throws IOException
    {
        return selectImpl(Long.MAX_VALUE);
    }

    public int select(long timeout) throws IOException
    {
        if (timeout < 0)
            throw new IllegalArgumentException();

        if (timeout == 0)
            timeout = Long.MAX_VALUE;

        return selectImpl(timeout);
    }

    private synchronized int selectImpl(long timeout) throws IOException
    {
        if (!isOpen())
            throw new ClosedSelectorException();

        ArrayList read = new ArrayList();
        ArrayList write = new ArrayList();
        ArrayList error = new ArrayList();
        synchronized (keys)
        {
            Set cancelled = cancelledKeys();
            synchronized (cancelled)
            {
                synchronized (selected)
                {
                    for (Iterator it = keys.iterator(); it.hasNext();)
                    {
                        SelectionKeyImpl key = (SelectionKeyImpl)it.next();
                        if (cancelled.contains(key))
                        {
                            cancelled.remove(key);
                            selected.remove(key);
                            it.remove();
                            deregister(key);
                            continue;
                        }
                        int ops = key.interestOps();
                        if (key.channel() instanceof SocketChannelImpl)
                        {
                            // TODO there's a race condition here...
                            if (((SocketChannelImpl)key.channel()).isConnected())
                            {
                                ops &= SelectionKey.OP_READ | SelectionKey.OP_WRITE;
                            }
                            else
                            {
                                ops &= SelectionKey.OP_CONNECT;
                            }
                        }
                        key.savedInterestOps = ops;
                        if ((ops & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0)
                        {
                            read.Add(key.getSocket());
                        }
                        if ((ops & (SelectionKey.OP_WRITE | SelectionKey.OP_CONNECT)) != 0)
                        {
                            write.Add(key.getSocket());
                        }
                        if ((ops & SelectionKey.OP_CONNECT) != 0)
                        {
                            error.Add(key.getSocket());
                        }
                    }
                }
            }
        }

        synchronized (wakeupMutex)
        {
            if (unhandledWakeup)
            {
                unhandledWakeup = false;
                return 0;
            }
            if (notifySocket == null)
            {
                notifySocket = createNotifySocket();
            }
            read.Add(notifySocket);
        }

        try
        {
            ArrayList savedReadList = read;
            ArrayList savedWriteList = write;
            ArrayList savedErrorList = error;
            do
            {
                read = (ArrayList)savedReadList.Clone();
                write = (ArrayList)savedWriteList.Clone();
                error = (ArrayList)savedErrorList.Clone();
                int microSeconds = 1000 * (int)Math.min(Integer.MAX_VALUE / 1000, timeout);
                try
                {
                    implSelect(read, write, error, microSeconds);
                    timeout -= microSeconds / 1000;
                }
                catch(SocketException _)
                {
                    read.Clear();
                    write.Clear();
                    error.Clear();
                    purgeList(savedReadList);
                    purgeList(savedWriteList);
                    purgeList(savedErrorList);
                }
            } while(timeout > 0
                && read.get_Count() == 0
                && write.get_Count() == 0
                && error.get_Count() == 0
                && !unhandledWakeup);
        }
        finally
        {
            unhandledWakeup = false;
        }

        int updatedCount = 0;
        synchronized (keys)
        {
            Set cancelled = cancelledKeys();
            synchronized (cancelled)
            {
                synchronized (selected)
                {
                    for (Iterator it = keys.iterator(); it.hasNext(); )
                    {
                        SelectionKeyImpl key = (SelectionKeyImpl)it.next();
                        if (cancelled.contains(key))
                        {
                            cancelled.remove(key);
                            selected.remove(key);
                            it.remove();
                            deregister(key);
                            continue;
                        }
                        int ops = 0;
                        Socket socket = key.getSocket();
                        if (error.Contains(socket))
                        {
                            ops |= SelectionKey.OP_CONNECT;
                        }
                        if (read.Contains(socket))
                        {
                            ops |= SelectionKey.OP_ACCEPT | SelectionKey.OP_READ;
                        }
                        if (write.Contains(socket))
                        {
                            ops |= SelectionKey.OP_CONNECT | SelectionKey.OP_WRITE;
                        }
                        ops &= key.savedInterestOps;
                        if (ops != 0)
                        {
                            if (selected.contains(key))
                            {
                                int ready = key.readyOps();
                                if ((ready & ops) != ops)
                                {
                                    updatedCount++;
                                }
                                key.readyOps(ready | ops);
                            }
                            else
                            {
                                key.readyOps(ops);
                                selected.addInternal(key);
                                updatedCount++;
                            }
                            if (key.channel() instanceof SocketChannelImpl)
                            {
                                SocketChannelImpl impl = (SocketChannelImpl)key.channel();
                                impl.selected();
                            }
                        }
                    }
                }
            }
        }
        return updatedCount;
    }

    private void implSelect(ArrayList read, ArrayList write, ArrayList error, int microSeconds) throws SocketException
    {
        try
        {
            VMThread.enterInterruptableWait(this);
            try
            {
                Socket.Select(read, write, error, microSeconds);
            }
            finally
            {
                VMThread.leaveInterruptableWait();
            }
        }
        catch (InterruptedException _)
        {
            wakeup();
            Thread.currentThread().interrupt();
        }
    }

    private static void purgeList(ArrayList list)
    {
        for (int i = 0; i < list.get_Count(); i++)
        {
            Socket s = (Socket)list.get_Item(i);
            try
            {
                if (false) throw new cli.System.ObjectDisposedException("");
                s.Poll(0, SelectMode.wrap(SelectMode.SelectError));
            }
            catch (cli.System.ObjectDisposedException _)
            {
                list.RemoveAt(i);
                i--;
            }
        }
    }

    private static Socket createNotifySocket()
    {
        return new Socket(AddressFamily.wrap(AddressFamily.InterNetwork),
            SocketType.wrap(SocketType.Dgram),
            ProtocolType.wrap(ProtocolType.Udp));
    }

    public Selector wakeup()
    {
        synchronized (wakeupMutex)
        {
            unhandledWakeup = true;

            if (notifySocket != null)
            {
                notifySocket.Close();
                notifySocket = null;
            }
        }
        return this;
    }

    protected SelectionKey register(AbstractSelectableChannel ch, int ops, Object att)
    {
        SelectionKeyImpl result;

        if (ch instanceof SocketChannelImpl)
            result = new SelectionKeyImpl(ch, this, ((SocketChannelImpl)ch).getSocket());
        else if (ch instanceof DatagramChannelImpl)
            result = new SelectionKeyImpl(ch, this, ((DatagramChannelImpl)ch).getSocket());
        else if (ch instanceof ServerSocketChannelImpl)
            result = new SelectionKeyImpl(ch, this, ((ServerSocketChannelImpl)ch).getSocket());
        else if (ch instanceof PipeImpl.SourceChannelImpl)
            result = new SelectionKeyImpl(ch, this, ((PipeImpl.SourceChannelImpl)ch).getSocket());
        else if (ch instanceof PipeImpl.SinkChannelImpl)
            result = new SelectionKeyImpl(ch, this, ((PipeImpl.SinkChannelImpl)ch).getSocket());
        else
            throw new InternalError("No known channel type");

        result.interestOps(ops);
        result.attach(att);

        synchronized (keys)
        {
            keys.add(result);
        }
        return result;
    }
}
@


1.15
log
@Implemented NIO Pipe support.
@
text
@@


1.14
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2002, 2003, 2004, 2005, 2006 Jeroen Frijters
d368 4
@


1.14.4.1
log
@Backported socket fixes and NIO pipe implementation.
@
text
@d2 1
a2 1
  Copyright (C) 2002, 2003, 2004, 2005, 2006, 2007 Jeroen Frijters
a367 4
        else if (ch instanceof PipeImpl.SourceChannelImpl)
            result = new SelectionKeyImpl(ch, this, ((PipeImpl.SourceChannelImpl)ch).getSocket());
        else if (ch instanceof PipeImpl.SinkChannelImpl)
            result = new SelectionKeyImpl(ch, this, ((PipeImpl.SinkChannelImpl)ch).getSocket());
@


1.13
log
@*** empty log message ***
@
text
@d80 1
d190 1
a190 1
            else
d194 1
a195 1
        read.Add(notifySocket);
d230 1
a230 6
            synchronized (wakeupMutex)
            {
                unhandledWakeup = false;
                notifySocket.Close();
                notifySocket = null;
            }
d348 1
a348 1
        
d352 1
@


1.12
log
@*** empty log message ***
@
text
@d148 1
d151 15
a165 1
                        if ((key.interestOps() & (SelectionKey.OP_READ | SelectionKey.OP_ACCEPT)) != 0)
d169 1
a169 1
                        if ((key.interestOps() & (SelectionKey.OP_WRITE | SelectionKey.OP_CONNECT)) != 0)
d173 1
a173 1
                        if ((key.interestOps() & SelectionKey.OP_CONNECT) != 0)
a197 1
            begin();
a228 1
            end();
d253 1
d264 1
a264 8
                            if (key.channel() instanceof ServerSocketChannelImpl)
                            {
                                ops |= SelectionKey.OP_ACCEPT;
                            }
                            else
                            {
                                ops |= SelectionKey.OP_READ;
                            }
d268 1
a268 9
                            if (key.channel() instanceof SocketChannelImpl
                                && !((SocketChannelImpl)key.channel()).isConnected())
                            {
                                ops |= SelectionKey.OP_CONNECT;
                            }
                            else
                            {
                                ops |= SelectionKey.OP_WRITE;
                            }
d270 1
a270 4
                        // NOTE querying interestOps() here is not strictly correct,
                        // we should really be using the interestOps() returned at the
                        // start of the method.
                        ops &= key.interestOps();
@


1.11
log
@reformat
@
text
@d1 2
a2 37
/* SelectorImpl.java -- 
   Copyright (C) 2002, 2003, 2004  Free Software Foundation, Inc.

This file is part of GNU Classpath.

GNU Classpath is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

GNU Classpath is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with GNU Classpath; see the file COPYING.  If not, write to the
Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
02111-1307 USA.

Linking this library statically or dynamically with other modules is
making a combined work based on this library.  Thus, the terms and
conditions of the GNU General Public License cover the whole
combination.

As a special exception, the copyright holders of this library give you
permission to link this library with independent modules to produce an
executable, regardless of the license terms of these independent
modules, and to copy and distribute the resulting executable under
terms of your choice, provided that you also meet, for each linked
independent module, the terms and conditions of the license of that
module.  An independent module is a module which is not derived from
or based on this library.  If you modify this library, you may extend
this exception to your version of the library, but you are not
obligated to do so.  If you do not wish to do so, delete this
exception statement from your version. */

d4 20
d34 1
a48 1
    private static boolean debug = false;
d50 1
a50 1
    private final HashSet selected = new HashSet();
d55 18
a79 1
        // Cancel any pending select operation.
d96 8
d106 1
a106 3
        // FIXME: We're simulating an immediate select
        // via a select with a timeout of one millisecond.
        return select(1);
d111 1
a111 1
        return select(0);
d114 1
a114 1
    private ArrayList getSocketArray(int ops)
d116 2
a117 7
        ArrayList result = new ArrayList();
        Iterator it = keys.iterator();

        // Fill the array with the file descriptors
        while (it.hasNext())
        {
            SelectionKeyImpl key = (SelectionKeyImpl)it.next();
d119 2
a120 7
            int validOps = ops & key.channel().validOps();

            if ((key.interestOps() & validOps) != 0 && (key.readyOps() & validOps) != validOps)
            {
                result.Add(key.getSocket());
            }
        }
d122 1
a122 1
        return result;
d125 1
a125 1
    public synchronized int select(long timeout) throws IOException
d130 3
d135 2
a136 1
            synchronized (selected)
d138 1
a138 8
                deregisterCancelledKeys();

                // Set only keys with the needed interest ops into the arrays.
                ArrayList read = getSocketArray(SelectionKey.OP_READ | SelectionKey.OP_ACCEPT);
                ArrayList write = getSocketArray(SelectionKey.OP_WRITE | SelectionKey.OP_CONNECT);
                ArrayList error = getSocketArray(SelectionKey.OP_CONNECT);

                if (debug)
d140 1
a140 6
                    System.out.println("SelectorImpl.select: read.Count = " + read.get_Count() + ", write.Count = " + write.get_Count() + ", error.Count = " + error.get_Count() + ", timeout = " + timeout);
                }

                synchronized (wakeupMutex)
                {
                    if (unhandledWakeup)
d142 17
a158 1
                        if (debug)
d160 1
a160 1
                            System.out.println("SelectorImpl.select: returning due to unhandled wakeup");
a161 6
                        unhandledWakeup = false;
                        return 0;
                    }
                    else
                    {
                        notifySocket = createNotifySocket();
d164 16
d181 12
d195 2
a196 54
                    begin();
                    ArrayList savedReadList = read;
                    ArrayList savedWriteList = write;
                    ArrayList savedErrorList = error;
                    if (timeout == 0)
                    {
                        do
                        {
                            read = (ArrayList)savedReadList.Clone();
                            write = (ArrayList)savedWriteList.Clone();
                            error = (ArrayList)savedErrorList.Clone();
                            read.Add(notifySocket);
                            try
                            {
                                implSelect(read, write, error, Integer.MAX_VALUE);
                            }
                            catch(SocketException _)
                            {
                                read.Clear();
                                write.Clear();
                                error.Clear();
                                purgeList(savedReadList);
                                purgeList(savedWriteList);
                                purgeList(savedErrorList);
                            }
                        } while(read.get_Count() == 0 && write.get_Count() == 0 && error.get_Count() == 0 && !unhandledWakeup);
                        read.Remove(notifySocket);
                    }
                    else
                    {
                        do
                        {
                            read = (ArrayList)savedReadList.Clone();
                            write = (ArrayList)savedWriteList.Clone();
                            error = (ArrayList)savedErrorList.Clone();
                            int microSeconds = 1000 * (int)Math.min(Integer.MAX_VALUE / 1000, timeout);
                            read.Add(notifySocket);
                            try
                            {
                                implSelect(read, write, error, microSeconds);
                                timeout -= microSeconds / 1000;
                            }
                            catch(SocketException _)
                            {
                                read.Clear();
                                write.Clear();
                                error.Clear();
                                purgeList(savedReadList);
                                purgeList(savedWriteList);
                                purgeList(savedErrorList);
                            }
                        } while(timeout > 0 && read.get_Count() == 0 && write.get_Count() == 0 && error.get_Count() == 0 && !unhandledWakeup);
                        read.Remove(notifySocket);
                    }
d198 1
a198 1
                finally
d200 6
a205 7
                    end();
                    synchronized (wakeupMutex)
                    {
                        unhandledWakeup = false;
                        notifySocket.Close();
                        notifySocket = null;
                    }
d207 16
d224 7
a230 4
                Iterator it = keys.iterator ();

                int updatedCount = 0;
                while (it.hasNext())
d232 1
a232 4
                    int ops = 0;
                    SelectionKeyImpl key = (SelectionKeyImpl)it.next();

                    for (int i = 0; i < error.get_Count(); i++)
d234 11
a244 1
                        if (key.getSocket() == error.get_Item(i))
a246 1
                            break;
d248 1
a248 5
                    }

                    for (int i = 0; i < read.get_Count(); i++)
                    {
                        if (key.getSocket() == read.get_Item(i))
a257 1
                            break;
d259 1
a259 5
                    }

                    for (int i = 0; i < write.get_Count(); i++)
                    {
                        if (key.getSocket() == write.get_Item(i))
d261 2
a262 1
                            if (key.channel() instanceof SocketChannelImpl)
d264 1
a264 9
                                SocketChannelImpl impl = (SocketChannelImpl)key.channel();
                                if (impl.isConnected())
                                {
                                    ops |= SelectionKey.OP_WRITE;
                                }
                                else
                                {
                                    ops |= SelectionKey.OP_CONNECT;
                                }
a269 1
                            break;
d271 5
a275 10
                    }

                    ops &= key.interestOps();

                    if ((key.readyOps() & ops) != ops)
                    {
                        updatedCount++;
                        // Set new ready ops
                        key.readyOps(key.readyOps() | ops);
                        if (debug)
d277 20
a296 11
                            System.out.println("SelectorImpl.select: readyOps = " + (key.interestOps () & ops));
                        }
                        if (key.channel() instanceof SocketChannelImpl)
                        {
                            SocketChannelImpl impl = (SocketChannelImpl)key.channel();
                            impl.selected();
                        }
                        // If key is not yet selected add it.
                        if (!selected.contains(key))
                        {
                            selected.add(key);
a299 3
                deregisterCancelledKeys();
            
                return updatedCount;
d302 1
a306 2
        // HACK we shouldn't be holding the keys lock while blocking
        cli.System.Threading.Monitor.Exit(keys);
d309 1
d312 1
a312 9
                VMThread.enterInterruptableWait(this);
                try
                {
                    Socket.Select(read, write, error, microSeconds);
                }
                finally
                {
                    VMThread.leaveInterruptableWait();
                }
d314 1
a314 1
            catch (InterruptedException _)
d316 1
a316 2
                wakeup();
                Thread.currentThread().interrupt();
d319 1
a319 1
        finally
d321 2
a322 1
            cli.System.Threading.Monitor.Enter(keys);
a349 8
    
    public final Set selectedKeys()
    {
        if (!isOpen())
            throw new ClosedSelectorException();

        return selected;
    }
d351 1
a351 1
    public final Selector wakeup()
d358 1
d360 1
a361 1
      
a364 20
    private final void deregisterCancelledKeys()
    {
        Set ckeys = cancelledKeys();
        synchronized (ckeys)
        {
            Iterator it = ckeys.iterator();

            while (it.hasNext())
            {
                keys.remove((SelectionKeyImpl)it.next());
                it.remove();
            }
        }
    }

    protected SelectionKey register(SelectableChannel ch, int ops, Object att)
    {
        return register((AbstractSelectableChannel)ch, ops, att);
    }

d368 1
a368 1
    
d376 1
a376 1
            throw new InternalError ("No known channel type");
d383 1
a383 1
            keys.add (result);
a384 1

@


1.10
log
@*** empty log message ***
@
text
@d63 17
a79 17
  private static boolean debug = false;
  private final HashSet keys = new HashSet();
  private final HashSet selected = new HashSet();
  private final Object wakeupMutex = new Object();
  private Socket notifySocket;
  private volatile boolean unhandledWakeup;

  public SelectorImpl(SelectorProvider provider)
  {
    super(provider);
  }

  protected void implCloseSelector() throws IOException
  {
    // Cancel any pending select operation.
    wakeup();
  }
d86 4
a89 4
  public Set keys()
  {
    if (!isOpen())
      throw new ClosedSelectorException();
d91 2
a92 2
    return Collections.unmodifiableSet(keys);
  }
d94 16
a109 48
  public int selectNow() throws IOException
  {
    // FIXME: We're simulating an immediate select
    // via a select with a timeout of one millisecond.
    return select(1);
  }

  public int select() throws IOException
  {
    return select(0);
  }

  private ArrayList getSocketArray(int ops)
  {
    ArrayList result = new ArrayList();
    Iterator it = keys.iterator();

    // Fill the array with the file descriptors
    while (it.hasNext())
      {
        SelectionKeyImpl key = (SelectionKeyImpl)it.next();

        int validOps = ops & key.channel().validOps();

        if ((key.interestOps() & validOps) != 0 && (key.readyOps() & validOps) != validOps)
          {
            result.Add(key.getSocket());
          }
      }

    return result;
  }

  public synchronized int select(long timeout) throws IOException
  {
    if (!isOpen())
      throw new ClosedSelectorException();

    synchronized (keys)
      {
        synchronized (selected)
          {
            deregisterCancelledKeys();

            // Set only keys with the needed interest ops into the arrays.
            ArrayList read = getSocketArray(SelectionKey.OP_READ | SelectionKey.OP_ACCEPT);
            ArrayList write = getSocketArray(SelectionKey.OP_WRITE | SelectionKey.OP_CONNECT);
            ArrayList error = getSocketArray(SelectionKey.OP_CONNECT);
d111 8
a118 1
            if (debug)
d120 1
a120 1
                System.out.println("SelectorImpl.select: read.Count = " + read.get_Count() + ", write.Count = " + write.get_Count() + ", error.Count = " + error.get_Count() + ", timeout = " + timeout);
d122 15
d138 9
a146 16
            synchronized (wakeupMutex)
              {
                if (unhandledWakeup)
                  {
                    if (debug)
                    {
                        System.out.println("SelectorImpl.select: returning due to unhandled wakeup");
                    }
                    unhandledWakeup = false;
                    return 0;
                  }
                else
                  {
                    notifySocket = createNotifySocket();
                  }
              }
d148 1
a148 7
            try
              {
                begin();
                ArrayList savedReadList = read;
                ArrayList savedWriteList = write;
                ArrayList savedErrorList = error;
                if (timeout == 0)
d150 1
a150 1
                    do
d152 1
a152 5
                        read = (ArrayList)savedReadList.Clone();
                        write = (ArrayList)savedWriteList.Clone();
                        error = (ArrayList)savedErrorList.Clone();
                        read.Add(notifySocket);
                        try
d154 1
a154 1
                            implSelect(read, write, error, Integer.MAX_VALUE);
d156 7
a162 11
                        catch(SocketException _)
                        {
                            read.Clear();
                            write.Clear();
                            error.Clear();
                            purgeList(savedReadList);
                            purgeList(savedWriteList);
                            purgeList(savedErrorList);
                        }
                    } while(read.get_Count() == 0 && write.get_Count() == 0 && error.get_Count() == 0 && !unhandledWakeup);
                    read.Remove(notifySocket);
d164 2
a165 1
                else
d167 5
a171 1
                    do
d173 1
a173 6
                        read = (ArrayList)savedReadList.Clone();
                        write = (ArrayList)savedWriteList.Clone();
                        error = (ArrayList)savedErrorList.Clone();
                        int microSeconds = 1000 * (int)Math.min(Integer.MAX_VALUE / 1000, timeout);
                        read.Add(notifySocket);
                        try
d175 23
a197 4
                            implSelect(read, write, error, microSeconds);
                            timeout -= microSeconds / 1000;
                        }
                        catch(SocketException _)
d199 22
a220 9
                            read.Clear();
                            write.Clear();
                            error.Clear();
                            purgeList(savedReadList);
                            purgeList(savedWriteList);
                            purgeList(savedErrorList);
                        }
                    } while(timeout > 0 && read.get_Count() == 0 && write.get_Count() == 0 && error.get_Count() == 0 && !unhandledWakeup);
                    read.Remove(notifySocket);
d222 1
a222 5
              }
            finally
              {
                end();
                synchronized (wakeupMutex)
d224 7
a230 3
                    unhandledWakeup = false;
                    notifySocket.Close();
                    notifySocket = null;
a231 1
              }
d233 1
a233 1
            Iterator it = keys.iterator ();
d235 5
a239 5
            int updatedCount = 0;
            while (it.hasNext())
            {
                int ops = 0;
                SelectionKeyImpl key = (SelectionKeyImpl)it.next();
d241 1
a241 3
                for (int i = 0; i < error.get_Count(); i++)
                {
                    if (key.getSocket() == error.get_Item(i))
d243 5
a247 2
                        ops |= SelectionKey.OP_CONNECT;
                        break;
a248 1
                }
d250 1
a250 3
                for (int i = 0; i < read.get_Count(); i++)
                {
                    if (key.getSocket() == read.get_Item(i))
d252 1
a252 1
                        if (key.channel() instanceof ServerSocketChannelImpl)
d254 9
a262 5
                            ops |= SelectionKey.OP_ACCEPT;
                        }
                        else
                        {
                            ops |= SelectionKey.OP_READ;
a263 1
                        break;
a264 1
                }
d266 1
a266 3
                for (int i = 0; i < write.get_Count(); i++)
                {
                    if (key.getSocket() == write.get_Item(i))
d268 1
a268 1
                        if (key.channel() instanceof SocketChannelImpl)
d270 1
a270 2
                            SocketChannelImpl impl = (SocketChannelImpl)key.channel();
                            if (impl.isConnected())
d272 9
a280 1
                                ops |= SelectionKey.OP_WRITE;
d284 1
a284 1
                                ops |= SelectionKey.OP_CONNECT;
d286 1
a287 5
                        else
                        {
                            ops |= SelectionKey.OP_WRITE;
                        }
                        break;
a288 1
                }
d290 1
a290 1
                ops &= key.interestOps();
d292 1
a292 6
                if ((key.readyOps() & ops) != ops)
                {
                    updatedCount++;
                    // Set new ready ops
                    key.readyOps(key.readyOps() | ops);
                    if (debug)
d294 17
a310 11
                        System.out.println("SelectorImpl.select: readyOps = " + (key.interestOps () & ops));
                    }
                    if (key.channel() instanceof SocketChannelImpl)
                    {
                        SocketChannelImpl impl = (SocketChannelImpl)key.channel();
                        impl.selected();
                    }
                    // If key is not yet selected add it.
                    if (!selected.contains(key))
                    {
                        selected.add(key);
d313 3
a316 4
            deregisterCancelledKeys();
            
            return updatedCount;
          }
d318 1
a318 1
  }
d350 1
a350 3
  private static void purgeList(ArrayList list)
  {
    for (int i = 0; i < list.get_Count(); i++)
d352 1
a352 2
        Socket s = (Socket)list.get_Item(i);
        try
d354 11
a364 7
            if (false) throw new cli.System.ObjectDisposedException("");
            s.Poll(0, SelectMode.wrap(SelectMode.SelectError));
        }
        catch (cli.System.ObjectDisposedException _)
        {
            list.RemoveAt(i);
            i--;
a366 1
  }
d368 6
a373 6
  private static Socket createNotifySocket()
  {
    return new Socket(AddressFamily.wrap(AddressFamily.InterNetwork),
                        SocketType.wrap(SocketType.Dgram),
                        ProtocolType.wrap(ProtocolType.Udp));
  }
d375 13
a387 13
  public final Set selectedKeys()
  {
    if (!isOpen())
      throw new ClosedSelectorException();

    return selected;
  }

  public final Selector wakeup()
  {
    synchronized (wakeupMutex)
      {
        unhandledWakeup = true;
d389 3
a391 3
        if (notifySocket != null)
          notifySocket.Close();
      }
d393 2
a394 2
    return this;
  }
d396 1
a396 4
  private final void deregisterCancelledKeys()
  {
    Set ckeys = cancelledKeys();
    synchronized (ckeys)
d398 4
a401 1
      Iterator it = ckeys.iterator();
d403 5
a407 4
      while (it.hasNext())
        {
          keys.remove((SelectionKeyImpl)it.next());
          it.remove();
a409 1
  }
d411 8
a418 8
  protected SelectionKey register(SelectableChannel ch, int ops, Object att)
  {
    return register((AbstractSelectableChannel)ch, ops, att);
  }

  protected SelectionKey register(AbstractSelectableChannel ch, int ops, Object att)
  {
    SelectionKeyImpl result;
d420 11
a430 16
    if (ch instanceof SocketChannelImpl)
      result = new SelectionKeyImpl(ch, this, ((SocketChannelImpl)ch).getSocket());
    else if (ch instanceof DatagramChannelImpl)
      result = new SelectionKeyImpl(ch, this, ((DatagramChannelImpl)ch).getSocket());
    else if (ch instanceof ServerSocketChannelImpl)
      result = new SelectionKeyImpl(ch, this, ((ServerSocketChannelImpl)ch).getSocket());
    else
      throw new InternalError ("No known channel type");

    result.interestOps(ops);
    result.attach(att);

    synchronized (keys)
      {
        keys.add (result);
      }
d432 7
a438 2
    return result;
  }
@


1.9
log
@*** empty log message ***
@
text
@d61 1
a61 1
public final class SelectorImpl extends AbstractSelector
d81 5
a177 1
                        // TODO we should somehow support waking up in response to Thread.interrupt()
d181 1
a181 15
                            if (false) throw new SocketException();
                            // HACK we shouldn't be holding the keys lock while blocking
                            cli.System.Threading.Monitor.Exit(keys);
                            try
                            {
                                if (debug)
                                {
                                    System.out.println("SelectorImpl.select: Socket.Select");
                                }
                                Socket.Select(read, write, error, Integer.MAX_VALUE);
                            }
                            finally
                            {
                                cli.System.Threading.Monitor.Enter(keys);
                            }
a184 5
                            if (debug)
                            {
                                System.out.println("SelectorImpl.select:");
                                _.printStackTrace();
                            }
a202 1
                        // TODO we should somehow support waking up in response to Thread.interrupt()
d206 1
a206 11
                            if (false) throw new SocketException();
                            // HACK we shouldn't be holding the keys lock while blocking
                            cli.System.Threading.Monitor.Exit(keys);
                            try
                            {
                                Socket.Select(read, write, error, microSeconds);
                            }
                            finally
                            {
                                cli.System.Threading.Monitor.Enter(keys);
                            }
d320 30
d429 3
a436 2
    result.interestOps(ops);
    result.attach(att);
@


1.8
log
@*** empty log message ***
@
text
@d64 3
a66 12
  private Set keys;
  private Set selected;

  /**
   * A dummy object whose monitor regulates access to both our
   * selectThread and unhandledWakeup fields.
   */
  private Object wakeupMutex = new Object ();
  
  /**
   * Any thread that's currently blocked in a select operation.
   */
a67 10
  
  /**
   * Indicates whether we have an unhandled wakeup call. This can
   * be due to either wakeup() triggering a thread interruption while
   * a thread was blocked in a select operation (in which case we need
   * to reset this thread's interrupt status after interrupting the
   * select), or else that no thread was on a select operation at the
   * time that wakeup() was called, in which case the following select()
   * operation should return immediately with nothing selected.
   */
d70 1
a70 1
  public SelectorImpl (SelectorProvider provider)
d72 1
a72 4
    super (provider);
    
    keys = new HashSet ();
    selected = new HashSet ();
d75 1
a75 2
  protected final void implCloseSelector()
    throws IOException
a78 11
    
    synchronized (keys)
      {
        synchronized (selected)
          {
            synchronized (cancelledKeys ())
              {
                // FIXME: Release resources here.
              }
          }
      }
d81 1
a81 1
  public final Set keys()
d86 1
a86 1
    return Collections.unmodifiableSet (keys);
d89 1
a89 2
  public final int selectNow()
    throws IOException
d93 1
a93 1
    return select (1);
d96 1
a96 2
  public final int select()
    throws IOException
d98 1
a98 1
    return select (0);
d101 1
a101 1
  private final ArrayList getFDsAsArray(int ops)
d109 3
a111 1
        SelectionKeyImpl key = (SelectionKeyImpl) it.next ();
d113 1
a113 1
        if ((key.interestOps () & ops) != 0)
d122 1
a122 2
  public synchronized int select(long timeout)
    throws IOException
d126 1
a126 1
      
d134 3
a136 4
            ArrayList read = getFDsAsArray (SelectionKey.OP_READ
                                        | SelectionKey.OP_ACCEPT);
            ArrayList write = getFDsAsArray (SelectionKey.OP_WRITE
                                         | SelectionKey.OP_CONNECT);
d140 1
a140 1
                System.out.println("SelectorImpl.select: read.Count = " + read.get_Count() + ", write.Count = " + write.get_Count() + ", timeout = " + timeout);
a142 16
            // Test to see if we've got an unhandled wakeup call,
            // in which case we return immediately. Otherwise,
            // remember our current thread and jump into the select.
            // The monitor for dummy object wakeupMutex regulates
            // access to these fields.

            // FIXME: Not sure from the spec at what point we should
            // return "immediately". Is it here or immediately upon
            // entry to this function?
            
            // NOTE: There's a possibility of another thread calling
            // wakeup() immediately after our thread releases
            // wakeupMutex's monitor here, in which case we'll
            // do the select anyway. Since calls to wakeup() and select()
            // among different threads happen in non-deterministic order,
            // I don't think this is an issue.
a159 2
            // Call the native select() on all file descriptors.
            int result = 0;
d165 1
d172 1
a172 1
                        // TODO we should probably select errors too
d186 1
a186 1
                                Socket.Select(read, write, null, Integer.MAX_VALUE);
d202 1
d205 1
d207 1
a207 2
                    } while(read.get_Count() == 0 && write.get_Count() == 0 && !unhandledWakeup);
                    // TODO result should be set correctly
a208 5
                    result = read.get_Count() + write.get_Count();
                    if (debug)
                    {
                        System.out.println("SelectorImpl.select: result = " + result);
                    }
d216 1
a217 1
                        // TODO we should probably select errors too
d227 1
a227 1
                                Socket.Select(read, write, null, microSeconds);
d239 1
d242 1
d244 1
a244 2
                    } while(timeout > 0 && read.get_Count() == 0 && write.get_Count() == 0 && !unhandledWakeup);
                    // TODO result should be set correctly
a245 1
                    result = read.get_Count() + write.get_Count();
d261 3
a263 2
            while (it.hasNext ())
              {
d265 1
a265 1
                SelectionKeyImpl key = (SelectionKeyImpl) it.next ();
d267 8
a274 5
                // If key is already selected retrieve old ready ops.
                if (selected.contains (key))
                  {
                    ops = key.readyOps ();
                  }
a275 1
                // Set new ready read/accept ops
d277 1
a277 1
                  {
d279 5
a283 5
                      {
                        if (key.channel () instanceof ServerSocketChannelImpl)
                          {
                            ops = ops | SelectionKey.OP_ACCEPT;
                          }
d285 6
a290 5
                          {
                            ops = ops | SelectionKey.OP_READ;
                          }
                      }
                  }
a291 1
                // Set new ready write ops
d293 1
a293 1
                  {
d295 20
a314 13
                      {
                        ops = ops | SelectionKey.OP_WRITE;

        //                 if (key.channel ().isConnected ())
        //                   {
        //                     ops = ops | SelectionKey.OP_WRITE;
        //                   }
        //                 else
        //                   {
        //                     ops = ops | SelectionKey.OP_CONNECT;
        //                   }
                     }
                  }
d316 1
a316 1
                // FIXME: We dont handle exceptional file descriptors yet.
d318 1
a318 9
                // If key is not yet selected add it.
                if (!selected.contains (key))
                  {
                    selected.add (key);
                  }

                // Set new ready ops
                key.readyOps (key.interestOps () & ops);
                if (debug)
d320 17
a336 1
                    System.out.println("SelectorImpl.select: readyOps = " + (key.interestOps () & ops));
d338 1
a338 1
              }
d341 1
a341 1
            return result;
d394 1
a394 1
    Set ckeys = cancelledKeys ();
d399 1
a399 1
      while (it.hasNext ())
d401 2
a402 2
          keys.remove ((SelectionKeyImpl) it.next ());
          it.remove ();
d407 1
a407 1
  protected SelectionKey register (SelectableChannel ch, int ops, Object att)
d409 1
a409 1
    return register ((AbstractSelectableChannel) ch, ops, att);
d412 1
a412 2
  protected final SelectionKey register (AbstractSelectableChannel ch, int ops,
                                         Object att)
d430 2
a431 2
    result.interestOps (ops);
    result.attach (att);
@


1.7
log
@*** empty log message ***
@
text
@d457 1
a457 1
      result = new SocketChannelSelectionKey (ch, this);
d459 1
a459 1
      result = new DatagramChannelSelectionKey (ch, this);
d461 1
a461 1
      result = new ServerSocketChannelSelectionKey (ch, this);
@


1.6
log
@*** empty log message ***
@
text
@d58 1
d63 1
d174 5
d199 4
d235 4
d248 9
d262 4
d294 4
d373 4
d385 18
@


1.5
log
@*** empty log message ***
@
text
@d236 1
d269 1
@


1.4
log
@*** empty log message ***
@
text
@d220 10
a229 1
                            Socket.Select(read, write, null, Integer.MAX_VALUE);
d251 10
a260 1
                            Socket.Select(read, write, null, microSeconds);
@


1.3
log
@*** empty log message ***
@
text
@d54 1
d69 1
a69 1
  private Object selectThreadMutex = new Object ();
d85 1
a85 1
  private boolean unhandledWakeup;
d175 1
a175 1
            // The monitor for dummy object selectThreadMutex regulates
d184 1
a184 1
            // selectThreadMutex's monitor here, in which case we'll
d188 1
a188 1
            synchronized (selectThreadMutex)
d217 8
a224 1
                        Socket.Select(read, write, null, Integer.MAX_VALUE);
d239 9
a247 2
                        Socket.Select(read, write, null, microSeconds);
                        timeout -= microSeconds / 1000;
d256 6
a261 19
                notifySocket.Close();
              }

            // If our unhandled wakeup flag is set at this point,
            // reset our thread's interrupt flag because we were
            // awakened by wakeup() instead of an external thread
            // interruption.
            //
            // NOTE: If we were blocked in a select() and one thread
            // called Thread.interrupt() on the blocked thread followed
            // by another thread calling Selector.wakeup(), then race
            // conditions could make it so that the thread's interrupt
            // flag is reset even though the Thread.interrupt() call
            // "was there first". I don't think we need to care about
            // this scenario.
            synchronized (selectThreadMutex)
              {
                unhandledWakeup = false;
                notifySocket = null;
d346 1
a346 1
    synchronized (selectThreadMutex)
@


1.2
log
@*** empty log message ***
@
text
@d54 3
d73 1
a73 1
  private Thread selectThread;
d196 1
a196 1
                    selectThread = Thread.currentThread ();
d215 1
d217 1
a217 1
                    } while(read.get_Count() == 0 && write.get_Count() == 0);
d230 1
d233 1
a233 1
                    } while(timeout > 0 && read.get_Count() == 0 && write.get_Count() == 0);
d241 1
d258 2
a259 6
                if (unhandledWakeup)
                  {
                    unhandledWakeup = false;
                    Thread.interrupted ();
                  }
                selectThread = null;
d326 7
a343 8
    // IMPLEMENTATION NOTE: Whereas the specification says that
    // thread interruption should trigger a call to wakeup, we
    // do the reverse under the covers: wakeup triggers a thread
    // interrupt followed by a subsequent reset of the thread's
    // interrupt status within select().
    
    // First, acquire the monitor of the object regulating
    // access to our selectThread and unhandledWakeup fields.
d348 2
a349 4
        // Interrupt any thread which is currently blocked in
        // a select operation.
        if (selectThread != null)
          selectThread.interrupt ();
@


1.1
log
@*** empty log message ***
@
text
@d214 2
d229 2
@

