head	1.29;
access;
symbols
	v0_40_0_6:1.25
	v0_40_0_5:1.25
	v0_36_0_14:1.22
	v0_40_0_3:1.25
	v0_40_0_2:1.25
	v0_40_0_1:1.25
	v0_40_0_0:1.25
	v0_40:1.25.0.2
	v0_36_0_13:1.22
	v0_38_0_1:1.24
	v0_38_0_0:1.24
	v0_38:1.24.0.2
	v0_36_0_9:1.22
	v0_36_0_7:1.22
	v0_36_0_5:1.22
	v0_36_0_4:1.22
	v0_36_0_3:1.22
	v0_36_0_2:1.22
	v0_36_0_1:1.22
	v0_36_0_0:1.22
	v0_36:1.22.0.2
	v0_34_0_3:1.21
	v0_34_0_2:1.21
	v0_34_0_1:1.21
	v0_34_0_0:1.21
	v0_34:1.21.0.2
	v0_32:1.20.0.2
	v0_32_0_0:1.20
	v0_30:1.16.0.2
	v0_28_0_0:1.15
	v0_26_0_1:1.13
	v0_26_0_0:1.13
	v0_24_0_1:1.12
	v0_24_0_0:1.12
	v0_22_0_0:1.9
	v0_20_0_0:1.7
	v0_18_0_0:1.5
	v0_16_0_0:1.4
	v0_14_0_1:1.3
	v0_14_0_0:1.3
	v0_12_0_0:1.2
	v0_10_0_1:1.2
	v0_10_0_0:1.2;
locks; strict;
comment	@# @;


1.29
date	2009.07.03.05.55.58;	author jfrijters;	state dead;
branches;
next	1.28;

1.28
date	2009.07.03.05.28.19;	author jfrijters;	state Exp;
branches;
next	1.27;

1.27
date	2009.05.07.20.41.48;	author smallsql;	state Exp;
branches;
next	1.26;

1.26
date	2009.05.07.12.52.48;	author smallsql;	state Exp;
branches;
next	1.25;

1.25
date	2009.03.26.13.57.51;	author jfrijters;	state Exp;
branches;
next	1.24;

1.24
date	2008.04.14.05.06.31;	author jfrijters;	state Exp;
branches;
next	1.23;

1.23
date	2008.04.07.04.53.44;	author jfrijters;	state Exp;
branches;
next	1.22;

1.22
date	2007.08.16.14.04.59;	author jfrijters;	state Exp;
branches;
next	1.21;

1.21
date	2007.02.03.14.23.44;	author jfrijters;	state Exp;
branches;
next	1.20;

1.20
date	2006.09.05.04.53.16;	author jfrijters;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.17.16.57.40;	author jfrijters;	state Exp;
branches;
next	1.18;

1.18
date	2006.08.17.16.17.48;	author jfrijters;	state Exp;
branches;
next	1.17;

1.17
date	2006.08.17.08.14.47;	author jfrijters;	state Exp;
branches;
next	1.16;

1.16
date	2006.06.15.12.29.11;	author jfrijters;	state Exp;
branches;
next	1.15;

1.15
date	2006.04.05.11.04.43;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2006.03.23.11.57.44;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2006.01.31.10.13.32;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2006.01.16.14.18.45;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2005.12.19.15.12.49;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2005.12.07.09.06.32;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2005.11.14.10.27.41;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2005.09.21.14.26.38;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2005.09.07.07.02.48;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2005.08.29.07.26.05;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2005.07.14.12.28.45;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.23.08.24.08;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2005.03.17.14.27.18;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2005.01.03.08.26.22;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.07.09.53.42;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Moved VMSystemProperties from gnu.classpath to java.lang.
@
text
@/*
  Copyright (C) 2004-2008 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
package gnu.classpath;

import java.util.Properties;

@@ikvm.lang.Internal
public class VMSystemProperties
{
    public static final String SPEC_TITLE = "Java Platform API Specification";
    public static final String SPEC_VERSION = "1.6";
    public static final String SPEC_VENDOR = "Sun Microsystems Inc.";

    public static cli.System.Collections.Hashtable props;

    private static native String getVersion();

    private static cli.System.Reflection.Assembly GetEntryAssembly()
        throws cli.System.MissingMethodException
    {
        return cli.System.Reflection.Assembly.GetEntryAssembly();
    }

    private static String GetSystemDirectory()
        throws cli.System.MissingMethodException,
               cli.System.Security.SecurityException
    {
        return cli.System.Environment.get_SystemDirectory();
    }

    private static String GetUserName()
        throws cli.System.MissingMethodException,
               cli.System.Security.SecurityException
    {
        return cli.System.Environment.get_UserName();
    }

    private static String GetCurrentDirectory()
        throws cli.System.MissingMethodException,
               cli.System.Security.SecurityException
    {
        return cli.System.Environment.get_CurrentDirectory();
    }

    private static String GetNewLine()
        throws cli.System.MissingMethodException
    {
        return cli.System.Environment.get_NewLine();
    }

    private static String GetEnvironmentVariableImpl(String name)
        throws cli.System.MissingMethodException
    {
        return cli.System.Environment.GetEnvironmentVariable(name);
    }

    private static String GetEnvironmentVariable(String name)
    {
        try
        {
            return GetEnvironmentVariableImpl(name);
        }
        catch(cli.System.MissingMethodException _)
        {
            return null;
        }
    }

    private static String SafeGetEnvironmentVariable(String name)
    {
        try
        {
            if(false) throw new cli.System.Security.SecurityException();
            return GetEnvironmentVariable(name);
        }
        catch(cli.System.Security.SecurityException _)
        {
            return null;
        }
    }

    private static String GetAssemblyLocation(cli.System.Reflection.Assembly asm)
        throws cli.System.MissingMethodException
    {
        // Assembly.get_Location() doesn't exist on the Compact Framework
        return asm.get_Location();
    }

    private static String getLibraryPath()
    {
        String libraryPath;
        if(ikvm.internal.Util.WINDOWS)
        {
	    // see /hotspot/src/os/win32/vm/os_win32.cpp for the comment that describes how we build the path
	    libraryPath = ".";
	    String windir = SafeGetEnvironmentVariable("SystemRoot");
	    if(windir != null)
	    {
		libraryPath += cli.System.IO.Path.PathSeparator + windir + "\\Sun\\Java\\bin";
	    }
            try
            {
                libraryPath += cli.System.IO.Path.PathSeparator + GetSystemDirectory();
            }
            catch(cli.System.MissingMethodException _)
            {
            }
            catch(cli.System.Security.SecurityException _)
            {
            }
            if(windir != null)
            {
		libraryPath += cli.System.IO.Path.PathSeparator + windir;
            }
            String path = SafeGetEnvironmentVariable("PATH");
            if(path != null)
            {
                libraryPath += cli.System.IO.Path.PathSeparator + path;
            }
        }
        else if(ikvm.internal.Util.MACOSX)
        {
            libraryPath = ".";
        }
        else /* assume Linux, since that's the only other platform we support */
        {
	    // on Linux we have some hardcoded paths (from /hotspot/src/os/linux/vm/os_linux.cpp)
	    // and we can only guess the cpu arch based on bitness (that means only x86 and x64)
	    String cpu_arch = cli.System.IntPtr.get_Size() == 4 ? "i386" : "amd64";
	    libraryPath = "/usr/java/packages/lib/" + cpu_arch + ":/lib:/usr/lib";
            String ld_library_path = SafeGetEnvironmentVariable("LD_LIBRARY_PATH");
            if(ld_library_path != null)
            {
		libraryPath = ld_library_path + ":" + libraryPath;
            }
        }
        try
        {
            cli.System.Reflection.Assembly entryAsm = GetEntryAssembly();
            // If the CLR was started by a native app (e.g. via COM interop) there is no entry assembly
            if (entryAsm != null)
            {
		// the application (or launcher) directory is prepended to the library path
		// (similar to how the JDK prepends its directory to the path)
                libraryPath = new cli.System.IO.FileInfo(GetAssemblyLocation(entryAsm)).get_DirectoryName() + cli.System.IO.Path.PathSeparator + libraryPath;
            }
        }
        catch(cli.System.MissingMethodException _)
        {
        }
        catch(Throwable _)
        {
            // ignore
        }
        return libraryPath;
    }

    private static void initCommonProperties(Properties p)
    {
        p.setProperty("java.version", "1.6.0");
        p.setProperty("java.vendor", "Jeroen Frijters");
        p.setProperty("java.vendor.url", "http://ikvm.net/");
        p.setProperty("java.vendor.url.bug", "http://www.ikvm.net/bugs");
        p.setProperty("java.vm.specification.version", "1.0");
        p.setProperty("java.vm.specification.vendor", "Sun Microsystems Inc.");
        p.setProperty("java.vm.specification.name", "Java Virtual Machine Specification");
        p.setProperty("java.vm.version", getVersion());
        p.setProperty("java.vm.vendor", "Jeroen Frijters");
        p.setProperty("java.vm.name", "IKVM.NET");
        p.setProperty("java.runtime.name", "IKVM.NET");
        p.setProperty("java.runtime.version", getVersion());
        p.setProperty("java.specification.version", SPEC_VERSION);
        p.setProperty("java.specification.vendor", SPEC_VENDOR);
        p.setProperty("java.specification.name", SPEC_TITLE);
        p.setProperty("java.class.version", "50.0");
        p.setProperty("java.class.path", "");
        p.setProperty("java.library.path", getLibraryPath());
        try
        {
            if(false) throw new cli.System.Security.SecurityException();
            p.setProperty("java.io.tmpdir", cli.System.IO.Path.GetTempPath());
        }
        catch(cli.System.Security.SecurityException _)
        {
            // TODO should we set another value?
            p.setProperty("java.io.tmpdir", ".");
        }
        p.setProperty("java.ext.dirs", "");
        // NOTE os.name *must* contain "Windows" when running on Windows, because Classpath tests on that
        String osname = null;
        String osver = null;
        cli.System.OperatingSystem os = cli.System.Environment.get_OSVersion();
        int major = os.get_Version().get_Major();
        int minor = os.get_Version().get_Minor();
        switch(os.get_Platform().Value)
        {
            case cli.System.PlatformID.Win32NT:
                switch(major)
                {
                    case 3:
                    case 4:
                        osver = major + "." + minor;
                        osname = "Windows NT";
                        break;
                    case 5:
                        switch(minor)
                        {
                            case 0:
                                osver = "5.0";
                                osname = "Windows 2000";
                                break;
                            case 1:
                                osver = "5.1";
                                osname = "Windows XP";
                                break;
                            case 2:
                                osver = "5.2";
                                osname = "Windows 2003";
                                break;
                        }
                        break;
                    case 6:
                        // since there appears to be no managed way to differentiate between Client/Server, we report client names
                        switch(minor)
                        {
                            case 0:
                                osver = "6.0";
                                osname = "Windows Vista";
                                break;
                            case 1:
                                osver = "6.1";
                                osname = "Windows 7";
                                break;
                        }
                        break;
                }
                break;
            case cli.System.PlatformID.Win32Windows:
                if(major == 4)
                {
                    switch(minor)
                    {
                        case 0:
                            osver = "4.0";
                            osname = "Windows 95";
                            break;
                        case 10:
                            osver = "4.10";
                            osname = "Windows 98";
                            break;
                        case 90:
                            osver = "4.90";
                            osname = "Windows Me";
                            break;
                    }
                }
                break;
            case cli.System.PlatformID.Unix:
		if(ikvm.internal.Util.MACOSX)
		{
		    // for back compat Mono will return PlatformID.Unix when running on the Mac,
		    // so we handle that explicitly here
		    osname = "Mac OS X";
		    // HACK this tries to map the Darwin version to the OS X version
		    // (based on http://en.wikipedia.org/wiki/Darwin_(operating_system)#Releases)
		    cli.System.Version ver = cli.System.Environment.get_OSVersion().get_Version();
		    osver = "10." + (ver.get_Major() - 4) + "." + ver.get_Minor();
		}
		break;
        }
        if(osname == null)
        {
            osname = cli.System.Environment.get_OSVersion().ToString();
        }
        if(osver == null)
        {
            osver = cli.System.Environment.get_OSVersion().get_Version().ToString();
        }
        p.setProperty("os.name", osname);
        p.setProperty("os.version", osver);
        String arch = SafeGetEnvironmentVariable("PROCESSOR_ARCHITECTURE");
        if(arch == null)
        {
	    // we don't know, so we make a guess
	    if(cli.System.IntPtr.get_Size() == 4)
	    {
		arch = ikvm.internal.Util.WINDOWS ? "x86" : "i386";
	    }
	    else
	    {
		arch = "amd64";
	    }
        }
        if(arch.equals("AMD64"))
        {
            arch = "amd64";
        }
        p.setProperty("os.arch", arch);
        p.setProperty("sun.arch.data.model", "" + (cli.System.IntPtr.get_Size() * 8));
        p.setProperty("file.separator", "" + cli.System.IO.Path.DirectorySeparatorChar);
        p.setProperty("file.encoding", cli.System.Text.Encoding.get_Default().get_WebName());
        p.setProperty("path.separator", "" + cli.System.IO.Path.PathSeparator);
        try
        {
            p.setProperty("line.separator", GetNewLine());
        }
        catch(cli.System.MissingMethodException _)
        {
            p.setProperty("line.separator", "\r\n");
        }
        try
        {
            p.setProperty("user.name", GetUserName());
        }
        catch(cli.System.MissingMethodException _1)
        {
            p.setProperty("user.name", "(unknown)");
        }
        catch(cli.System.Security.SecurityException _)
        {
            p.setProperty("user.name", "(unknown)");
        }
        String home = SafeGetEnvironmentVariable("USERPROFILE");
        if(home == null)
        {
            // maybe we're on *nix
            home = SafeGetEnvironmentVariable("HOME");
            if(home == null)
            {
                // TODO maybe there is a better way
                // NOTE on MS .NET this doesn't return the correct path
                // (it returns "C:\\Documents and Settings\\username\\My Documents", but we really need
                // "C:\\Documents and Settings\\username" to be compatible with Sun, that's why we use %USERPROFILE% if it exists)
                try
                {
                    if(false) throw new cli.System.Security.SecurityException();
                    home = cli.System.Environment.GetFolderPath(cli.System.Environment.SpecialFolder.wrap(cli.System.Environment.SpecialFolder.Personal));
                }
                catch(cli.System.Security.SecurityException _)
                {
                    home = ".";
                }
            }
        }
        p.setProperty("user.home", home);
        try
        {
            p.setProperty("user.dir", GetCurrentDirectory());
        }
        catch(cli.System.MissingMethodException _1)
        {
            p.setProperty("user.dir", ".");
        }
        catch(cli.System.Security.SecurityException _)
        {
            p.setProperty("user.dir", ".");
        }
        p.setProperty("awt.toolkit", Configuration.default_awt_peer_toolkit);
    }

    public static void initOpenJDK(Properties p)
    {
	initCommonProperties(p);
        String[] culture = ((cli.System.String)(Object)cli.System.Globalization.CultureInfo.get_CurrentCulture().get_Name()).Split(new char[] { '-' });        
        p.setProperty("user.language", culture[0]);
        p.setProperty("user.country", culture.length > 1 ? culture[1] : "");
        p.setProperty("user.variant", culture.length > 2 ? culture[2] : "");
	p.setProperty("sun.cpu.endian", cli.System.BitConverter.IsLittleEndian ? "little" : "big");
	p.setProperty("file.encoding.pkg", "sun.io");
	p.setProperty("user.timezone", "");
	p.setProperty("sun.os.patch.level", "");
	p.setProperty("java.vm.info", "compiled mode");
	p.setProperty("sun.nio.MaxDirectMemorySize", "-1");
	p.setProperty("java.awt.graphicsenv", Configuration.default_graphics_enviroment );
	// TODO
	// sun.cpu.isalist:=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86
	// sun.desktop:=windows
	// sun.io.unicode.encoding:=UnicodeLittle
	// sun.java.launcher:=SUN_STANDARD
	// sun.jnu.encoding:=Cp1252
	// sun.management.compiler:=HotSpot Client Compiler
	// java.awt.printerjob:=sun.awt.windows.WPrinterJob
        try
        {
            // read properties from app.config
            if(false) throw new cli.System.Configuration.ConfigurationException();
            cli.System.Collections.Specialized.NameValueCollection appSettings = cli.System.Configuration.ConfigurationSettings.get_AppSettings();
            cli.System.Collections.IEnumerator keys = appSettings.GetEnumerator();
            while(keys.MoveNext())
            {
                String key = (String)keys.get_Current();
                if(key.startsWith("ikvm:"))
                {
                    p.setProperty(key.substring(5), appSettings.get_Item(key));
                }
            }
        }
        catch(cli.System.Configuration.ConfigurationException _)
        {
            // app.config is invalid, ignore
        }
        // set the properties that were specified with IKVM.Runtime.Startup.SetProperties()
        if(props != null)
        {
            cli.System.Collections.IEnumerator entries = ((cli.System.Collections.IEnumerable)props).GetEnumerator();
            while(entries.MoveNext())
            {
                cli.System.Collections.DictionaryEntry de = (cli.System.Collections.DictionaryEntry)entries.get_Current();
                p.setProperty((String)de.get_Key(), (String)de.get_Value());
            }
            props = null;
        }
    }
}
@


1.28
log
@Removed GNU Classpath related stuff.
@
text
@@


1.27
log
@use assembly name from the build process for the GraphicsEnvironment
@
text
@a379 2
        // we don't want Swing to use graphics 2D
        p.setProperty("gnu.javax.swing.noGraphics2D", "true");
a403 47
	postInit(p);
    }

    static void preInit(Properties p)
    {
	initCommonProperties(p);
        String[] culture = ((cli.System.String)(Object)cli.System.Globalization.CultureInfo.get_CurrentCulture().get_Name()).Split(new char[] { '-' });        
        p.setProperty("user.language", culture[0]);
        p.setProperty("user.region", culture.length > 1 ? culture[1] : "");
        p.setProperty("user.variant", culture.length > 2 ? culture[2] : "");
        try
        {
            if(false) throw new cli.System.Security.SecurityException();
            // HACK using the Assembly.Location property isn't correct
            cli.System.Reflection.Assembly asm = cli.System.Reflection.Assembly.GetExecutingAssembly();
            String loc = GetAssemblyLocation(asm);
            if(loc.length() == 0)
            {
                // The assembly was most likely loaded with Assembly.Load(byte[]) and so it doesn't
                // have a location.
                // TODO we may need to set some other value here
                p.setProperty("java.home", ".");
            }
            else
            {
                p.setProperty("java.home", new cli.System.IO.FileInfo(loc).get_DirectoryName());
            }
        }
        catch(cli.System.MissingMethodException _1)
        {
            // We're running on the Compact Framework
            // TODO we may need to set some other value here
            p.setProperty("java.home", ".");
        }
        catch(cli.System.Security.SecurityException _)
        {
            // when we're running in partial trust, we may not be allowed file access
            // TODO we may need to set some other value here
            p.setProperty("java.home", ".");
        }
        // HACK since we cannot use URL here (it depends on the properties being set), we manually encode the spaces in the assembly name
        p.setProperty("gnu.classpath.home.url", "ikvmres://" + ((cli.System.String)(Object)cli.System.Reflection.Assembly.GetExecutingAssembly().get_FullName()).Replace(" ", "%20") + "/lib");
        p.setProperty("gnu.cpu.endian", cli.System.BitConverter.IsLittleEndian ? "little" : "big");
    }

    static void postInit(Properties p)
    {
@


1.26
log
@Loading the GraphicsEnvironment with the Sun mechanism
@
text
@d397 1
a397 1
	p.setProperty("java.awt.graphicsenv", "ikvm.awt.NetGraphicsEnvironment, IKVM.AWT.WinForms");
@


1.25
log
@Added "Windows 7" detection for os.name system property.
@
text
@d397 1
a404 1
	// java.awt.graphicsenv:=sun.awt.Win32GraphicsEnvironment
@


1.24
log
@Set sun.nio.MaxDirectMemorySize to -1 to allow "unlimited" direct byte buffers.
@
text
@d244 1
d251 4
@


1.23
log
@- Improved java.library.path for Windows, Linux and Mac OS X.
- Added support for setting os.name and os.ver on Mac OS X.
- Try to guess os.arch based on IntPtr.Size.
@
text
@d391 1
@


1.22
log
@Refactored system properties initialization.
@
text
@d2 1
a2 1
  Copyright (C) 2004, 2005, 2006, 2007 Jeroen Frijters
d110 1
a110 1
    private static void initCommonProperties(Properties p)
d112 2
a113 23
        p.setProperty("java.version", "1.6.0");
        p.setProperty("java.vendor", "Jeroen Frijters");
        p.setProperty("java.vendor.url", "http://ikvm.net/");
        p.setProperty("java.vendor.url.bug", "http://www.ikvm.net/bugs");
        p.setProperty("java.vm.specification.version", "1.0");
        p.setProperty("java.vm.specification.vendor", "Sun Microsystems Inc.");
        p.setProperty("java.vm.specification.name", "Java Virtual Machine Specification");
        p.setProperty("java.vm.version", getVersion());
        p.setProperty("java.vm.vendor", "Jeroen Frijters");
        p.setProperty("java.vm.name", "IKVM.NET");
        p.setProperty("java.runtime.name", "IKVM.NET");
        p.setProperty("java.runtime.version", getVersion());
        p.setProperty("java.specification.version", SPEC_VERSION);
        p.setProperty("java.specification.vendor", SPEC_VENDOR);
        p.setProperty("java.specification.name", SPEC_TITLE);
        p.setProperty("java.class.version", "50.0");
        p.setProperty("java.class.path", "");
        String libraryPath = null;
        if(cli.System.Environment.get_OSVersion().ToString().indexOf("Unix") >= 0)
        {
            libraryPath = SafeGetEnvironmentVariable("LD_LIBRARY_PATH");
        }
        else
d115 7
d124 1
a124 6
                cli.System.Reflection.Assembly entryAsm = GetEntryAssembly();
                // If the CLR was started by a native app (e.g. via COM interop) there is no entry assembly
                if (entryAsm != null)
                {
                    libraryPath = new cli.System.IO.FileInfo(GetAssemblyLocation(entryAsm)).get_DirectoryName();
                }
d129 1
a129 1
            catch(Throwable t)
a130 1
                // ignore
d132 1
a132 1
            if(libraryPath == null)
d134 1
a134 1
                libraryPath = ".";
d136 2
a137 1
            else
d139 1
a139 1
                libraryPath += cli.System.IO.Path.PathSeparator + ".";
d141 13
a153 1
            try
d155 1
a155 1
                libraryPath += cli.System.IO.Path.PathSeparator + GetSystemDirectory();
d157 10
a166 12
            catch(cli.System.MissingMethodException _1)
            {
                // ignore
            }
            catch(cli.System.Security.SecurityException _)
            {
                // ignore
            }
            String path = SafeGetEnvironmentVariable("PATH");
            if(path != null)
            {
                libraryPath += cli.System.IO.Path.PathSeparator + path;
d169 4
a172 1
        if(libraryPath != null)
d174 1
a174 1
            p.setProperty("java.library.path", libraryPath);
d176 23
d274 12
d300 9
a308 2
            // TODO get this info from somewhere else
            arch = "x86";
@


1.21
log
@Fixed system property initialization to handle case where IKVM.GNU.Classpath doesn't have a Location
@
text
@d28 1
d31 4
d110 1
a110 1
    static void preInit(Properties p)
d112 1
a112 5
        String[] culture = ((cli.System.String)(Object)cli.System.Globalization.CultureInfo.get_CurrentCulture().get_Name()).Split(new char[] { '-' });        
        p.setProperty("user.language", culture[0]);
        p.setProperty("user.region", culture.length > 1 ? culture[1] : "");
        p.setProperty("user.variant", culture.length > 2 ? culture[2] : "");
        p.setProperty("java.version", "1.5.0");
a115 30
        try
        {
            if(false) throw new cli.System.Security.SecurityException();
            // HACK using the Assembly.Location property isn't correct
            cli.System.Reflection.Assembly asm = cli.System.Reflection.Assembly.GetExecutingAssembly();
            String loc = GetAssemblyLocation(asm);
            if(loc.length() == 0)
            {
                // The assembly was most likely loaded with Assembly.Load(byte[]) and so it doesn't
                // have a location.
                // TODO we may need to set some other value here
                p.setProperty("java.home", ".");
            }
            else
            {
                p.setProperty("java.home", new cli.System.IO.FileInfo(loc).get_DirectoryName());
            }
        }
        catch(cli.System.MissingMethodException _1)
        {
            // We're running on the Compact Framework
            // TODO we may need to set some other value here
            p.setProperty("java.home", ".");
        }
        catch(cli.System.Security.SecurityException _)
        {
            // when we're running in partial trust, we may not be allowed file access
            // TODO we may need to set some other value here
            p.setProperty("java.home", ".");
        }
d124 4
a127 4
        p.setProperty("java.specification.version", "1.5");
        p.setProperty("java.specification.vendor", "Sun Microsystems Inc.");
        p.setProperty("java.specification.name", "Java Platform API Specification");
        p.setProperty("java.class.version", "49.0");
a191 1
        p.setProperty("java.compiler", "");
d339 65
a406 2
        // we don't want Swing to use graphics 2D
        p.setProperty("gnu.javax.swing.noGraphics2D", "true");
@


1.20
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2004, 2005, 2006 Jeroen Frijters
d120 12
a131 1
            p.setProperty("java.home", new cli.System.IO.FileInfo(GetAssemblyLocation(asm)).get_DirectoryName());
@


1.19
log
@*** empty log message ***
@
text
@d300 1
a300 1
        p.setProperty("file.encoding", "8859_1");
@


1.18
log
@*** empty log message ***
@
text
@d114 1
d140 2
@


1.17
log
@*** empty log message ***
@
text
@d358 2
@


1.16
log
@*** empty log message ***
@
text
@d143 1
a143 14
        try
        {
            if(false) throw new cli.System.Security.SecurityException();
            String classpath = GetEnvironmentVariable("CLASSPATH");
            if(classpath == null)
            {
                classpath = ".";
            }
            p.setProperty("java.class.path", classpath);
        }
        catch(cli.System.Security.SecurityException _)
        {
            p.setProperty("java.class.path", "");
        }
@


1.15
log
@*** empty log message ***
@
text
@d375 1
a375 4
        // read properties from app.config
        cli.System.Collections.Specialized.NameValueCollection appSettings = cli.System.Configuration.ConfigurationSettings.get_AppSettings();
        cli.System.Collections.IEnumerator keys = appSettings.GetEnumerator();
        while(keys.MoveNext())
d377 5
a381 2
            String key = (String)keys.get_Current();
            if(key.startsWith("ikvm:"))
d383 5
a387 1
                p.setProperty(key.substring(5), appSettings.get_Item(key));
d390 4
@


1.14
log
@*** empty log message ***
@
text
@d111 1
a111 1
        p.setProperty("java.version", "1.4.2");
d139 1
a139 1
        p.setProperty("java.specification.version", "1.4");
d142 1
a142 1
        p.setProperty("java.class.version", "48.0");
@


1.13
log
@*** empty log message ***
@
text
@d166 6
a171 1
                libraryPath = new cli.System.IO.FileInfo(GetAssemblyLocation(GetEntryAssembly())).get_DirectoryName();
@


1.12
log
@*** empty log message ***
@
text
@d1 23
d250 9
@


1.11
log
@*** empty log message ***
@
text
@d330 1
a330 1
        p.setProperty("awt.toolkit", "ikvm.awt.NetToolkit, IKVM.AWT.WinForms");
@


1.10
log
@*** empty log message ***
@
text
@d330 1
a330 1
        p.setProperty("awt.toolkit", "ikvm.awt.NetToolkit, IKVM.AWT.WinForms, Version=0.22.0.0, Culture=neutral, PublicKeyToken=13235d27fcbfff58");
@


1.9
log
@*** empty log message ***
@
text
@d11 39
d54 12
d67 1
a67 1
            return cli.System.Environment.GetEnvironmentVariable(name);
d75 7
d96 7
a102 1
            p.setProperty("java.home", new cli.System.IO.FileInfo(asm.get_Location()).get_DirectoryName());
d123 1
a123 1
            String classpath = cli.System.Environment.GetEnvironmentVariable("CLASSPATH");
d137 1
a137 1
            libraryPath = GetEnvironmentVariable("LD_LIBRARY_PATH");
d143 4
a146 1
                libraryPath = new cli.System.IO.FileInfo(cli.System.Reflection.Assembly.GetEntryAssembly().get_Location()).get_DirectoryName();
d162 1
a162 2
                if(false) throw new cli.System.Security.SecurityException();
                libraryPath += cli.System.IO.Path.PathSeparator + cli.System.Environment.get_SystemDirectory();
d164 1
a164 1
            catch(cli.System.Security.SecurityException _)
d168 1
a168 1
            try
d170 1
a170 2
                if(false) throw new cli.System.Security.SecurityException();
                libraryPath += cli.System.IO.Path.PathSeparator + cli.System.Environment.GetEnvironmentVariable("PATH");
d172 2
a173 1
            catch(cli.System.Security.SecurityException _)
d175 1
a175 1
                // ignore
d260 1
a260 1
        String arch = GetEnvironmentVariable("PROCESSOR_ARCHITECTURE");
a274 1
        p.setProperty("line.separator", cli.System.Environment.get_NewLine());
d277 13
a289 2
            if(false) throw new cli.System.Security.SecurityException();
            p.setProperty("user.name", cli.System.Environment.get_UserName());
d295 1
a295 1
        String home = GetEnvironmentVariable("USERPROFILE");
d299 1
a299 1
            home = GetEnvironmentVariable("HOME");
d320 5
a324 2
            if(false) throw new cli.System.Security.SecurityException();
            p.setProperty("user.dir", cli.System.Environment.get_CurrentDirectory());
@


1.8
log
@*** empty log message ***
@
text
@d251 1
a251 1
        p.setProperty("awt.toolkit", "ikvm.awt.NetToolkit, IKVM.AWT.WinForms");
@


1.7
log
@*** empty log message ***
@
text
@d251 1
a251 1
        p.setProperty("awt.toolkit", "ikvm.awt.NetToolkit, IKVM.AWT.WinForms, Version=0.20.0.0, Culture=neutral, PublicKeyToken=13235d27fcbfff58");
@


1.6
log
@*** empty log message ***
@
text
@d251 1
a251 1
        p.setProperty("awt.toolkit", "ikvm.awt.NetToolkit, IKVM.AWT.WinForms");
@


1.5
log
@*** empty log message ***
@
text
@d30 1
a30 1
        p.setProperty("java.version", "1.4.1");
@


1.4
log
@*** empty log message ***
@
text
@d30 1
a30 1
        p.setProperty("java.version", "1.4");
@


1.3
log
@*** empty log message ***
@
text
@d11 13
d33 13
a45 3
        // HACK using the Assembly.Location property isn't correct
        cli.System.Reflection.Assembly asm = cli.System.Reflection.Assembly.GetExecutingAssembly();
        p.setProperty("java.home", new cli.System.IO.FileInfo(asm.get_Location()).get_DirectoryName());
d56 1
a56 2
        String classpath = cli.System.Environment.GetEnvironmentVariable("CLASSPATH");
        if(classpath == null)
d58 11
a68 1
            classpath = ".";
a69 1
        p.setProperty("java.class.path", classpath);
d73 1
a73 1
            libraryPath = cli.System.Environment.GetEnvironmentVariable("LD_LIBRARY_PATH");
d93 18
a110 2
            libraryPath += cli.System.IO.Path.PathSeparator + cli.System.Environment.get_SystemDirectory() +
                cli.System.IO.Path.PathSeparator + cli.System.Environment.GetEnvironmentVariable("PATH");
d116 10
a125 1
        p.setProperty("java.io.tmpdir", cli.System.IO.Path.GetTempPath());
d194 1
a194 1
        String arch = cli.System.Environment.GetEnvironmentVariable("PROCESSOR_ARCHITECTURE");
d210 10
a219 2
        p.setProperty("user.name", cli.System.Environment.get_UserName());
        String home = cli.System.Environment.GetEnvironmentVariable("USERPROFILE");
d223 1
a223 1
            home = cli.System.Environment.GetEnvironmentVariable("HOME");
d230 9
a238 1
                home = cli.System.Environment.GetFolderPath(cli.System.Environment.SpecialFolder.wrap(cli.System.Environment.SpecialFolder.Personal));
d242 9
a250 1
        p.setProperty("user.dir", cli.System.Environment.get_CurrentDirectory());
@


1.2
log
@*** empty log message ***
@
text
@d144 4
d149 1
@


1.1
log
@*** empty log message ***
@
text
@d13 4
@

