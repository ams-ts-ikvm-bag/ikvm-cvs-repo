head	1.7;
access;
symbols
	v0_36_0_14:1.6
	v0_36_0_13:1.6
	v0_36_0_9:1.6
	v0_36_0_7:1.6
	v0_36_0_5:1.6
	v0_36_0_4:1.6
	v0_36_0_3:1.6
	v0_36_0_2:1.6
	v0_36_0_1:1.6
	v0_36_0_0:1.6
	v0_36:1.6.0.4
	v0_34_0_3:1.6
	v0_34_0_2:1.6
	v0_34_0_1:1.6
	v0_34_0_0:1.6
	v0_34:1.6.0.2
	v0_32:1.5.0.2
	v0_32_0_0:1.5
	v0_30:1.4.0.2
	v0_28_0_0:1.3
	v0_26_0_1:1.2
	v0_26_0_0:1.2
	v0_24_0_1:1.2
	v0_24_0_0:1.2
	v0_22_0_0:1.2
	v0_20_0_0:1.2
	v0_18_0_0:1.1
	v0_16_0_0:1.1
	v0_14_0_1:1.1
	v0_14_0_0:1.1
	v0_12_0_0:1.1;
locks; strict;
comment	@# @;


1.7
date	2008.08.06.12.51.14;	author jfrijters;	state dead;
branches;
next	1.6;

1.6
date	2007.02.07.07.28.01;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2006.08.14.07.57.03;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2006.07.11.15.15.43;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2006.05.03.14.16.29;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2005.08.14.15.49.50;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2005.02.02.15.12.00;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.7
log
@Removed files that are no longer needed no that GNU Classpath support has been dropped.
@
text
@/*
  Copyright (C) 2005, 2006, 2007 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
package gnu.classpath;

import cli.System.Diagnostics.StackFrame;
import cli.System.Diagnostics.StackTrace;
import cli.System.Reflection.MethodBase;

public final class VMStackWalker
{
    private static final int SKIP_FRAMES = 2;
    private static final cli.System.Reflection.Assembly mscorlib = cli.System.Type.GetType("System.Object").get_Assembly();
    private static final cli.System.Type methodType = cli.System.Type.GetType("java.lang.reflect.Method");
    private static final cli.System.Type constructorType = cli.System.Type.GetType("java.lang.reflect.Constructor");
    private static final cli.System.Type jniEnvType = getJNIEnvType();

    public static ClassLoader firstNonNullClassLoader()
    {
        StackTrace stack = new StackTrace(1);
        for(int i = 0; i < stack.get_FrameCount(); i++)
        {
            StackFrame frame = stack.GetFrame(i);
            MethodBase method = frame.GetMethod();
            if(!isHideFromJava(method))
            {
                cli.System.Type type = method.get_DeclaringType();
                // We skip mscorlib types, because they account for reflection and there
                // are no other scenarios in which it is meaningful for mscorlib to be returned.
                if(type != null && type.get_Assembly() != mscorlib)
                {
                    ClassLoader loader = (ClassLoader)getClassLoaderFromType(type);
                    if(loader != null)
                    {
                        return loader;
                    }
                }
            }
        }
        return null;
    }

    public static Class[] getClassContext()
    {
        StackTrace stack = new StackTrace(1);
        java.util.ArrayList list = new java.util.ArrayList();
        for(int i = 0; i < stack.get_FrameCount(); i++)
        {
            StackFrame frame = stack.GetFrame(i);
            // TODO handle reflection scenarios
            MethodBase method = frame.GetMethod();
            if(!isHideFromJava(method))
            {
                cli.System.Type type = method.get_DeclaringType();
                if(type != null)
                {
                    list.add(getClassFromType(type));
                }
            }
        }
        Class[] classes = new Class[list.size()];
        list.toArray(classes);
        return classes;
    }

    public static Class getCallingClass()
    {
        int skip = SKIP_FRAMES;
        StackFrame frame = new StackFrame(skip++);
        MethodBase method = frame.GetMethod();
        cli.System.Type type = method.get_DeclaringType();
        if(isReflectionCaller(type))
        {
            type = getRealCaller(new StackTrace(skip));
        }
        if(type != null)
        {
            return (Class)getClassFromType(type);
        }
        return null;
    }

    public static ClassLoader getCallingClassLoader()
    {
        int skip = SKIP_FRAMES;
        StackFrame frame = new StackFrame(skip++);
        MethodBase method = frame.GetMethod();
        cli.System.Type type = method.get_DeclaringType();
        if(isReflectionCaller(type))
        {
            type = getRealCaller(new StackTrace(skip));
        }
        if(type != null)
        {
            return (ClassLoader)getClassLoaderFromType(type);
        }
        return null;
    }

    private static boolean isReflectionCaller(cli.System.Type type)
    {
        if(type != null)
        {
            cli.System.Reflection.Assembly asm = type.get_Assembly();
            // if we're being called by mscorlib, that means that reflection was used
            return asm == mscorlib;
        }
        return false;
    }

    private static cli.System.Type getRealCaller(StackTrace stack)
    {
        for(int i = 0; i < stack.get_FrameCount(); i++)
        {
            cli.System.Type type = stack.GetFrame(i).GetMethod().get_DeclaringType();
            if(type == methodType || type == constructorType || type == jniEnvType)
            {
                while(++i < stack.get_FrameCount() && (type == methodType || type == constructorType || type == jniEnvType))
                {
                   type = stack.GetFrame(i).GetMethod().get_DeclaringType();
                }
                if(type == null || i >= stack.get_FrameCount())
                {
                    return null;
                }
                while(isHideFromJava(stack.GetFrame(i).GetMethod()))
                {
                    type = stack.GetFrame(++i).GetMethod().get_DeclaringType();
                }
                // If the reflection method was invoked by reflection, continue going up the stack.
                if(isReflectionCaller(type))
                {
                    continue;
                }
                return type;
            }
        }
        return null;
    }

    private static native Object getClassFromType(cli.System.Type type);
    private static native Object getClassLoaderFromType(cli.System.Type type);
    private static native cli.System.Type getJNIEnvType();
    private static native boolean isHideFromJava(MethodBase mb);
}
@


1.6
log
@Fixed firstNonNullClassLoader to handle reflection scenarios.
@
text
@@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2005, 2006 Jeroen Frijters
a43 1
            // TODO handle reflection scenarios
d48 3
a50 1
                if(type != null)
@


1.4
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2005 Jeroen Frijters
d38 24
@


1.3
log
@*** empty log message ***
@
text
@d40 1
a40 1
        StackTrace stack = new StackTrace(SKIP_FRAMES);
@


1.2
log
@Fixed bug 1257044.
@
text
@a65 5
        while(isHideFromJava(method))
        {
            frame = new StackFrame(skip++);
            method = frame.GetMethod();
        }
a82 5
        while(isHideFromJava(method))
        {
            frame = new StackFrame(skip++);
            method = frame.GetMethod();
        }
@


1.1
log
@*** empty log message ***
@
text
@d28 1
d46 2
a47 2
            cli.System.Type type = frame.GetMethod().get_DeclaringType();
            if(type != null)
d49 5
a53 1
                list.add(getClassFromType(type));
d63 9
a71 2
        StackFrame frame = new StackFrame(SKIP_FRAMES);
        cli.System.Type type = frame.GetMethod().get_DeclaringType();
d74 1
a74 1
            type = getRealCaller(new StackTrace(SKIP_FRAMES + 1));
d85 9
a93 2
        StackFrame frame = new StackFrame(SKIP_FRAMES);
        cli.System.Type type = frame.GetMethod().get_DeclaringType();
d96 1
a96 1
            type = getRealCaller(new StackTrace(SKIP_FRAMES + 1));
d111 1
a111 1
            return asm == mscorlib || asm == getNonVirtualInvokeAssembly();
d131 4
a147 1
    private static native cli.System.Reflection.Assembly getNonVirtualInvokeAssembly();
d149 1
@

