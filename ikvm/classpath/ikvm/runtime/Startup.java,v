head	1.12;
access;
symbols
	v8_1_5717_0:1.12
	v8_1:1.12.0.8
	v8_0_5449_1:1.12
	v8_0_5449_0:1.12
	v8_0:1.12.0.6
	v7_4_5196_0:1.12
	v7_4:1.12.0.4
	v7_3:1.12.0.2
	v7_2_4630_6:1.11
	v7_2_4630_5:1.11
	v7_2_4630_4:1.11
	v7_2_4630_3:1.11
	v7_2_4630_2:1.11
	v0_46_0_4:1.10
	v7_2_4630_1:1.11
	v7_2:1.11.0.6
	v7_1_4532_2:1.11
	v7_1_4532_1:1.11
	v7_1_4532_0:1.11
	v7_1:1.11.0.4
	v7_0_4335_3:1.11
	v7_0_4335_2:1.11
	v7_0_4335_1:1.11
	v0_46_0_2:1.10
	v7_0_4335_0:1.11
	v7_0:1.11.0.2
	v0_40_0_6:1.2
	v0_40_0_5:1.2
	v0_46_0_1:1.10
	v0_46_0_0:1.10
	v0_46:1.10.0.2
	v0_36_0_14:1.2
	v0_44_0_6:1.7
	v0_44_0_5:1.7
	v0_44_0_4:1.7
	v0_44_0_3:1.7
	v0_44_0_2:1.7
	v0_42_0_7:1.5
	v0_44_0_1:1.7
	v0_44_0_0:1.7
	v0_44:1.7.0.2
	v0_42_0_6:1.5
	v0_42_0_5:1.5
	v0_42_0_4:1.5
	v0_42_0_3:1.5
	v0_42_0_2:1.5
	v0_42_0_1:1.5
	v0_42_0_0:1.5
	v0_42:1.5.0.2
	v0_40_0_3:1.2
	v0_40_0_2:1.2
	v0_40_0_1:1.2
	v0_40_0_0:1.2
	v0_40:1.2.0.6
	v0_36_0_13:1.2
	v0_38_0_1:1.2
	v0_38_0_0:1.2
	v0_38:1.2.0.4
	v0_36_0_9:1.2
	v0_36_0_7:1.2
	v0_36_0_5:1.2
	v0_36_0_4:1.2
	v0_36_0_3:1.2
	v0_36_0_2:1.2
	v0_36_0_1:1.2
	v0_36_0_0:1.2
	v0_36:1.2.0.2
	v0_34_0_3:1.1
	v0_34_0_2:1.1
	v0_34_0_1:1.1
	v0_34_0_0:1.1
	v0_34:1.1.0.4
	v0_32:1.1.0.2
	v0_32_0_0:1.1;
locks; strict;
comment	@# @;


1.12
date	2013.02.26.12.02.05;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2011.07.12.07.41.24;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2010.12.28.09.03.38;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2010.12.28.08.42.10;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2010.12.28.08.22.39;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2010.04.21.06.51.18;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2010.01.31.14.08.26;	author smallsql;	state Exp;
branches;
next	1.5;

1.5
date	2009.07.03.06.40.51;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2009.07.03.06.22.10;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2009.07.03.05.55.58;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2007.06.18.09.14.59;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2006.08.17.07.33.40;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Fixed a typo in ikvm.runtime.Startup.addBootClassPathAssembly().
@
text
@/*
  Copyright (C) 2006-2013 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/

package ikvm.runtime;

import cli.System.Collections.ArrayList;
import cli.System.Collections.ICollection;
import cli.System.ComponentModel.EditorBrowsableAttribute;
import cli.System.ComponentModel.EditorBrowsableState;
import cli.System.Environment;
import cli.System.InvalidOperationException;
import cli.System.IO.DirectoryInfo;
import cli.System.IO.FileSystemInfo;
import cli.System.IO.Path;
import cli.System.ObsoleteAttribute;
import cli.System.Reflection.Assembly;
import cli.System.Reflection.AssemblyTitleAttribute;
import cli.System.Reflection.AssemblyCopyrightAttribute;
import cli.System.Text.StringBuilder;
import cli.System.Threading.Thread;
import cli.System.Type;
import sun.misc.SignalHandler;

public final class Startup
{
    @@ikvm.lang.Internal
    public static cli.System.Collections.IDictionary props;

    private Startup()
    {
    }

    private static String[] glob(String arg)
    {
        try
        {
            String dir = Path.GetDirectoryName(arg);
            if(dir == "")
            {
                dir = null;
            }
            ArrayList list = new ArrayList();
            for(FileSystemInfo fsi : new DirectoryInfo(dir == null ? Environment.get_CurrentDirectory() : dir).GetFileSystemInfos(Path.GetFileName(arg)))
            {
                list.Add(dir != null ? Path.Combine(dir, fsi.get_Name()) : fsi.get_Name());
            }
            if(list.get_Count() == 0)
            {
                return new String[] { arg };
            }
            return (String[])(Object)list.ToArray(Type.GetType("System.String"));
        }
        catch(Throwable _)
        {
            return new String[] { arg };
        }
    }

    @@Deprecated
    public static String[] glob()
    {
        return glob(1);
    }

    @@Deprecated
    public static String[] glob(int skip)
    {
        return glob(Environment.GetCommandLineArgs(), skip);
    }

    public static String[] glob(String[] args, int skip)
    {
        if (!ikvm.internal.Util.WINDOWS)
        {
            String[] vmargs = new String[args.length - skip];
            System.arraycopy(args, skip, vmargs, 0, args.length - skip);
            return vmargs;
        }
        else
        {
            ArrayList list = new ArrayList();
            for (int i = skip; i < args.length; i++)
            {
                String arg = args[i];
                if (arg.indexOf('*') != -1 || arg.indexOf('?') != -1)
                {
                    list.AddRange((ICollection)(Object)glob(arg));
                }
                else
                {
                    list.Add(arg);
                }
            }
            return (String[])(Object)list.ToArray(Type.GetType("System.String"));
        }
    }

    public static void setProperties(cli.System.Collections.IDictionary props)
    {
        Startup.props = props;
    }
    
    public static void enterMainThread()
    {
        if(Thread.get_CurrentThread().get_Name() == null)
        {
            try
            {
                if(false) throw new InvalidOperationException();
                Thread.get_CurrentThread().set_Name("main");
            }
            catch(InvalidOperationException _)
            {
            }
        }
        java.lang.Thread.currentThread();
        
        try{
            sun.misc.Signal.handle(new sun.misc.Signal("BREAK"), SignalHandler.SIG_DFL);
        }catch(IllegalArgumentException ex){
            // ignore it;
        }
    }

    public static void exitMainThread()
    {
        // FXBUG when the main thread ends, it doesn't actually die, it stays around to manage the lifetime
        // of the CLR, but in doing so it also keeps alive the thread local storage for this thread and we
        // use the TLS as a hack to track when the thread dies (if the object stored in the TLS is finalized,
        // we know the thread is dead). So to make that work for the main thread, we use jniDetach which
        // explicitly cleans up our thread.
        jniDetach();
    }
    
    private static native void jniDetach();

    public static String getVersionAndCopyrightInfo()
    {
        Assembly asm = Assembly.GetEntryAssembly();
        Object[] desc = asm.GetCustomAttributes(Util.getInstanceTypeFromClass(AssemblyTitleAttribute.class), false);
        if(desc.length == 1)
        {
            Object[] copyright = asm.GetCustomAttributes(Util.getInstanceTypeFromClass(AssemblyCopyrightAttribute.class), false);
            if(copyright.length == 1)
            {
                return cli.System.String.Format("{0} version {1}{2}{3}{2}http://www.ikvm.net/",
                    ((AssemblyTitleAttribute)desc[0]).get_Title(),
                    asm.GetName().get_Version(),
                    Environment.get_NewLine(),
                    ((AssemblyCopyrightAttribute)copyright[0]).get_Copyright());
            }
        }
        return "";
    }

    // note the stupid typo, this exists for compatibility
    @@EditorBrowsableAttribute.Annotation(EditorBrowsableState.__Enum.Never)
    @@ObsoleteAttribute.Annotation("Please use the version without the typo.")
    @@Deprecated
    public static void addBootClassPathAssemby(Assembly assembly)
    {
        addBootClassPathAssembly(assembly);
    }

    public static native void addBootClassPathAssembly(Assembly assembly);
}
@


1.11
log
@Updated Windows globbing to be compatible with Java 7.
@
text
@d2 1
a2 1
  Copyright (C) 2006-2011 Jeroen Frijters
d29 2
d36 1
d177 10
a186 1
    public static native void addBootClassPathAssemby(Assembly assembly);
@


1.10
log
@Added ikvm.runtime.Startup.addBootClassPathAssemby() API.
@
text
@d2 1
a2 1
  Copyright (C) 2006 Jeroen Frijters
d77 1
d83 1
d86 6
a91 1
        if(Environment.get_OSVersion().ToString().indexOf("Unix") >= 0)
a92 1
            String[] args = Environment.GetCommandLineArgs();
d100 1
a100 3
            String cmdline = Environment.get_CommandLine();
            StringBuilder sb = new StringBuilder();
            for(int i = 0; i < cmdline.length(); )
d102 2
a103 34
                boolean quoted = cmdline.charAt(i) == '"';
                for(;;)
                {
                    while(i < cmdline.length() && cmdline.charAt(i) != ' ' && cmdline.charAt(i) != '"')
                    {
                        sb.Append(cmdline.charAt(i++));
                    }
                    if(i < cmdline.length() && cmdline.charAt(i) == '"')
                    {
                        if(quoted && i > 1 && cmdline.charAt(i - 1) == '"')
                        {
                            sb.Append('"');
                        }
                        i++;
                        while(i < cmdline.length() && cmdline.charAt(i) != '"')
                        {
                            sb.Append(cmdline.charAt(i++));
                        }
                        if(i < cmdline.length() && cmdline.charAt(i) == '"')
                        {
                            i++;
                        }
                        if(i < cmdline.length() && cmdline.charAt(i) != ' ')
                        {
                            continue;
                        }
                    }
                    break;
                }
                while(i < cmdline.length() && cmdline.charAt(i) == ' ')
                {
                    i++;
                }
                if(skip > 0)
d105 1
a105 1
                    skip--;
d109 1
a109 8
                    if(quoted)
                    {
                        list.Add(sb.ToString());
                    }
                    else
                    {
                        list.AddRange((ICollection)(Object)glob(sb.ToString()));
                    }
a110 1
                sb.set_Length(0);
@


1.9
log
@Removed VMThread class which only existed as a container for the jniDetach method.
@
text
@d209 2
@


1.8
log
@- Clean up imports.
- Use class literals instead of Type.GetType().
@
text
@d186 1
a186 1
        VMThread.jniDetach();
d188 2
@


1.7
log
@Changed ikvm.runtime.Startup.setProperties() to take an IDictionary instead of Hashtable. This allows a Dictionary<string, string> to be passed in now and avoids future problems if/when we want to target Silverlight (which doesn't have System.Collections.Hashtable).
@
text
@a26 2
import sun.misc.SignalHandler;
import ikvm.lang.CIL;
d40 1
d192 1
a192 1
        Object[] desc = asm.GetCustomAttributes(Type.GetType("System.Reflection.AssemblyTitleAttribute"), false);
d195 1
a195 1
            Object[] copyright = asm.GetCustomAttributes(Type.GetType("System.Reflection.AssemblyCopyrightAttribute"), false);
@


1.6
log
@Move init of CTRL-BREAK from System to Startup. It should be init if a Java application run and not if a library is linked.
@
text
@d46 1
a46 1
    public static cli.System.Collections.Hashtable props;
d153 1
a153 1
    public static void setProperties(cli.System.Collections.Hashtable props)
@


1.5
log
@- Consolidated system property initialization in VMSystemProperties.
- Fixed bug that caused startup properties set with ikvm.runtime.Startup.setProperties() to be forgotten when doing a System.setProperties(null).
@
text
@d27 1
d171 7
a177 1
	java.lang.Thread.currentThread();
@


1.4
log
@Moved startup system properties temporary cache from VMSystemProperties to Startup to allow VMSystemProperties to be private instead of internal.
@
text
@d44 2
a45 1
    private static cli.System.Collections.Hashtable props;
a156 8
    @@ikvm.lang.Internal
    public static cli.System.Collections.Hashtable getProperties()
    {
        cli.System.Collections.Hashtable h = props;
        props = null;
        return h;
    }

@


1.3
log
@Moved VMSystemProperties from gnu.classpath to java.lang.
@
text
@d44 2
d153 9
a161 1
        java.lang.VMSystemProperties.props = props;
@


1.2
log
@More bootstrap issues.
@
text
@d151 1
a151 1
        gnu.classpath.VMSystemProperties.props = props;
@


1.1
log
@*** empty log message ***
@
text
@d167 1
@

