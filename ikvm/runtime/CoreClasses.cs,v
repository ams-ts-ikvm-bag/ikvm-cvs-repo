head	1.9;
access;
symbols
	v8_1_5717_0:1.9
	v8_1:1.9.0.2
	v8_0_5449_1:1.8
	v8_0_5449_0:1.8
	v8_0:1.8.0.6
	v7_4_5196_0:1.8
	v7_4:1.8.0.4
	v7_3:1.8.0.2
	v7_2_4630_6:1.7
	v7_2_4630_5:1.7
	v7_2_4630_4:1.7
	v7_2_4630_3:1.7
	v7_2_4630_2:1.7
	v0_46_0_4:1.6
	v7_2_4630_1:1.7
	v7_2:1.7.0.6
	v7_1_4532_2:1.7
	v7_1_4532_1:1.7
	v7_1_4532_0:1.7
	v7_1:1.7.0.4
	v7_0_4335_3:1.7
	v7_0_4335_2:1.7
	v7_0_4335_1:1.7
	v0_46_0_2:1.6
	v7_0_4335_0:1.7
	v7_0:1.7.0.2
	v0_40_0_6:1.6
	v0_40_0_5:1.6
	v0_46_0_1:1.6
	v0_46_0_0:1.6
	v0_46:1.6.0.10
	v0_36_0_14:1.4
	v0_44_0_6:1.6
	v0_44_0_5:1.6
	v0_44_0_4:1.6
	v0_44_0_3:1.6
	v0_44_0_2:1.6
	v0_42_0_7:1.6
	v0_44_0_1:1.6
	v0_44_0_0:1.6
	v0_44:1.6.0.8
	v0_42_0_6:1.6
	v0_42_0_5:1.6
	v0_42_0_4:1.6
	v0_42_0_3:1.6
	v0_42_0_2:1.6
	v0_42_0_1:1.6
	v0_42_0_0:1.6
	v0_42:1.6.0.6
	v0_40_0_3:1.6
	v0_40_0_2:1.6
	v0_40_0_1:1.6
	v0_40_0_0:1.6
	v0_40:1.6.0.4
	v0_36_0_13:1.4
	v0_38_0_1:1.6
	v0_38_0_0:1.6
	v0_38:1.6.0.2
	v0_36_0_9:1.4
	v0_36_0_7:1.4
	v0_36_0_5:1.4
	v0_36_0_4:1.4
	v0_36_0_3:1.4
	v0_36_0_2:1.4
	v0_36_0_1:1.4
	v0_36_0_0:1.4
	v0_36:1.4.0.8
	v0_34_0_3:1.4
	v0_34_0_2:1.4
	v0_34_0_1:1.4
	v0_34_0_0:1.4
	v0_34:1.4.0.6
	v0_32:1.4.0.4
	v0_32_0_0:1.4
	v0_30:1.4.0.2
	v0_28_0_0:1.4
	v0_26_0_1:1.3
	v0_26_0_0:1.3
	v0_24_0_1:1.3
	v0_24_0_0:1.3
	v0_22_0_0:1.3
	v0_20_0_0:1.3
	v0_18_0_0:1.3
	v0_16_0_0:1.3
	v0_14_0_1:1.2
	v0_14_0_0:1.2
	v0_12_0_0:1.2
	v0_10_0_1:1.2
	v0_10_0_0:1.2
	v0_8_0_0:1.1;
locks; strict;
comment	@ * @;


1.9
date	2015.03.06.09.21.33;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2013.02.14.16.09.04;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2011.08.06.11.00.10;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2008.05.31.15.20.38;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2008.05.31.10.00.29;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2006.04.10.09.09.10;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2005.06.01.09.49.31;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2004.11.29.09.48.05;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.27.07.12.12;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Clean up. Moved special TypeWrapper caching to CoreClasses.
@
text
@/*
  Copyright (C) 2004-2015 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/

namespace IKVM.Internal
{
	internal static class CoreClasses
	{
		internal static class cli
		{
			internal static class System
			{
				internal static class Object
				{
					// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
					// (we don't want the classes to be loaded prematurely, because they might not be available then)
					static Object() { }
					internal static readonly TypeWrapper Wrapper = DotNetTypeWrapper.GetWrapperFromDotNetType(Types.Object);
				}

				internal static class Exception
				{
					// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
					// (we don't want the classes to be loaded prematurely, because they might not be available then)
					static Exception() { }
					internal static readonly TypeWrapper Wrapper = DotNetTypeWrapper.GetWrapperFromDotNetType(Types.Exception);
				}
			}
		}

		internal static class ikvm
		{
			internal static class @@internal
			{
				internal static class CallerID
				{
					// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
					// (we don't want the classes to be loaded prematurely, because they might not be available then)
					static CallerID() { }
					internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("ikvm.internal.CallerID");
				}
			}
		}

		internal static class java
		{
			internal static class io
			{
				internal static class Serializable
				{
					// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
					// (we don't want the classes to be loaded prematurely, because they might not be available then)
					static Serializable() { }
					internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.io.Serializable");
				}
			}

			internal static class lang
			{
				internal static class Object
				{
					// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
					// (we don't want the classes to be loaded prematurely, because they might not be available then)
					static Object() {}
					internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Object");
				}

				internal static class String
				{
					// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
					// (we don't want the classes to be loaded prematurely, because they might not be available then)
					static String() {}
					internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.String");
				}

				internal static class Class
				{
					// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
					// (we don't want the classes to be loaded prematurely, because they might not be available then)
					static Class() {}
					internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Class");
				}

				internal static class Cloneable
				{
					// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
					// (we don't want the classes to be loaded prematurely, because they might not be available then)
					static Cloneable() {}
					internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Cloneable");
				}

				internal static class Throwable
				{
					// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
					// (we don't want the classes to be loaded prematurely, because they might not be available then)
					static Throwable() {}
					internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Throwable");
				}

				internal static class invoke
				{
					internal static class MethodHandle
					{
						// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
						// (we don't want the classes to be loaded prematurely, because they might not be available then)
						static MethodHandle() { }
						internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.invoke.MethodHandle");
					}

					internal static class MethodType
					{
						// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
						// (we don't want the classes to be loaded prematurely, because they might not be available then)
						static MethodType() { }
						internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.invoke.MethodType");
					}
				}
			}
		}
	}
}
@


1.8
log
@- Added java.io.Serializable and java.lang.Cloneable to the core classes.
- Replaced LoadClassCritical("ikvm.internal.CallerID") with a core class reference.
@
text
@d2 1
a2 1
  Copyright (C) 2004, 2005, 2006, 2008 Jeroen Frijters
d29 22
@


1.7
log
@Implemented a large chunk of MethodHandle support.
@
text
@d45 11
d82 8
@


1.6
log
@- Implemented CallerID infrastructure.
- Marked various methods with HasCallerID annotation.
- Rewrote some methods to explicitly use CallerID.
@
text
@d78 19
@


1.5
log
@made classes static.
@
text
@d2 1
a2 1
  Copyright (C) 2004, 2005, 2006 Jeroen Frijters
d29 14
@


1.4
log
@*** empty log message ***
@
text
@d27 1
a27 1
	internal sealed class CoreClasses
d29 1
a29 1
		internal sealed class java
d31 1
a31 1
			internal sealed class lang
d33 1
a33 1
				internal sealed class Object
a34 1
					private Object() {}
d41 1
a41 1
				internal sealed class String
a42 1
					private String() {}
d49 1
a49 1
				internal sealed class Class
a50 1
					private Class() {}
d57 1
a57 1
				internal sealed class Throwable
a58 1
					private Throwable() {}
@


1.3
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2004, 2005 Jeroen Frijters
d27 1
a27 1
	public sealed class CoreClasses
d29 1
a29 1
		public sealed class java
d31 1
a31 1
			public sealed class lang
d33 1
a33 1
				public sealed class Object
d39 1
a39 1
					public static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Object");
d42 1
a42 1
				public sealed class String
d51 1
a51 1
				public sealed class Class
d57 1
a57 1
					public static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Class");
d60 1
a60 1
				public sealed class Throwable
d66 1
a66 1
					public static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Throwable");
@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2004 Jeroen Frijters
d25 1
a25 1
namespace CoreClasses.java.lang
d27 1
a27 1
	sealed class Object
d29 41
a69 32
		private Object() {}
		// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
		// (we don't want the classes to be loaded prematurely, because they might not be available then)
		static Object() {}
		internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Object");
	}

	sealed class String
	{
		private String() {}
		// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
		// (we don't want the classes to be loaded prematurely, because they might not be available then)
		static String() {}
		internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.String");
	}

	sealed class Class
	{
		private Class() {}
		// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
		// (we don't want the classes to be loaded prematurely, because they might not be available then)
		static Class() {}
		internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Class");
	}

	sealed class Throwable
	{
		private Throwable() {}
		// NOTE we have a dummy static initializer, to make sure we don't get the beforeFieldInit attribute
		// (we don't want the classes to be loaded prematurely, because they might not be available then)
		static Throwable() {}
		internal static readonly TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Throwable");
@


1.1
log
@*** empty log message ***
@
text
@d33 1
a33 1
		internal static TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Object");
d42 1
a42 1
		internal static TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.String");
d51 1
a51 1
		internal static TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Class");
d60 1
a60 1
		internal static TypeWrapper Wrapper = ClassLoaderWrapper.LoadClassCritical("java.lang.Throwable");
@

