head	1.12;
access;
symbols
	v8_1_5717_0:1.12
	v8_1:1.12.0.2
	v8_0_5449_1:1.11
	v8_0_5449_0:1.11
	v8_0:1.11.0.2
	v7_4_5196_0:1.8
	v7_4:1.8.0.8
	v7_3:1.8.0.6
	v7_2_4630_6:1.8
	v7_2_4630_5:1.8
	v7_2_4630_4:1.8
	v7_2_4630_3:1.8
	v7_2_4630_2:1.8
	v0_46_0_4:1.7
	v7_2_4630_1:1.8
	v7_2:1.8.0.4
	v7_1_4532_2:1.8
	v7_1_4532_1:1.8
	v7_1_4532_0:1.8
	v7_1:1.8.0.2
	v7_0_4335_3:1.7
	v7_0_4335_2:1.7
	v7_0_4335_1:1.7
	v0_46_0_2:1.7
	v7_0_4335_0:1.7
	v7_0:1.7.0.20
	v0_40_0_6:1.7
	v0_40_0_5:1.7
	v0_46_0_1:1.7
	v0_46_0_0:1.7
	v0_46:1.7.0.18
	v0_36_0_14:1.7
	v0_44_0_6:1.7
	v0_44_0_5:1.7
	v0_44_0_4:1.7
	v0_44_0_3:1.7
	v0_44_0_2:1.7
	v0_42_0_7:1.7
	v0_44_0_1:1.7
	v0_44_0_0:1.7
	v0_44:1.7.0.16
	v0_42_0_6:1.7
	v0_42_0_5:1.7
	v0_42_0_4:1.7
	v0_42_0_3:1.7
	v0_42_0_2:1.7
	v0_42_0_1:1.7
	v0_42_0_0:1.7
	v0_42:1.7.0.14
	v0_40_0_3:1.7
	v0_40_0_2:1.7
	v0_40_0_1:1.7
	v0_40_0_0:1.7
	v0_40:1.7.0.12
	v0_36_0_13:1.7
	v0_38_0_1:1.7
	v0_38_0_0:1.7
	v0_38:1.7.0.10
	v0_36_0_9:1.7
	v0_36_0_7:1.7
	v0_36_0_5:1.7
	v0_36_0_4:1.7
	v0_36_0_3:1.7
	v0_36_0_2:1.7
	v0_36_0_1:1.7
	v0_36_0_0:1.7
	v0_36:1.7.0.8
	v0_34_0_3:1.7
	v0_34_0_2:1.7
	v0_34_0_1:1.7
	v0_34_0_0:1.7
	v0_34:1.7.0.6
	v0_32:1.7.0.4
	v0_32_0_0:1.7
	v0_30:1.7.0.2
	v0_28_0_0:1.6
	v0_26_0_1:1.5
	v0_26_0_0:1.5
	v0_24_0_1:1.5
	v0_24_0_0:1.5
	v0_22_0_0:1.4
	v0_20_0_0:1.4
	v0_18_0_0:1.4
	v0_16_0_0:1.4
	v0_14_0_1:1.4
	v0_14_0_0:1.4
	v0_12_0_0:1.4
	v0_10_0_1:1.4
	v0_10_0_0:1.4
	v0_8_0_0:1.1;
locks; strict;
comment	@ * @;


1.12
date	2015.03.31.08.19.32;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2014.06.18.11.01.39;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2014.06.18.10.57.21;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2014.06.05.11.08.57;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2012.05.01.07.20.51;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2006.07.06.13.53.51;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2006.04.10.09.09.10;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2005.12.07.09.06.32;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2004.12.21.10.26.53;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2004.08.30.15.56.24;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2004.08.17.09.05.25;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2004.05.27.07.12.12;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.12
log
@Bug fix. Don't enforce canonical UTF8 encoding for class file versions <= 47.
@
text
@/*
  Copyright (C) 2002-2014 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;
using System.IO;

sealed class BigEndianBinaryReader
{
	private byte[] buf;
	private int pos;
	private int end;

	internal BigEndianBinaryReader(byte[] buf, int offset, int length)
	{
		this.buf = buf;
		this.pos = offset;
		this.end = checked(offset + length);
		if(offset < 0 || length < 0 || buf.Length - offset < length)
		{
			throw new ClassFormatError("Truncated class file");
		}
	}

	internal BigEndianBinaryReader Section(uint length)
	{
		BigEndianBinaryReader br = new BigEndianBinaryReader(buf, pos, checked((int)length));
		Skip(length);
		return br;
	}

	internal bool IsAtEnd
	{
		get
		{
			return pos == end;
		}
	}

	internal int Position
	{
		get
		{
			return pos;
		}
	}

	internal void Skip(uint count)
	{
		if(end - pos < count)
		{
			throw new ClassFormatError("Truncated class file");
		}
		checked
		{
			pos += (int)count;
		}
	}

	internal byte ReadByte()
	{
		if(pos == end)
		{
			throw new ClassFormatError("Truncated class file");
		}
		return buf[pos++];
	}

	internal sbyte ReadSByte()
	{
		if(pos == end)
		{
			throw new ClassFormatError("Truncated class file");
		}
		return (sbyte)buf[pos++];
	}

	internal double ReadDouble()
	{
		return BitConverter.Int64BitsToDouble(ReadInt64());
	}

	internal short ReadInt16()
	{
		if(end - pos < 2)
		{
			throw new ClassFormatError("Truncated class file");
		}
		short s = (short)((buf[pos] << 8) + buf[pos + 1]);
		pos += 2;
		return s;
	}

	internal int ReadInt32()
	{
		if(end - pos < 4)
		{
			throw new ClassFormatError("Truncated class file");
		}
		int i = (int)((buf[pos] << 24) + (buf[pos + 1] << 16) + (buf[pos + 2] << 8) + buf[pos + 3]);
		pos += 4;
		return i;
	}

	internal long ReadInt64()
	{
		if(end - pos < 8)
		{
			throw new ClassFormatError("Truncated class file");
		}
		uint i1 = (uint)((buf[pos] << 24) + (buf[pos + 1] << 16) + (buf[pos + 2] << 8) + buf[pos + 3]);
		uint i2 = (uint)((buf[pos + 4] << 24) + (buf[pos + 5] << 16) + (buf[pos + 6] << 8) + buf[pos + 7]);
		long l = (((long)i1) << 32) + i2;
		pos += 8;
		return l;
	}

	internal float ReadSingle()
	{
		return BitConverter.ToSingle(BitConverter.GetBytes(ReadInt32()), 0);
	}

	internal string ReadString(string classFile, int majorVersion)
	{
		int len = ReadUInt16();
		if(end - pos < len)
		{
			throw new ClassFormatError("{0} (Truncated class file)", classFile);
		}
		// special code path for ASCII strings (which occur *very* frequently)
		for(int j = 0; j < len; j++)
		{
			if(buf[pos + j] == 0 || buf[pos + j] >= 128)
			{
				// NOTE we *cannot* use System.Text.UTF8Encoding, because this is *not* compatible
				// (esp. for embedded nulls)
				char[] ch = new char[len];
				int l = 0;
				for(int i = 0; i < len; i++)
				{
					int c = buf[pos + i];
					int char2, char3;
					switch (c >> 4)
					{
						case 0:
							if(c == 0)
							{
								goto default;
							}
							break;
						case 1: case 2: case 3: case 4: case 5: case 6: case 7:
							// 0xxxxxxx
							break;
						case 12: case 13:
							// 110x xxxx   10xx xxxx
							char2 = buf[pos + ++i];
							if((char2 & 0xc0) != 0x80 || i >= len)
							{
								goto default;
							}
							c = (((c & 0x1F) << 6) | (char2 & 0x3F));
							if(c < 0x80 && c != 0 && majorVersion >= 48)
							{
								goto default;
							}
							break;
						case 14:
							// 1110 xxxx  10xx xxxx  10xx xxxx
							char2 = buf[pos + ++i];
							char3 = buf[pos + ++i];
							if((char2 & 0xc0) != 0x80 || (char3 & 0xc0) != 0x80 || i >= len)
							{
								goto default;
							}
							c = (((c & 0x0F) << 12) | ((char2 & 0x3F) << 6) | ((char3 & 0x3F) << 0));
							if(c < 0x800 && majorVersion >= 48)
							{
								goto default;
							}
							break;
						default:
							throw new ClassFormatError("Illegal UTF8 string in constant pool in class file {0}", classFile ?? "<Unknown>");
					}
					ch[l++] = (char)c;
				}
				pos += len;
				return new String(ch, 0, l);
			}
		}
		string s = System.Text.ASCIIEncoding.ASCII.GetString(buf, pos, len);
		pos += len;
		return s;
	}

	internal ushort ReadUInt16()
	{
		if(end - pos < 2)
		{
			throw new ClassFormatError("Truncated class file");
		}
		ushort s = (ushort)((buf[pos] << 8) + buf[pos + 1]);
		pos += 2;
		return s;
	}

	internal uint ReadUInt32()
	{
		if(end - pos < 4)
		{
			throw new ClassFormatError("Truncated class file");
		}
		uint i = (uint)((buf[pos] << 24) + (buf[pos + 1] << 16) + (buf[pos + 2] << 8) + buf[pos + 3]);
		pos += 4;
		return i;
	}

	internal byte[] ToArray()
	{
		byte[] res = new byte[end - pos];
		Buffer.BlockCopy(buf, pos, res, 0, res.Length);
		return res;
	}
}
@


1.11
log
@Fixed regression introduced in previous commit. \u0000 must use non-canonical form.
@
text
@d142 1
a142 1
	internal string ReadString(string classFile)
d181 1
a181 1
							if(c < 0x80 && c != 0)
d195 1
a195 1
							if(c < 0x800)
d201 1
a201 1
							throw new ClassFormatError("Illegal UTF8 string in constant pool in class file {0}", classFile);
@


1.10
log
@- Bug fix. Non-canonical UTF-8 encodings should throw ClassFormatError.
- Changed ClassFormatError message for invalid UTF-8 to match JDK.
@
text
@d181 1
a181 1
							if(c < 0x80)
@


1.9
log
@Implemented type annotation reflection for dynamically loaded classes.
@
text
@d167 1
a167 1
								throw new ClassFormatError("{0} (Illegal UTF8 string in constant pool)", classFile);
d178 1
a178 1
								throw new ClassFormatError("{0} (Illegal UTF8 string in constant pool)", classFile);
d181 4
d192 1
a192 1
								throw new ClassFormatError("{0} (Illegal UTF8 string in constant pool)", classFile);
d195 4
d201 1
a201 1
							throw new ClassFormatError("{0} (Illegal UTF8 string in constant pool)", classFile);
@


1.8
log
@Bug fix. If a class file UTF8 string ends with an incomplete multi byte char, we should throw the appropriate exception.
@
text
@d2 1
a2 1
  Copyright (C) 2002-2012 Jeroen Frijters
d227 7
@


1.7
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2002, 2004, 2005 Jeroen Frijters
d176 1
a176 1
							if((char2 & 0xc0) != 0x80)
d186 1
a186 1
							if((char2 & 0xc0) != 0x80 || (char3 & 0xc0) != 0x80)
@


1.6
log
@*** empty log message ***
@
text
@a23 1
#if !COMPACT_FRAMEWORK
a227 1
#endif
@


1.5
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2002, 2004 Jeroen Frijters
@


1.4
log
@*** empty log message ***
@
text
@d24 1
d229 1
@


1.3
log
@*** empty log message ***
@
text
@d51 8
d142 1
a142 1
	internal string ReadString()
d147 1
a147 1
			throw new ClassFormatError("Truncated class file");
d152 1
a152 1
			if(buf[pos + j] >= 128)
d167 1
a167 1
								throw new ClassFormatError("Illegal UTF8 string in constant pool");
d178 1
a178 1
								throw new ClassFormatError("Illegal UTF8 string in constant pool");
d188 1
a188 1
								throw new ClassFormatError("Illegal UTF8 string in constant pool");
d193 1
a193 1
							throw new ClassFormatError("Illegal UTF8 string in constant pool");
@


1.2
log
@*** empty log message ***
@
text
@d31 1
d33 1
a33 6
	internal BigEndianBinaryReader(byte[] buf)
		: this(buf, 0)
	{
	}

	internal BigEndianBinaryReader(byte[] buf, int offset)
d37 5
d44 1
a44 1
	internal BigEndianBinaryReader Section(int length)
d46 2
a47 2
		BigEndianBinaryReader br = new BigEndianBinaryReader(buf, pos);
		pos += length;
a50 5
	internal BigEndianBinaryReader Duplicate()
	{
		return new BigEndianBinaryReader(buf, pos);
	}

d59 1
a59 1
	internal void Skip(int count)
d61 8
a68 1
		pos += count;
d73 4
d82 4
d96 4
d107 4
d118 4
d137 4
d159 1
a159 1
								throw new FormatException();
d170 1
a170 1
								throw new FormatException();
d180 1
a180 1
								throw new FormatException();
d185 1
a185 1
							throw new FormatException();
d200 4
d211 4
@


1.1
log
@*** empty log message ***
@
text
@d2 1
a2 1
  Copyright (C) 2002 Jeroen Frijters
d43 7
@

