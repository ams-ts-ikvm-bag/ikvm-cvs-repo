head	1.3;
access;
symbols
	v8_1_5717_0:1.3
	v8_1:1.3.0.16
	v8_0_5449_1:1.3
	v8_0_5449_0:1.3
	v8_0:1.3.0.14
	v7_4_5196_0:1.3
	v7_4:1.3.0.12
	v7_3:1.3.0.10
	v7_2_4630_6:1.3
	v7_2_4630_5:1.3
	v7_2_4630_4:1.3
	v7_2_4630_3:1.3
	v7_2_4630_2:1.3
	v0_46_0_4:1.3
	v7_2_4630_1:1.3
	v7_2:1.3.0.8
	v7_1_4532_2:1.3
	v7_1_4532_1:1.3
	v7_1_4532_0:1.3
	v7_1:1.3.0.6
	v7_0_4335_3:1.3
	v7_0_4335_2:1.3
	v7_0_4335_1:1.3
	v0_46_0_2:1.3
	v7_0_4335_0:1.3
	v7_0:1.3.0.4
	v0_46_0_1:1.3
	v0_46_0_0:1.3
	v0_46:1.3.0.2;
locks; strict;
comment	@ * @;


1.3
date	2010.12.10.05.09.46;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.12.09.13.51.42;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2010.12.09.13.44.17;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.3
log
@- Ported fdlibm/s_exmp1.
- Fixed signed/unsigned issues in fdlibm/e_pow.
- Moved constants into method for fdlibm/e_pow and fdlibm/s_scalbn.
@
text
@

/*
 * Copyright (c) 1998, 2001, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

/*
 * scalbn (double x, int n)
 * scalbn(x,n) returns x* 2**n  computed by  exponent
 * manipulation rather than by actually performing an
 * exponentiation or a multiplication.
 */

static partial class fdlibm
{
	static double scalbn(double x, int n)
	{
		const double
two54   =  1.80143985094819840000e+16, /* 0x43500000, 0x00000000 */
twom54 = 5.55111512312578270212e-17, /* 0x3C900000, 0x00000000 */
huge = 1.0e+300,
tiny = 1.0e-300;

        int  k,hx,lx;
        hx = __HI(x);
        lx = __LO(x);
        k = (hx&0x7ff00000)>>20;                /* extract exponent */
        if (k==0) {                             /* 0 or subnormal x */
            if ((lx|(hx&0x7fffffff))==0) return x; /* +-0 */
            x *= two54;
            hx = __HI(x);
            k = ((hx&0x7ff00000)>>20) - 54;
            if (n< -50000) return tiny*x;       /*underflow*/
            }
        if (k==0x7ff) return x+x;               /* NaN or Inf */
        k = k+n;
        if (k >  0x7fe) return huge*copysign(huge,x); /* overflow  */
        if (k > 0)                              /* normal result */
            {x = __HI(x, (hx&unchecked((int)0x800fffff))|(k<<20)); return x;}
        if (k <= -54) {
            if (n > 50000)      /* in case integer overflow in n+k */
                return huge*copysign(huge,x);   /*overflow*/
            else return tiny*copysign(tiny,x);  /*underflow*/
        }
        k += 54;                                /* subnormal result */
        x = __HI(x, (hx&unchecked((int)0x800fffff))|(k<<20));
        return x*twom54;
}
}
@


1.2
log
@Ported e_pow and s_scalbn to C# and added some support methods.
@
text
@d37 3
a39 1
const double
d41 3
a43 1
twom54  =  5.55111512312578270212e-17; /* 0x3C900000, 0x00000000 */
a44 3
		static
        double scalbn (double x, int n)
{
@


1.1
log
@Prepare for fork/port to C#.
@
text
@d35 3
a37 7
#include "fdlibm.h"

#ifdef __STDC__
static const double
#else
static double
#endif
d39 1
a39 3
twom54  =  5.55111512312578270212e-17, /* 0x3C900000, 0x00000000 */
huge   = 1.0e+300,
tiny   = 1.0e-300;
d41 1
a41 1
#ifdef __STDC__
a42 4
#else
        double scalbn (x,n)
        double x; int n;
#endif
d59 1
a59 1
            {__HI(x) = (hx&0x800fffff)|(k<<20); return x;}
d66 1
a66 1
        __HI(x) = (hx&0x800fffff)|(k<<20);
d69 1
@

