head	1.11;
access;
symbols
	v8_1_5717_0:1.11
	v8_1:1.11.0.2
	v8_0_5449_1:1.10
	v8_0_5449_0:1.10
	v8_0:1.10.0.4
	v7_4_5196_0:1.10
	v7_4:1.10.0.2
	v7_3:1.9.0.2
	v7_2_4630_6:1.6.2.2
	v7_2_4630_5:1.6.2.1
	v7_2_4630_4:1.6.2.1
	v7_2_4630_3:1.6
	v7_2_4630_2:1.6
	v0_46_0_4:1.5.2.1
	v7_2_4630_1:1.6
	v7_2:1.6.0.2
	v7_1_4532_2:1.5.6.1
	v7_1_4532_1:1.5
	v7_1_4532_0:1.5
	v7_1:1.5.0.6
	v7_0_4335_3:1.5
	v7_0_4335_2:1.5
	v7_0_4335_1:1.5
	v0_46_0_2:1.5
	v7_0_4335_0:1.5
	v7_0:1.5.0.4
	v0_46_0_1:1.5
	v0_46_0_0:1.5
	v0_46:1.5.0.2;
locks; strict;
comment	@ * @;


1.11
date	2015.03.19.08.02.39;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2013.03.24.12.40.33;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2013.01.15.09.19.01;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2012.10.31.09.52.49;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2012.10.31.08.05.42;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2012.06.29.07.59.46;	author jfrijters;	state Exp;
branches
	1.6.2.1;
next	1.5;

1.5
date	2010.09.29.11.56.06;	author jfrijters;	state Exp;
branches
	1.5.2.1
	1.5.6.1;
next	1.4;

1.4
date	2010.09.29.07.21.51;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2010.09.27.04.42.56;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2010.09.22.04.01.36;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2010.09.14.07.38.42;	author jfrijters;	state Exp;
branches;
next	;

1.5.2.1
date	2012.10.03.06.18.57;	author jfrijters;	state Exp;
branches;
next	1.5.2.2;

1.5.2.2
date	2013.09.10.15.16.04;	author jfrijters;	state Exp;
branches;
next	;

1.5.6.1
date	2012.06.29.08.43.23;	author jfrijters;	state Exp;
branches;
next	;

1.6.2.1
date	2012.10.31.12.35.37;	author jfrijters;	state Exp;
branches;
next	1.6.2.2;

1.6.2.2
date	2013.01.15.10.28.01;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.11
log
@Bug fix. Late bound invokespecial should also be handled in local variable analysis.
@
text
@/*
  Copyright (C) 2002-2010 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;
using System.IO;
using System.Collections.Generic;
using System.Diagnostics;
#if STATIC_COMPILER
using IKVM.Reflection.Emit;
using Type = IKVM.Reflection.Type;
#else
using System.Reflection.Emit;
#endif
using IKVM.Internal;
using InstructionFlags = IKVM.Internal.ClassFile.Method.InstructionFlags;
using ExceptionTableEntry = IKVM.Internal.ClassFile.Method.ExceptionTableEntry;

sealed class LocalVar
{
	internal bool isArg;
	internal int local;
	internal TypeWrapper type;
	internal CodeEmitterLocal builder;
	// used to emit debugging info, only available if ClassLoaderWrapper.EmitDebugInfo is true
	internal string name;
	internal int start_pc;
	internal int end_pc;
}

struct LocalVarInfo
{
	private readonly LocalVar[/*instructionIndex*/] localVars;
	private readonly LocalVar[/*instructionIndex*/][/*localIndex*/] invokespecialLocalVars;
	private readonly LocalVar[/*index*/] allLocalVars;

	internal LocalVarInfo(CodeInfo ma, ClassFile classFile, ClassFile.Method method, UntangledExceptionTable exceptions, MethodWrapper mw, ClassLoaderWrapper classLoader)
	{
		Dictionary<int, string>[] localStoreReaders = FindLocalVariables(ma, mw, classFile, method);

		// now that we've done the code flow analysis, we can do a liveness analysis on the local variables
		ClassFile.Method.Instruction[] instructions = method.Instructions;
		Dictionary<long, LocalVar> localByStoreSite = new Dictionary<long, LocalVar>();
		List<LocalVar> locals = new List<LocalVar>();
		for (int i = 0; i < localStoreReaders.Length; i++)
		{
			if (localStoreReaders[i] != null)
			{
				VisitLocalLoads(ma, method, locals, localByStoreSite, localStoreReaders[i], i, classLoader.EmitDebugInfo);
			}
		}
		Dictionary<LocalVar, LocalVar> forwarders = new Dictionary<LocalVar, LocalVar>();
		if (classLoader.EmitDebugInfo)
		{
			InstructionFlags[] flags = MethodAnalyzer.ComputePartialReachability(ma, method.Instructions, exceptions, 0, false);
			// if we're emitting debug info, we need to keep dead stores as well...
			for (int i = 0; i < instructions.Length; i++)
			{
				if ((flags[i] & InstructionFlags.Reachable) != 0
					&& IsStoreLocal(instructions[i].NormalizedOpCode))
				{
					if (!localByStoreSite.ContainsKey(MakeKey(i, instructions[i].NormalizedArg1)))
					{
						LocalVar v = new LocalVar();
						v.local = instructions[i].NormalizedArg1;
						v.type = ma.GetStackTypeWrapper(i, 0);
						FindLvtEntry(v, method, i);
						locals.Add(v);
						localByStoreSite.Add(MakeKey(i, v.local), v);
					}
				}
			}
			// to make the debugging experience better, we have to trust the
			// LocalVariableTable (unless it's clearly bogus) and merge locals
			// together that are the same according to the LVT
			for (int i = 0; i < locals.Count - 1; i++)
			{
				for (int j = i + 1; j < locals.Count; j++)
				{
					LocalVar v1 = (LocalVar)locals[i];
					LocalVar v2 = (LocalVar)locals[j];
					if (v1.name != null && v1.name == v2.name && v1.start_pc == v2.start_pc && v1.end_pc == v2.end_pc)
					{
						// we can only merge if the resulting type is valid (this protects against incorrect
						// LVT data, but is also needed for constructors, where the uninitialized this is a different
						// type from the initialized this)
						TypeWrapper tw = InstructionState.FindCommonBaseType(v1.type, v2.type);
						if (tw != VerifierTypeWrapper.Invalid)
						{
							v1.isArg |= v2.isArg;
							v1.type = tw;
							forwarders.Add(v2, v1);
							locals.RemoveAt(j);
							j--;
						}
					}
				}
			}
		}
		else
		{
			for (int i = 0; i < locals.Count - 1; i++)
			{
				for (int j = i + 1; j < locals.Count; j++)
				{
					LocalVar v1 = (LocalVar)locals[i];
					LocalVar v2 = (LocalVar)locals[j];
					// if the two locals are the same, we merge them, this is a small
					// optimization, it should *not* be required for correctness.
					if (v1.local == v2.local && v1.type == v2.type)
					{
						v1.isArg |= v2.isArg;
						forwarders.Add(v2, v1);
						locals.RemoveAt(j);
						j--;
					}
				}
			}
		}
		invokespecialLocalVars = new LocalVar[instructions.Length][];
		localVars = new LocalVar[instructions.Length];
		for (int i = 0; i < localVars.Length; i++)
		{
			LocalVar v = null;
			if (localStoreReaders[i] != null)
			{
				Debug.Assert(IsLoadLocal(instructions[i].NormalizedOpCode));
				// lame way to look up the local variable for a load
				// (by indirecting through a corresponding store)
				foreach (int store in localStoreReaders[i].Keys)
				{
					v = localByStoreSite[MakeKey(store, instructions[i].NormalizedArg1)];
					break;
				}
			}
			else
			{
				if (instructions[i].NormalizedOpCode == NormalizedByteCode.__invokespecial || instructions[i].NormalizedOpCode == NormalizedByteCode.__dynamic_invokespecial)
				{
					invokespecialLocalVars[i] = new LocalVar[method.MaxLocals];
					for (int j = 0; j < invokespecialLocalVars[i].Length; j++)
					{
						localByStoreSite.TryGetValue(MakeKey(i, j), out invokespecialLocalVars[i][j]);
					}
				}
				else
				{
					localByStoreSite.TryGetValue(MakeKey(i, instructions[i].NormalizedArg1), out v);
				}
			}
			if (v != null)
			{
				LocalVar fwd;
				if (forwarders.TryGetValue(v, out fwd))
				{
					v = fwd;
				}
				localVars[i] = v;
			}
		}
		this.allLocalVars = locals.ToArray();
	}

	private static void FindLvtEntry(LocalVar lv, ClassFile.Method method, int instructionIndex)
	{
		ClassFile.Method.LocalVariableTableEntry[] lvt = method.LocalVariableTableAttribute;
		if (lvt != null)
		{
			int pc = method.Instructions[instructionIndex].PC;
			int nextPC = method.Instructions[instructionIndex + 1].PC;
			bool isStore = IsStoreLocal(method.Instructions[instructionIndex].NormalizedOpCode);
			foreach (ClassFile.Method.LocalVariableTableEntry e in lvt)
			{
				// TODO validate the contents of the LVT entry
				if (e.index == lv.local &&
					(e.start_pc <= pc || (e.start_pc == nextPC && isStore)) &&
					e.start_pc + e.length > pc)
				{
					lv.name = e.name;
					lv.start_pc = e.start_pc;
					lv.end_pc = e.start_pc + e.length;
					break;
				}
			}
		}
	}

	// NOTE for dead stores, this returns null
	internal LocalVar GetLocalVar(int instructionIndex)
	{
		return localVars[instructionIndex];
	}

	internal LocalVar[] GetLocalVarsForInvokeSpecial(int instructionIndex)
	{
		return invokespecialLocalVars[instructionIndex];
	}

	internal LocalVar[] GetAllLocalVars()
	{
		return allLocalVars;
	}

	private static bool IsLoadLocal(NormalizedByteCode bc)
	{
		return bc == NormalizedByteCode.__aload ||
			bc == NormalizedByteCode.__iload ||
			bc == NormalizedByteCode.__lload ||
			bc == NormalizedByteCode.__fload ||
			bc == NormalizedByteCode.__dload ||
			bc == NormalizedByteCode.__iinc ||
			bc == NormalizedByteCode.__ret;
	}

	private static bool IsStoreLocal(NormalizedByteCode bc)
	{
		return bc == NormalizedByteCode.__astore ||
			bc == NormalizedByteCode.__istore ||
			bc == NormalizedByteCode.__lstore ||
			bc == NormalizedByteCode.__fstore ||
			bc == NormalizedByteCode.__dstore;
	}

	struct FindLocalVarState
	{
		internal bool changed;
		internal FindLocalVarStoreSite[] sites;

		internal void Store(int instructionIndex, int localIndex)
		{
			if (sites[localIndex].Count == 1 && sites[localIndex][0] == instructionIndex)
			{
				return;
			}
			sites = (FindLocalVarStoreSite[])sites.Clone();
			sites[localIndex] = new FindLocalVarStoreSite();
			sites[localIndex].Add(instructionIndex);
		}

		internal void Merge(FindLocalVarState state)
		{
			if (sites == null)
			{
				sites = state.sites;
				changed = true;
			}
			else
			{
				bool dirty = true;
				for (int i = 0; i < sites.Length; i++)
				{
					for (int j = 0; j < state.sites[i].Count; j++)
					{
						if (!sites[i].Contains(state.sites[i][j]))
						{
							if (dirty)
							{
								dirty = false;
								sites = (FindLocalVarStoreSite[])sites.Clone();
							}
							sites[i].Add(state.sites[i][j]);
							changed = true;
						}
					}
				}
			}
		}

		internal FindLocalVarState Copy()
		{
			FindLocalVarState copy = new FindLocalVarState();
			copy.sites = sites;
			return copy;
		}

		public override string ToString()
		{
			System.Text.StringBuilder sb = new System.Text.StringBuilder();
			if (sites != null)
			{
				foreach (FindLocalVarStoreSite site in sites)
				{
					sb.Append('[');
					for (int i = 0; i < site.Count; i++)
					{
						sb.AppendFormat("{0}, ", site[i]);
					}
					sb.Append(']');
				}
			}
			return sb.ToString();
		}
	}

	struct FindLocalVarStoreSite
	{
		private int[] data;

		internal bool Contains(int instructionIndex)
		{
			if (data != null)
			{
				for (int i = 0; i < data.Length; i++)
				{
					if (data[i] == instructionIndex)
					{
						return true;
					}
				}
			}
			return false;
		}

		internal void Add(int instructionIndex)
		{
			if (data == null)
			{
				data = new int[] { instructionIndex };
			}
			else
			{
				data = ArrayUtil.Concat(data, instructionIndex);
			}
		}

		internal int this[int index]
		{
			get { return data[index]; }
		}

		internal int Count
		{
			get { return data == null ? 0 : data.Length; }
		}
	}

	private static Dictionary<int, string>[] FindLocalVariables(CodeInfo codeInfo, MethodWrapper mw, ClassFile classFile, ClassFile.Method method)
	{
		FindLocalVarState[] state = new FindLocalVarState[method.Instructions.Length];
		state[0].changed = true;
		state[0].sites = new FindLocalVarStoreSite[method.MaxLocals];
		TypeWrapper[] parameters = mw.GetParameters();
		int argpos = 0;
		if (!mw.IsStatic)
		{
			state[0].sites[argpos++].Add(-1);
		}
		for (int i = 0; i < parameters.Length; i++)
		{
			state[0].sites[argpos++].Add(-1);
			if (parameters[i].IsWidePrimitive)
			{
				argpos++;
			}
		}
		return FindLocalVariablesImpl(codeInfo, classFile, method, state);
	}

	private static Dictionary<int, string>[] FindLocalVariablesImpl(CodeInfo codeInfo, ClassFile classFile, ClassFile.Method method, FindLocalVarState[] state)
	{
		ClassFile.Method.Instruction[] instructions = method.Instructions;
		ExceptionTableEntry[] exceptions = method.ExceptionTable;
		int maxLocals = method.MaxLocals;
		Dictionary<int, string>[] localStoreReaders = new Dictionary<int, string>[instructions.Length];
		bool done = false;

		while (!done)
		{
			done = true;
			for (int i = 0; i < instructions.Length; i++)
			{
				if (state[i].changed)
				{
					done = false;
					state[i].changed = false;

					FindLocalVarState curr = state[i].Copy();

					for (int j = 0; j < exceptions.Length; j++)
					{
						if (exceptions[j].startIndex <= i && i < exceptions[j].endIndex)
						{
							state[exceptions[j].handlerIndex].Merge(curr);
						}
					}

					if (IsLoadLocal(instructions[i].NormalizedOpCode)
						&& (instructions[i].NormalizedOpCode != NormalizedByteCode.__aload || !VerifierTypeWrapper.IsFaultBlockException(codeInfo.GetRawStackTypeWrapper(i + 1, 0))))
					{
						if (localStoreReaders[i] == null)
						{
							localStoreReaders[i] = new Dictionary<int, string>();
						}
						for (int j = 0; j < curr.sites[instructions[i].NormalizedArg1].Count; j++)
						{
							localStoreReaders[i][curr.sites[instructions[i].NormalizedArg1][j]] = "";
						}
					}

					if (IsStoreLocal(instructions[i].NormalizedOpCode)
						&& (instructions[i].NormalizedOpCode != NormalizedByteCode.__astore || !VerifierTypeWrapper.IsFaultBlockException(codeInfo.GetRawStackTypeWrapper(i, 0))))
					{
						curr.Store(i, instructions[i].NormalizedArg1);
						// if this is a store at the end of an exception block,
						// we need to propagate the new state to the exception handler
						for (int j = 0; j < exceptions.Length; j++)
						{
							if (exceptions[j].endIndex == i + 1)
							{
								state[exceptions[j].handlerIndex].Merge(curr);
							}
						}
					}

					if (instructions[i].NormalizedOpCode == NormalizedByteCode.__invokespecial)
					{
						ClassFile.ConstantPoolItemMI cpi = classFile.GetMethodref(instructions[i].Arg1);
						if (ReferenceEquals(cpi.Name, StringConstants.INIT))
						{
							TypeWrapper type = codeInfo.GetRawStackTypeWrapper(i, cpi.GetArgTypes().Length);
							// after we've invoked the constructor, the uninitialized references
							// are now initialized
							if (type == VerifierTypeWrapper.UninitializedThis
								|| VerifierTypeWrapper.IsNew(type))
							{
								for (int j = 0; j < maxLocals; j++)
								{
									if (codeInfo.GetLocalTypeWrapper(i, j) == type)
									{
										curr.Store(i, j);
									}
								}
							}
						}
					}
					else if (instructions[i].NormalizedOpCode == NormalizedByteCode.__goto_finally)
					{
						int handler = instructions[i].HandlerIndex;

						// Normally a store at the end of a try block doesn't affect the handler block,
						// but in the case of a finally handler it does, so we need to make sure that
						// we merge here in case the try block ended with a store.
						state[handler].Merge(curr);

						// Now we recursively analyse the handler and afterwards merge the endfault locations back to us
						FindLocalVarState[] handlerState = new FindLocalVarState[instructions.Length];
						handlerState[handler].Merge(curr);
						curr = new FindLocalVarState();
						FindLocalVariablesImpl(codeInfo, classFile, method, handlerState);

						// Merge back to the target of our __goto_finally
						for (int j = 0; j < handlerState.Length; j++)
						{
							if (instructions[j].NormalizedOpCode == NormalizedByteCode.__athrow
								&& codeInfo.HasState(j)
								&& VerifierTypeWrapper.IsFaultBlockException(codeInfo.GetRawStackTypeWrapper(j, 0))
								&& ((VerifierTypeWrapper)codeInfo.GetRawStackTypeWrapper(j, 0)).Index == handler)
							{
								curr.Merge(handlerState[j]);
							}
						}
					}

					switch (ByteCodeMetaData.GetFlowControl(instructions[i].NormalizedOpCode))
					{
						case ByteCodeFlowControl.Switch:
							{
								for (int j = 0; j < instructions[i].SwitchEntryCount; j++)
								{
									state[instructions[i].GetSwitchTargetIndex(j)].Merge(curr);
								}
								state[instructions[i].DefaultTarget].Merge(curr);
								break;
							}
						case ByteCodeFlowControl.Branch:
							state[instructions[i].TargetIndex].Merge(curr);
							break;
						case ByteCodeFlowControl.CondBranch:
							state[instructions[i].TargetIndex].Merge(curr);
							state[i + 1].Merge(curr);
							break;
						case ByteCodeFlowControl.Return:
						case ByteCodeFlowControl.Throw:
							break;
						case ByteCodeFlowControl.Next:
							state[i + 1].Merge(curr);
							break;
						default:
							throw new InvalidOperationException();
					}
				}
			}
		}
		return localStoreReaders;
	}

	private static void VisitLocalLoads(CodeInfo codeInfo, ClassFile.Method method, List<LocalVar> locals, Dictionary<long, LocalVar> localByStoreSite, Dictionary<int, string> storeSites, int instructionIndex, bool debug)
	{
		Debug.Assert(IsLoadLocal(method.Instructions[instructionIndex].NormalizedOpCode));
		LocalVar local = null;
		TypeWrapper type = VerifierTypeWrapper.Null;
		int localIndex = method.Instructions[instructionIndex].NormalizedArg1;
		bool isArg = false;
		foreach (int store in storeSites.Keys)
		{
			if (store == -1)
			{
				// it's a method argument, it has no initial store, but the type is simply the parameter type
				type = InstructionState.FindCommonBaseType(type, codeInfo.GetLocalTypeWrapper(0, localIndex));
				isArg = true;
			}
			else
			{
				if (method.Instructions[store].NormalizedOpCode == NormalizedByteCode.__invokespecial)
				{
					type = InstructionState.FindCommonBaseType(type, codeInfo.GetLocalTypeWrapper(store + 1, localIndex));
				}
				else if (method.Instructions[store].NormalizedOpCode == NormalizedByteCode.__static_error)
				{
					// it's an __invokespecial that turned into a __static_error
					// (since a __static_error doesn't continue, we don't need to set type)
				}
				else
				{
					Debug.Assert(IsStoreLocal(method.Instructions[store].NormalizedOpCode));
					type = InstructionState.FindCommonBaseType(type, codeInfo.GetStackTypeWrapper(store, 0));
				}
			}
			// we can't have an invalid type, because that would have failed verification earlier
			Debug.Assert(type != VerifierTypeWrapper.Invalid);

			LocalVar l;
			if (localByStoreSite.TryGetValue(MakeKey(store, localIndex), out l))
			{
				if (local == null)
				{
					local = l;
				}
				else if (local != l)
				{
					// If we've already defined a LocalVar and we find another one, then we merge them
					// together.
					// This happens for the following code fragment:
					//
					// int i = -1;
					// try { i = 0; for(; ; ) System.out.println(i); } catch(Exception x) {}
					// try { i = 0; for(; ; ) System.out.println(i); } catch(Exception x) {}
					// System.out.println(i);
					//
					local = MergeLocals(locals, localByStoreSite, local, l);
				}
			}
		}
		if (local == null)
		{
			local = new LocalVar();
			local.local = localIndex;
			if (VerifierTypeWrapper.IsThis(type))
			{
				local.type = ((VerifierTypeWrapper)type).UnderlyingType;
			}
			else
			{
				local.type = type;
			}
			local.isArg = isArg;
			if (debug)
			{
				FindLvtEntry(local, method, instructionIndex);
			}
			locals.Add(local);
		}
		else
		{
			local.isArg |= isArg;
			local.type = InstructionState.FindCommonBaseType(local.type, type);
			Debug.Assert(local.type != VerifierTypeWrapper.Invalid);
		}
		foreach (int store in storeSites.Keys)
		{
			LocalVar v;
			if (!localByStoreSite.TryGetValue(MakeKey(store, localIndex), out v))
			{
				localByStoreSite[MakeKey(store, localIndex)] = local;
			}
			else if (v != local)
			{
				local = MergeLocals(locals, localByStoreSite, local, v);
			}
		}
	}

	private static long MakeKey(int i, int j)
	{
		return (((long)(uint)i) << 32) + (uint)j;
	}

	private static LocalVar MergeLocals(List<LocalVar> locals, Dictionary<long, LocalVar> localByStoreSite, LocalVar l1, LocalVar l2)
	{
		Debug.Assert(l1 != l2);
		Debug.Assert(l1.local == l2.local);
		for (int i = 0; i < locals.Count; i++)
		{
			if (locals[i] == l2)
			{
				locals.RemoveAt(i);
				i--;
			}
		}
		Dictionary<long, LocalVar> temp = new Dictionary<long, LocalVar>(localByStoreSite);
		localByStoreSite.Clear();
		foreach (KeyValuePair<long, LocalVar> kv in temp)
		{
			localByStoreSite[kv.Key] = kv.Value == l2 ? l1 : kv.Value;
		}
		l1.isArg |= l2.isArg;
		l1.type = InstructionState.FindCommonBaseType(l1.type, l2.type);
		Debug.Assert(l1.type != VerifierTypeWrapper.Invalid);
		return l1;
	}
}
@


1.10
log
@Introduced ArrayUtil.Concat() methods.
@
text
@d157 1
a157 1
				if (instructions[i].NormalizedOpCode == NormalizedByteCode.__invokespecial)
@


1.9
log
@Bug fix. Local variable analysis for finally blocks was incorrect. Fixes bug #3600788.
@
text
@d341 1
a341 2
				Array.Resize(ref data, data.Length + 1);
				data[data.Length - 1] = instructionIndex;
@


1.8
log
@Bug fix. The local variable state at the end of an exception block (if the last instruction is a local variable store) needs to be merged into the exception handler state.
@
text
@d467 2
a468 2
						handlerState[handler].changed = true;
						handlerState[handler].sites = new FindLocalVarStoreSite[maxLocals];
d479 1
a479 1
								state[instructions[i].Arg1].Merge(handlerState[j]);
@


1.7
log
@Rollback of incorrect fixes:
ikvm/runtime verifier.cs,1.93,1.94
ikvm/runtime JsrInliner.cs, 1.6,1.7
ikvm/runtime LocalVars.cs, 1.5,1.6
@
text
@d424 9
@


1.6
log
@Bug fix. Local variable analysis and jsr inlining also need to take the final instruction of an exception block into account.
@
text
@d401 1
a401 9
						// if we're currently inside an exception block, we need to merge our current state with the exception handler
						// and if we right after the exception block (i == method.ExceptionTable[j].endIndex) and the block ends in
						// an instruction that simply falls through, we need to merge our current state with the exception handler as
						// well (because the last instruction may be a store to a local variable that affects the type of the local variable)
						// (note that we can legally access instructions[i - 1] because an empty exception block is illegal)
						if (exceptions[j].startIndex <= i
							&& (i < exceptions[j].endIndex
								|| (i == exceptions[j].endIndex
									&& ByteCodeMetaData.GetFlowControl(instructions[i - 1].NormalizedOpCode) == ByteCodeFlowControl.Next)))
@


1.6.2.1
log
@- Changed version to 7.2.4630.4.
Backported fixes for new rc:
- Added (optional) support for building without System.Core.dll dependency.
- Bug fix. Abstract generic methods are not supported. Fix for #3579785.
- Bug fix. Interface mappings can be "incomplete". Fix for bug #3581564.
- Bug fix. Verifier should not merge state from instruction following exception block to handler. Fix for bug #3580611.
@
text
@d401 9
a409 1
						if (exceptions[j].startIndex <= i && i < exceptions[j].endIndex)
a431 9
						// if this is a store at the end of an exception block,
						// we need to propagate the new state to the exception handler
						for (int j = 0; j < exceptions.Length; j++)
						{
							if (exceptions[j].endIndex == i + 1)
							{
								state[exceptions[j].handlerIndex].Merge(curr);
							}
						}
@


1.6.2.2
log
@Updated version to 7.2.4630.6 and changed copyright year to 2013.
Backported bug fixes:
- Don't deadlock AppDomain.ProcessExit event handler when the event gets called from another thread than the one initiating exit.
- Static compiler should not use proxy stubs to implement non-public interfaces in another assembly (because this situation can only arise when compiling the assemblies together and the InternalsVisibileToAttribute will be used and proxy stubs are not understood by CompiledTypeWrapper, so they can only be used in dynamic mode).
- Don't add duplicate methods to attribute annotation interfaces. The primary cause of this was attributes with virtual properties where we would add the base class property as well as the derived class overridden property.
- Local variable analysis for finally blocks was incorrect. Fixes bug #3600788.
@
text
@d467 2
a468 2
						handlerState[handler].Merge(curr);
						curr = new FindLocalVarState();
d479 1
a479 1
								curr.Merge(handlerState[j]);
@


1.5
log
@Fixed regression caused by try { } finally {} optimization: astore/aload of exception in finally handler should be ignored in local variable analysis.
@
text
@d401 9
a409 1
						if (exceptions[j].startIndex <= i && i < exceptions[j].endIndex)
@


1.5.2.1
log
@Backported fixes for 0.46.0.3:
- Bug fix. java.lang.Package was not populated from manifest for ikvmc compiled assemblies.
- Bug fix. When writing a direct ByteBuffer to a non-blocking socket and the write fails because there is no kernel buffer available, we should not advance the ByteBuffer position.
- Bug fix. When adding certificates to virtual cacerts file make sure that the aliases are unique.
- Bug fix. If a finally/fault handler contains reachable code before the handler's start index, the handler should branch to the handler start index.
- Bug fix. After emitting a finally/fault handler block, we should emit the block leave stubs (even though you can't leave the block, they also emit the backward branch stubs).
- Bug fix. If a Java class extends a remapped .NET type (cli.System.Object or cli.System.Exception), we should correctly report the base class.
- Bug fix. If we encounter a jsr or ret instruction, we should throw a VerifyError (instead of NotImplementedException).
- Bug fix. If an exception block ends with an astore, we need to propagate the local variable type after the astore to the exception handler.
- Disable AppDomain.ProcessExit hook to run shutdown hooks when running on Mono to workaround https://bugzilla.xamarin.com/show_bug.cgi?id=5650
- Bug fix. Custom attribute properties that don't have a public getter and setter should not be exposed as annotation properties.
- Bug fix. Non-public property getter/setter methods should be ignored when we create properties to hide properties inherited from shadow types. This fixes a build break with .NET 4.5 beta which introduces a protected setter for Exception.HResult.
- Bug fix. The $Method inner class for delegates should also be loadable for generic delegates. Thanks to Michael Bayne for reporting this.
- Bug fix. When constructing a generic class loader we can't use GetWrapperFromType() on the type arguments, because they might refer to a subtype that is currently being loaded.
- Replaced non-ascii character (micro) with ascii 'u' in Win32PrintService.java.
- IKVM.Reflection: Bug fix. Resource Directory Entries must be sorted and names are case-insensitive

Backported for 0.46.0.4:
- Fixed ikvmc to retain transient modifier on constant static final fields.
- Fixed Field.getModifiers() to only return the relevant modifiers.
- Fixed IKVM.Reflection to set AddressOfRawData in IMAGE_DEBUG_DIRECTORY.
@
text
@d401 1
a401 9
						// if we're currently inside an exception block, we need to merge our current state with the exception handler
						// and if we right after the exception block (i == method.ExceptionTable[j].endIndex) and the block ends in
						// an instruction that simply falls through, we need to merge our current state with the exception handler as
						// well (because the last instruction may be a store to a local variable that affects the type of the local variable)
						// (note that we can legally access instructions[i - 1] because an empty exception block is illegal)
						if (exceptions[j].startIndex <= i
							&& (i < exceptions[j].endIndex
								|| (i == exceptions[j].endIndex
									&& ByteCodeMetaData.GetFlowControl(instructions[i - 1].NormalizedOpCode) == ByteCodeFlowControl.Next)))
@


1.5.2.2
log
@Updated version to 0.46.0.5 and backported bug fixes:
- IKVM.Reflection should ignore unknown metadata streams.
- Off-by-one error in local ref index reusing. Fix for bug #3575555.
- Interface mappings can be "incomplete". Fix for bug #3581564.
- The local variable state at the end of an exception block (if the last instruction is a local variable store) needs to be merged into the exception handler state.
- Local variable analysis for finally blocks was incorrect. Fixes bug #3600788.
- Don't implement interfaces that aren't accessible.
- Updated Mono workaround for Mono 3.0.x.
- Check for supported delegate signatures should detect pointers inside byref and array types and return type should be checked as well.
- Fake nested types should have Static modifier set in innerclasses attribute. Fixes scala compiler interop issue. Thanks to Michael Bayne for reporting this.
- ikvmstub -skiperror should also skip errors during WriteClass.
- An ITEMIDLIST should be freed using CoTaskMemFree.
- String.CaseInsensitiveComparator inner class should be acknowledged by String.
- Fixed the SHFILEINFO declaration. Thanks to Andras Kovacs for reporting this.
- Fixed race condition in MethodWrapper.ResolveMethod().
@
text
@d401 9
a409 1
						if (exceptions[j].startIndex <= i && i < exceptions[j].endIndex)
a431 9
						// if this is a store at the end of an exception block,
						// we need to propagate the new state to the exception handler
						for (int j = 0; j < exceptions.Length; j++)
						{
							if (exceptions[j].endIndex == i + 1)
							{
								state[exceptions[j].handlerIndex].Merge(curr);
							}
						}
d466 2
a467 2
						handlerState[handler].Merge(curr);
						curr = new FindLocalVarState();
d478 1
a478 1
								curr.Merge(handlerState[j]);
@


1.5.6.1
log
@Backported bug fixes. Local variable analysis and jsr inlining also need to take the final instruction of an exception block into account.
@
text
@d401 1
a401 9
						// if we're currently inside an exception block, we need to merge our current state with the exception handler
						// and if we right after the exception block (i == method.ExceptionTable[j].endIndex) and the block ends in
						// an instruction that simply falls through, we need to merge our current state with the exception handler as
						// well (because the last instruction may be a store to a local variable that affects the type of the local variable)
						// (note that we can legally access instructions[i - 1] because an empty exception block is illegal)
						if (exceptions[j].startIndex <= i
							&& (i < exceptions[j].endIndex
								|| (i == exceptions[j].endIndex
									&& ByteCodeMetaData.GetFlowControl(instructions[i - 1].NormalizedOpCode) == ByteCodeFlowControl.Next)))
@


1.4
log
@Wrapped LocalBuilder in new CodeEmitterLocal class to allow CodeEmitter to encapsulate the ILGenerator fully.
@
text
@d407 2
a408 1
					if (IsLoadLocal(instructions[i].NormalizedOpCode))
d420 2
a421 1
					if (IsStoreLocal(instructions[i].NormalizedOpCode))
@


1.3
log
@Implemented first stab at converting suitable fault blocks into finally blocks.
@
text
@d43 1
a43 1
	internal LocalBuilder builder;
@


1.2
log
@Restructured method analyzer/verifier to make data flow more obvious and keep less data alive during compilation.
@
text
@d359 1
a359 6
		ClassFile.Method.Instruction[] instructions = method.Instructions;
		ExceptionTableEntry[] exceptions = method.ExceptionTable;
		int maxLocals = method.MaxLocals;
		Dictionary<int, string>[] localStoreReaders = new Dictionary<int, string>[instructions.Length];
		FindLocalVarState[] state = new FindLocalVarState[instructions.Length];
		bool done = false;
d361 1
a361 1
		state[0].sites = new FindLocalVarStoreSite[maxLocals];
d376 10
d445 27
@


1.1
log
@Moved local variable analysis from verifier.cs to new file LocalVars.cs.
@
text
@d50 1
a50 1
sealed class LocalVarInfo
d56 1
a56 1
	internal LocalVarInfo(MethodAnalyzer ma, ClassFile.Method method, MethodWrapper mw, ClassLoaderWrapper classLoader)
d58 1
a58 1
		Dictionary<int, string>[] localStoreReaders = FindLocalVariables(ma, mw, method);
d74 1
a74 1
			InstructionFlags[] flags = ma.ComputePartialReachability(0, false);
d240 1
a240 3
			bc == NormalizedByteCode.__dstore ||
			bc == NormalizedByteCode.__fstore_conv ||
			bc == NormalizedByteCode.__dstore_conv;
d357 1
a357 1
	private static Dictionary<int, string>[] FindLocalVariables(MethodAnalyzer ma, MethodWrapper mw, ClassFile.Method method)
d421 1
a421 1
						ClassFile.ConstantPoolItemMI cpi = ma.GetMethodref(instructions[i].Arg1);
d424 1
a424 1
							TypeWrapper type = ma.GetRawStackTypeWrapper(i, cpi.GetArgTypes().Length);
d432 1
a432 1
									if (ma.GetLocalTypeWrapper(i, j) == type)
d474 1
a474 1
	private static void VisitLocalLoads(MethodAnalyzer ma, ClassFile.Method method, List<LocalVar> locals, Dictionary<long, LocalVar> localByStoreSite, Dictionary<int, string> storeSites, int instructionIndex, bool debug)
d486 1
a486 1
				type = InstructionState.FindCommonBaseType(type, ma.GetLocalTypeWrapper(0, localIndex));
d493 1
a493 1
					type = InstructionState.FindCommonBaseType(type, ma.GetLocalTypeWrapper(store + 1, localIndex));
d503 1
a503 1
					type = InstructionState.FindCommonBaseType(type, ma.GetStackTypeWrapper(store, 0));
@

