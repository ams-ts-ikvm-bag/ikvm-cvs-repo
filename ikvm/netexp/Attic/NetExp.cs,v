head	1.16;
access;
symbols
	initial:1.1.1.1 ikvm:1.1.1;
locks; strict;
comment	@ * @;


1.16
date	2004.05.27.07.12.16;	author jfrijters;	state dead;
branches;
next	1.15;

1.15
date	2004.05.25.07.14.39;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2004.03.08.15.18.48;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2004.02.18.13.48.38;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2004.02.16.17.23.03;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2004.02.10.09.53.57;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2003.11.17.12.01.53;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2003.10.22.16.34.22;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2003.08.26.11.24.19;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2003.08.21.10.06.36;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2003.06.10.13.28.50;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2003.04.14.09.42.00;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2003.03.31.14.57.32;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2003.02.15.11.31.27;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2003.01.08.13.35.46;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.16.01.26;	author jfrijters;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.12.18.16.01.26;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.16
log
@*** empty log message ***
@
text
@/*
  Copyright (C) 2002 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;
using System.Reflection;
using System.IO;
using System.Text;
using System.Collections;
using ICSharpCode.SharpZipLib.Zip;
using java.lang;
using java.lang.reflect;

public class NetExp
{
	private static ZipOutputStream zipFile;
	private static Hashtable privateClasses = new Hashtable();

	public static void Main(string[] args)
	{
		Tracer.EnableTraceForDebug();
		Assembly assembly = null;
		FileInfo file = new FileInfo(args[0]);
		if(file.Exists)
		{
			try
			{
				// If the same assembly can be found in the "Load" context, we prefer to use that
				// http://blogs.gotdotnet.com/suzcook/permalink.aspx/d5c5e14a-3612-4af1-a9b7-0a144c8dbf16
				// We use AssemblyName.FullName, because otherwise the assembly will be loaded in the
				// "LoadFrom" context using the path inside the AssemblyName object.
				assembly = Assembly.Load(AssemblyName.GetAssemblyName(args[0]).FullName);
				Console.Error.WriteLine("Warning: Assembly loaded from {0} instead", assembly.Location);
			}
			catch
			{
			}
			if(assembly == null)
			{
				assembly = Assembly.LoadFrom(args[0]);
			}
		}
		else
		{
			assembly = Assembly.LoadWithPartialName(args[0]);
		}
		if(assembly == null)
		{
			Console.Error.WriteLine("Error: Assembly \"{0}\" not found", args[0]);
		}
		else
		{
			zipFile = new ZipOutputStream(new FileStream(assembly.GetName().Name + ".jar", FileMode.Create));
			ProcessAssembly(assembly);
			ProcessPrivateClasses(assembly);
			zipFile.Close();
		}
		// FXBUG if we run a static initializer that starts a thread, we would never end,
		// so we force an exit here
		Environment.Exit(0);
	}

	private static void WriteClass(string name, ClassFileWriter c)
	{
		zipFile.PutNextEntry(new ZipEntry(name));
		c.Write(zipFile);
	}

	private static void ProcessAssembly(Assembly assembly)
	{
		foreach(Type t in assembly.GetTypes())
		{
			if(t.IsPublic)
			{
				ProcessClass(assembly.FullName, Class.forName(t.AssemblyQualifiedName, false, null), null);
			}
		}
	}

	// TODO private classes should also be done handled for interfaces, fields and method arguments/return type
	private static void ProcessPrivateClasses(Assembly assembly)
	{
		Hashtable done = new Hashtable();
		bool keepGoing;
		do
		{
			Hashtable todo = privateClasses;
			privateClasses = new Hashtable();
			keepGoing = false;
			foreach(Class c in todo.Values)
			{
				if(!done.ContainsKey(c.getName()))
				{
					keepGoing = true;
					done.Add(c.getName(), null);
					ProcessClass(assembly.FullName, c, c.getDeclaringClass());
				}
			}
		} while(keepGoing);
	}

	private static void ProcessClass(string assemblyName, Class c, Class outer)
	{
		string name = c.getName().Replace('.', '/');
		string super = null;
		if(c.getSuperclass() != null)
		{
			super = c.getSuperclass().getName().Replace('.', '/');
			// if the base class isn't public, we still need to export it (!)
			if(!Modifier.isPublic(c.getSuperclass().getModifiers()))
			{
				privateClasses[c.getSuperclass().getName()] = c.getSuperclass();
			}
		}
		if(c.isInterface())
		{
			super = "java/lang/Object";
		}
		Modifiers classmods = (Modifiers)c.getModifiers();
		if(outer != null)
		{
			// protected inner classes are actually public and private inner classes are actually package
			if((classmods & Modifiers.Protected) != 0)
			{
				classmods |= Modifiers.Public;
			}
			classmods &= ~(Modifiers.Static | Modifiers.Private | Modifiers.Protected);
		}
		ClassFileWriter f = new ClassFileWriter(classmods, name, super);
		f.AddStringAttribute("IKVM.NET.Assembly", assemblyName);
		InnerClassesAttribute innerClassesAttribute = null;
		if(outer != null)
		{
			innerClassesAttribute = new InnerClassesAttribute(f);
			string innername = name;
			int idx = name.LastIndexOf('$');
			if(idx >= 0)
			{
				innername = innername.Substring(idx + 1);
			}
			innerClassesAttribute.Add(name, outer.getName().Replace('.', '/'), innername, (ushort)c.getModifiers());
		}
		Class[] interfaces = c.getInterfaces();
		for(int i = 0; i < interfaces.Length; i++)
		{
			if(Modifier.isPublic(interfaces[i].getModifiers()))
			{
				f.AddInterface(interfaces[i].getName().Replace('.', '/'));
			}
		}
		Class[] innerClasses = c.getDeclaredClasses();
		for(int i = 0; i < innerClasses.Length; i++)
		{
			Modifiers mods = (Modifiers)innerClasses[i].getModifiers();
			if((mods & (Modifiers.Public | Modifiers.Protected)) != 0)
			{
				if(innerClassesAttribute == null)
				{
					innerClassesAttribute = new InnerClassesAttribute(f);
				}
				string namePart = innerClasses[i].getName();
				namePart = namePart.Substring(namePart.LastIndexOf('$') + 1);
				innerClassesAttribute.Add(innerClasses[i].getName().Replace('.', '/'), name, namePart, (ushort)innerClasses[i].getModifiers());
				ProcessClass(assemblyName, innerClasses[i], c);
			}
		}
		Constructor[] constructors = c.getDeclaredConstructors();
		for(int i = 0; i < constructors.Length; i++)
		{
			Modifiers mods = (Modifiers)constructors[i].getModifiers();
			if((mods & (Modifiers.Public | Modifiers.Protected)) != 0)
			{
				// TODO what happens if one of the argument types is non-public?
				java.lang.Class[] args = constructors[i].getParameterTypes();
				FieldOrMethod m = f.AddMethod(mods, "<init>", MakeSig(args, java.lang.Void.TYPE));
				CodeAttribute code = new CodeAttribute(f);
				code.MaxLocals = (ushort)(args.Length + 1);
				code.MaxStack = 3;
				ushort index1 = f.AddClass("java/lang/UnsatisfiedLinkError");
				ushort index2 = f.AddString("Netexp generated stubs can only be used on IKVM.NET");
				ushort index3 = f.AddMethodRef("java/lang/UnsatisfiedLinkError", "<init>", "(Ljava/lang/String;)V");
				code.ByteCode = new byte[] {
					187, (byte)(index1 >> 8), (byte)index1,	// new java/lang/UnsatisfiedLinkError
					89,										// dup
				    19,	 (byte)(index2 >> 8), (byte)index2,	// ldc_w "..."
					183, (byte)(index3 >> 8), (byte)index3, // invokespecial java/lang/UnsatisfiedLinkError/init()V
					191										// athrow
				};
				m.AddAttribute(code);
			}
		}
		Method[] methods = c.getDeclaredMethods();
		for(int i = 0; i < methods.Length; i++)
		{
			Modifiers mods = (Modifiers)methods[i].getModifiers();
			if((mods & (Modifiers.Public | Modifiers.Protected)) != 0)
			{
				if((mods & Modifiers.Abstract) == 0)
				{
					mods |= Modifiers.Native;
				}
				// TODO what happens if one of the argument types (or the return type) is non-public?
				FieldOrMethod m = f.AddMethod(mods, methods[i].getName(), MakeSig(methods[i].getParameterTypes(), methods[i].getReturnType()));
				Class[] exceptions = methods[i].getExceptionTypes();
				if(exceptions.Length > 0)
				{
					ExceptionsAttribute attrib = new ExceptionsAttribute(f);
					foreach(Class x in exceptions)
					{
						// TODO what happens if one of the exception types is non-public?
						attrib.Add(x.getName().Replace('.', '/'));
					}
					m.AddAttribute(attrib);
				}
			}
		}
		Field[] fields = c.getDeclaredFields();
		for(int i = 0; i < fields.Length; i++)
		{
			Modifiers mods = (Modifiers)fields[i].getModifiers();
			if((mods & (Modifiers.Public | Modifiers.Protected)) != 0)
			{
				object constantValue = null;
				// HACK we only look for constants on potential constant fields, to trigger less static initializers
				if((mods & (Modifiers.Final | Modifiers.Static)) == (Modifiers.Final | Modifiers.Static) &&
					(fields[i].getType().isPrimitive() || fields[i].getType() == Class.forName("java.lang.String")))
				{
					// HACK we use a non-standard API to get constant value
					// NOTE we can't use Field.get() because that will run the static initializer and
					// also won't allow us to see the difference between constants and blank final fields.
					constantValue = NativeCode.java.lang.reflect.Field.getConstant(fields[i]);
					if(constantValue != null)
					{
						if(constantValue is java.lang.Boolean)
						{
							constantValue = ((java.lang.Boolean)constantValue).booleanValue();
						}
						else if(constantValue is java.lang.Byte)
						{
							constantValue = ((java.lang.Byte)constantValue).byteValue();
						}
						else if(constantValue is java.lang.Short)
						{
							constantValue = ((java.lang.Short)constantValue).shortValue();
						}
						else if(constantValue is java.lang.Character)
						{
							constantValue = ((java.lang.Character)constantValue).charValue();
						}
						else if(constantValue is java.lang.Integer)
						{
							constantValue = ((java.lang.Integer)constantValue).intValue();
						}
						else if(constantValue is java.lang.Long)
						{
							constantValue = ((java.lang.Long)constantValue).longValue();
						}
						else if(constantValue is java.lang.Float)
						{
							constantValue = ((java.lang.Float)constantValue).floatValue();
						}
						else if(constantValue is java.lang.Double)
						{
							constantValue = ((java.lang.Double)constantValue).doubleValue();
						}
						else if(constantValue is string)
						{
							// no conversion needed
						}
						else
						{
							throw new InvalidOperationException();
						}
					}
				}
				// TODO what happens if the field type is non-public?
				f.AddField(mods, fields[i].getName(), ClassToSig(fields[i].getType()), constantValue);
			}
		}
		if(innerClassesAttribute != null)
		{
			f.AddAttribute(innerClassesAttribute);
		}
		WriteClass(name + ".class", f);
	}

	private static string MakeSig(Class[] args, Class ret)
	{
		StringBuilder sb = new StringBuilder();
		sb.Append('(');
		for(int i = 0; i < args.Length; i++)
		{
			sb.Append(ClassToSig(args[i]));
		}
		sb.Append(')');
		sb.Append(ClassToSig(ret));
		return sb.ToString();
	}

	private static string ClassToSig(Class c)
	{
		if(c.isPrimitive())
		{
			if(c == java.lang.Void.TYPE)
			{
				return "V";
			}
			else if(c == java.lang.Byte.TYPE)
			{
				return "B";
			}
			else if(c == java.lang.Boolean.TYPE)
			{
				return "Z";
			}
			else if(c == java.lang.Short.TYPE)
			{
				return "S";
			}
			else if(c == java.lang.Character.TYPE)
			{
				return "C";
			}
			else if(c == java.lang.Integer.TYPE)
			{
				return "I";
			}
			else if(c == java.lang.Long.TYPE)
			{
				return "J";
			}
			else if(c == java.lang.Float.TYPE)
			{
				return "F";
			}
			else if(c == java.lang.Double.TYPE)
			{
				return "D";
			}
			else
			{
				throw new InvalidOperationException();
			}
		}
		else if(c.isArray())
		{
			return "[" + ClassToSig(c.getComponentType());
		}
		else
		{
			return "L" + c.getName().Replace('.', '/') + ";";
		}
	}
}
@


1.15
log
@*** empty log message ***
@
text
@@


1.14
log
@*** empty log message ***
@
text
@d77 1
a77 1
		// HACK if we run on the "classpath" assembly, the awt thread gets started,
@


1.13
log
@*** empty log message ***
@
text
@d40 1
a72 7
			// HACK if we're doing the "classpath" assembly, also include the remapped types
			// java.lang.Object and java.lang.Throwable are automatic, because of the $OverrideStub
			if(assembly.GetType("java.lang.Object$OverrideStub") != null)
			{
				ProcessClass(assembly.FullName, Class.forName("java.lang.String"), null);
				ProcessClass(assembly.FullName, Class.forName("java.lang.Comparable"), null);
			}
a123 1
		//Console.WriteLine(name);
@


1.12
log
@*** empty log message ***
@
text
@d145 11
a155 1
		ClassFileWriter f = new ClassFileWriter((Modifiers)c.getModifiers() & ~Modifiers.Static, name, super);
@


1.11
log
@*** empty log message ***
@
text
@d194 11
a204 2
				code.MaxStack = 0;
				code.ByteCode = new byte[] { 177 };
@


1.10
log
@*** empty log message ***
@
text
@d145 1
a145 1
		ClassFileWriter f = new ClassFileWriter((Modifiers)c.getModifiers(), name, super);
d151 7
a157 1
			innerClassesAttribute.Add(name, outer.getName().Replace('.', '/'), null, (ushort)Modifiers.Public);
d190 7
a196 1
				f.AddMethod(mods | Modifiers.Native, "<init>", MakeSig(constructors[i].getParameterTypes(), java.lang.Void.TYPE));
@


1.9
log
@*** empty log message ***
@
text
@d105 1
d153 8
d183 1
d197 13
a209 1
				f.AddMethod(mods, methods[i].getName(), MakeSig(methods[i].getParameterTypes(), methods[i].getReturnType()));
d271 1
@


1.8
log
@*** empty log message ***
@
text
@d28 1
d36 1
d80 1
d105 21
d134 5
@


1.7
log
@*** empty log message ***
@
text
@d39 2
a40 1
		if(new FileInfo(args[0]).Exists)
d42 16
a57 1
			assembly = Assembly.LoadFrom(args[0]);
d72 1
a72 1
			if(args[0] == "classpath")
a90 8
	private class MyClassLoader : ClassLoader
	{
		public Class loadClass(Type type)
		{
			return base.loadClass(type.AssemblyQualifiedName);
		}
	}

a92 2
		// HACK we use our own class loader to prevent class initialization
		MyClassLoader loader = new MyClassLoader();
d97 1
a97 1
				ProcessClass(assembly.FullName, loader.loadClass(t), null);
d168 3
a170 2
				// HACK we only look for constants on static final fields, to trigger less static initializers
				if((mods & (Modifiers.Final | Modifiers.Static)) == (Modifiers.Final | Modifiers.Static))
@


1.6
log
@*** empty log message ***
@
text
@a27 1
using System.Collections;
d29 2
d43 4
d54 7
d64 3
d69 1
a69 1
	private static void ProcessAssembly(Assembly assembly)
d71 2
a72 28
		object[] attribs = assembly.GetCustomAttributes(typeof(CLSCompliantAttribute), false);
		bool assemblyIsCLSCompliant = true;
		if(attribs.Length != 1)
		{
			assemblyIsCLSCompliant = false;
			Console.Error.WriteLine("Warning: assembly has no (or multiple) CLS compliance attribute");
		}
		else if(!((CLSCompliantAttribute)attribs[0]).IsCompliant)
		{
			assemblyIsCLSCompliant = false;
			Console.Error.WriteLine("Warning: assembly is marked as non-CLS compliant");
		}
		foreach(Type t in assembly.GetTypes())
		{
			bool typeIsCLSCompliant = true;
			if(assemblyIsCLSCompliant)
			{
				attribs = t.GetCustomAttributes(typeof(CLSCompliantAttribute), false);
				if(attribs.Length == 1)
				{
					typeIsCLSCompliant = ((CLSCompliantAttribute)attribs[0]).IsCompliant;
				}
			}
			if(t.IsPublic && typeIsCLSCompliant)
			{
				ProcessType(t);
			}
		}
d75 1
a75 1
	private static object UnwrapEnum(object o)
d77 1
a77 23
		// is there a way to generically convert a boxed enum to its boxed underlying value?
		Type underlyingType = Enum.GetUnderlyingType(o.GetType());
		if (underlyingType == typeof(long))
		{
			o = (long)o;
		}	
		else if(underlyingType == typeof(int))
		{
			o = (int)o;
		}
		else if(underlyingType == typeof(short))
		{
			o = (short)o;
		}
		else if (underlyingType == typeof(sbyte))
		{
			o = (sbyte)o;
		}
		else if (underlyingType == typeof(ulong))
		{
			o = (ulong)o;
		}		
		else if (underlyingType == typeof(uint))
d79 1
a79 1
			o = (uint)o;
a80 13
		else if (underlyingType == typeof(ushort))
		{
			o = (ushort)o;
		}
		else if (underlyingType == typeof(byte))
		{
			o = (byte)o;
		}
		else
		{
			throw new NotImplementedException(o.GetType().Name);
		}
		return o;
d83 1
a83 1
	private static string ClassName(Type t)
d85 3
a87 1
		if(t == typeof(object))
d89 1
a89 71
			return "java/lang/Object";
		}
		else if(t == typeof(string))
		{
			return "java/lang/String";
		}
		string name = t.FullName;
		int lastDot = name.LastIndexOf('.');
		if(lastDot > 0)
		{
			name = name.Substring(0, lastDot).ToLower() + name.Substring(lastDot);
		}
		return name.Replace('.', '/');
	}

	// returns the mapped type in signature format (e.g. Ljava/lang/String;)
	private static string SigType(Type t)
	{
		if(t.IsByRef)
		{
			return "[" + SigType(t.GetElementType());
		}
		if(t.IsEnum)
		{
			t = Enum.GetUnderlyingType(t);
		}
		if(t == typeof(void))
		{
			return "V";
		}
		else if(t == typeof(byte) || t == typeof(sbyte))
		{
			return "B";
		}
		else if(t == typeof(bool))
		{
			return "Z";
		}
		else if(t == typeof(short) || t == typeof(ushort))
		{
			return "S";
		}
		else if(t == typeof(char))
		{
			return "C";
		}
		else if(t == typeof(int) || t == typeof(uint))
		{
			return "I";
		}
		else if(t == typeof(long) || t == typeof(ulong))
		{
			return "J";
		}
		else if(t == typeof(float))
		{
			return "F";
		}
		else if(t == typeof(double))
		{
			return "D";
		}
		else if(t == typeof(IntPtr))
		{
			// HACK
			return "I";
		}
		else if(t.IsArray)
		{
			StringBuilder sb = new StringBuilder();
			while(t.IsArray)
d91 1
a91 2
				sb.Append('[');
				t = t.GetElementType();
a92 10
			sb.Append(SigType(t));
			return sb.ToString();
		}
		else if(!t.IsPrimitive)
		{
			return "L" + ClassName(t) + ";";
		}
		else
		{
			throw new NotImplementedException(t.FullName);
d96 1
a96 1
	private static void ProcessType(Type type)
d98 4
a101 7
		if(type == typeof(object))// || type == typeof(string))
		{
			// special case for System.Object & System.String, don't emit those
			return;
		}
		string name = ClassName(type);
		if(type == typeof(string))
d103 1
a103 1
			name = "system/String";
d105 1
a105 2
		string super;
		if(type.BaseType == null)
a106 1
			// in .NET interfaces don't have a baseType, but in Java they "extend" java/lang/Object
d109 4
a112 17
		else
		{
			if(type == typeof(Exception))
			{
				super = "java/lang/Throwable";
			}
			else
			{
				super = ClassName(type.BaseType);
			}
		}
		Modifiers mods = Modifiers.Public | Modifiers.Super;
		if(type.IsInterface)
		{
			mods |= Modifiers.Interface;
		}
		if(type.IsSealed)
d114 2
a115 1
			mods |= Modifiers.Final;
d117 2
a118 1
		if(type.IsAbstract)
d120 2
a121 9
			mods |= Modifiers.Abstract;
		}
		ClassFileWriter f = new ClassFileWriter(mods, name, super);
		f.AddStringAttribute("IK.VM.NET.Type", type.AssemblyQualifiedName);
		FieldInfo[] fields = type.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static);
		Hashtable clashtable = new Hashtable();
		for(int i = 0; i < fields.Length; i++)
		{
			if(fields[i].IsPublic || fields[i].IsFamily)
d123 1
a123 6
				object[] attribs = fields[i].GetCustomAttributes(typeof(CLSCompliantAttribute), false);
				if(attribs.Length == 1 && !((CLSCompliantAttribute)attribs[0]).IsCompliant)
				{
					// skip non-CLS compliant field
				}
				else
d125 1
a125 1
					ProcessField(type, f, fields[i], clashtable);
d127 4
d133 1
a133 2
		clashtable.Clear();
		ConstructorInfo[] constructors = type.GetConstructors(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance);
d136 2
a137 1
			if(constructors[i].IsPublic || constructors[i].IsFamily)
d139 1
a139 9
				object[] attribs = constructors[i].GetCustomAttributes(typeof(CLSCompliantAttribute), false);
				if(attribs.Length == 1 && !((CLSCompliantAttribute)attribs[0]).IsCompliant)
				{
					// skip non-CLS compliant constructor
				}
				else
				{
					ProcessMethod(type, f, constructors[i], clashtable);
				}
d142 1
a142 1
		MethodInfo[] methods = type.GetMethods(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static | BindingFlags.DeclaredOnly);
d145 2
a146 1
			if(methods[i].IsPublic || methods[i].IsFamily)
d148 1
a148 2
				object[] attribs = methods[i].GetCustomAttributes(typeof(CLSCompliantAttribute), false);
				if(attribs.Length == 1 && !((CLSCompliantAttribute)attribs[0]).IsCompliant)
d150 1
a150 1
					// skip non-CLS compliant method
d152 12
a163 1
				else
d165 47
a211 1
					ProcessMethod(type, f, methods[i], clashtable);
d213 1
d216 1
a216 2
		// for delegates we have to construct the inner interface
		if(type.IsSubclassOf(typeof(MulticastDelegate)))
d218 1
a218 22
			InnerClassesAttribute innerclasses = new InnerClassesAttribute(f);
			string outer = ClassName(type);
			innerclasses.Add(outer + "$Method", outer, "Method", 0x609);
			f.AddAttribute(innerclasses);
			// now we construct the inner interface type
			ClassFileWriter iface = new ClassFileWriter(Modifiers.Interface | Modifiers.Public | Modifiers.Abstract, outer + "$Method", "java/lang/Object");
			MethodInfo invoke = type.GetMethod("Invoke");
			StringBuilder sb = new StringBuilder();
			sb.Append('(');
			ParameterInfo[] parameters = invoke.GetParameters();
			for(int i = 0; i < parameters.Length; i++)
			{
				sb.Append(SigType(parameters[i].ParameterType));
			}
			sb.Append(')');
			sb.Append(SigType(invoke.ReturnType));
			// TODO IK.VM.NET.Sig must be set here as well
			iface.AddMethod(Modifiers.Public | Modifiers.Abstract, "Invoke", sb.ToString());
			innerclasses = new InnerClassesAttribute(iface);
			innerclasses.Add(outer + "$Method", outer, "Method", 0x609);
			iface.AddAttribute(innerclasses);
			WriteClass(outer + "$Method.class", iface);
d223 1
a223 1
	private static void WriteClass(string name, ClassFileWriter c)
d225 9
a233 2
		zipFile.PutNextEntry(new ZipEntry(name));
		c.Write(zipFile);
d236 1
a236 1
	private static void ProcessField(Type type, ClassFileWriter f, FieldInfo fi, Hashtable clashtable)
d238 1
a238 6
		Modifiers access;
		if(fi.IsPublic)
		{
			access = Modifiers.Public;
		}
		else
d240 1
a240 7
			access = Modifiers.Protected;
		}
		object v = null;
		if(fi.IsLiteral)
		{
			v = fi.GetValue(null);
			if(v is Enum)
d242 1
a242 1
				v = UnwrapEnum(v);
d244 1
a244 1
			if(v is byte)
d246 1
a246 1
				v = (int)(byte)v;
d248 1
a248 1
			else if (v is sbyte)
d250 1
a250 1
				v = (int)(sbyte)v;
d252 1
a252 1
			else if(v is char)
d254 1
a254 1
				v = (int)(char)v;
d256 1
a256 1
			else if(v is short)
d258 1
a258 1
				v = (int)(short)v;
d260 1
a260 1
			else if(v is ushort)
d262 1
a262 1
				v = (int)(ushort)v;
d264 1
a264 1
			else if(v is bool)
d266 1
a266 1
				v = ((bool)v) ? 1 : 0;
d268 1
a268 1
			else if(v is int || v is uint || v is ulong || v is long || v is float || v is double || v is string)
d270 1
d272 1
a272 1
			else
d274 1
a274 1
				throw new NotImplementedException(v.GetType().FullName);
d276 1
a276 9
			access |= Modifiers.Static | Modifiers.Final;
		}
		else
		{
			if(fi.IsInitOnly)
			{
				access |= Modifiers.Final;
			}
			if(fi.IsStatic)
d278 1
a278 1
				access |= Modifiers.Static;
a279 82
			if(type.IsEnum)
			{
				// we don't want the value__ field
				return;
			}
		}
		string sig = SigType(fi.FieldType);
		string key = fi.Name + sig;
		if(clashtable.ContainsKey(key))
		{
			// TODO instead of skipping, we should mangle the name
			Console.Error.WriteLine("Skipping field " + type.FullName + "." + fi.Name + " (type " + sig + ") because it clashes");
		}
		else
		{
			clashtable.Add(key, key);
			f.AddField(access, fi.Name, sig, v);
		}
	}

	private static void ProcessMethod(Type type, ClassFileWriter f, MethodBase mb, Hashtable clashtable)
	{
		Modifiers access = 0;
		if(!mb.IsAbstract)
		{
			access = Modifiers.Native;
		}
		if(mb.IsPublic)
		{
			access |= Modifiers.Public;
		}
		else
		{
			access |= Modifiers.Protected;
		}
		if(mb.IsFinal || !mb.IsVirtual)
		{
			access |= Modifiers.Final;
		}
		if(mb.IsStatic)
		{
			access |= Modifiers.Static;
		}
		if(mb.IsAbstract)
		{
			access |= Modifiers.Abstract;
		}
		// special case for delegate constructors!
		if(mb.IsConstructor && type.IsSubclassOf(typeof(MulticastDelegate)))
		{
			access &= ~Modifiers.Final;
			f.AddMethod(access, "<init>", "(L" + ClassName(type) + "$Method;)V");
			return;
		}
		// HACK the native signature is really is very lame way of storing the signature
		// TODO only store it when it doesn't match the Java sig and split it into parts (instead of one giant string)
		StringBuilder nativesig = new StringBuilder();
		StringBuilder sb = new StringBuilder();
		sb.Append('(');
		ParameterInfo[] parameters = mb.GetParameters();
		string sep = "";
		for(int i = 0; i < parameters.Length; i++)
		{
			if(parameters[i].ParameterType.IsPointer)
			{
				// Java doesn't support pointer parameters
				return;
			}
			sb.Append(SigType(parameters[i].ParameterType));
			nativesig.Append(sep).Append(parameters[i].ParameterType.AssemblyQualifiedName);
			sep = "|";
		}
		sb.Append(')');
		if(mb.IsConstructor)
		{
			// HACK constructors may not be final in Java
			access &= ~Modifiers.Final;
			sb.Append('V');
		}
		else
		{
			sb.Append(SigType(((MethodInfo)mb).ReturnType));
d281 1
a281 4
		string name = mb.IsConstructor ? "<init>" : mb.Name;
		string sig = sb.ToString();
		string key = name + sig;
		if(clashtable.ContainsKey(key))
d283 1
a283 2
			// TODO instead of skipping, we should mangle the name
			Console.Error.WriteLine("Skipping method " + type.FullName + "." + name + sig + " because it clashes");
d287 1
a287 3
			clashtable.Add(key, key);
			f.AddMethod(access, name, sig)
				.AddAttribute(new StringAttribute(f.AddUtf8("IK.VM.NET.Sig"), f.AddUtf8(nativesig.ToString())));
@


1.5
log
@*** empty log message ***
@
text
@d320 1
a320 1
			innerclasses.Add(outer + "$Method", outer, "Method", 0x209);
d323 1
a323 1
			ClassFileWriter iface = new ClassFileWriter(Modifiers.Interface | Modifiers.Public, outer + "$Method", "java/lang/Object");
d337 1
a337 1
			innerclasses.Add(outer + "$Method", outer, "Method", 0x209);
@


1.4
log
@*** empty log message ***
@
text
@d151 4
d223 1
a223 1
		if(type == typeof(object) || type == typeof(string))
d229 4
d291 1
a291 1
					// skip non-CLS compliant field
d307 1
a307 1
					// skip non-CLS compliant field
d475 1
a475 1
			if(parameters[i].ParameterType.IsByRef)
d477 1
a477 1
				// Java doesn't support byref parameters
@


1.3
log
@no message
@
text
@d467 5
@


1.2
log
@no message
@
text
@d90 5
a94 1
		if(underlyingType == typeof(int))
d102 20
d365 4
d377 4
d385 1
a385 1
			else if(v is int || v is long || v is float || v is double || v is string)
@


1.1
log
@Initial revision
@
text
@d29 1
a29 2
using java.util.zip;
using java.io;
d48 1
a48 1
			zipFile = new ZipOutputStream(new FileOutputStream(assembly.GetName().Name + ".jar"));
d50 1
a50 1
			zipFile.close();
d314 2
a315 10
		zipFile.putNextEntry(new ZipEntry(name));
		MemoryStream s = new MemoryStream();
		c.Write(s);
		byte[] buf = s.ToArray();
		sbyte[] sbuf = new sbyte[buf.Length];
		for(int i = 0; i < buf.Length; i++)
		{
			sbuf[i] = (sbyte)buf[i];
		}
		zipFile.write(sbuf, 0, sbuf.Length);
@


1.1.1.1
log
@no message
@
text
@@
