head	1.7;
access;
symbols
	initial:1.1.1.1 ikvm:1.1.1;
locks; strict;
comment	@ * @;


1.7
date	2004.05.27.07.12.13;	author jfrijters;	state dead;
branches;
next	1.6;

1.6
date	2004.05.14.09.31.54;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2004.04.23.11.34.32;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2003.08.07.15.41.23;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2003.01.17.14.35.27;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2002.12.27.09.01.48;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2002.12.18.16.01.07;	author jfrijters;	state Exp;
branches
	1.1.1.1;
next	;

1.1.1.1
date	2002.12.18.16.01.07;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@/*
  Copyright (C) 2002 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/

#pragma once

using namespace System;
using namespace System::Collections;
using namespace System::Runtime::InteropServices;
using namespace System::Reflection;

class JNIEnv;

#pragma managed

template<class T> T __unbox(Object* o)
{
	// HACK the MC++ compiler has a bug when unboxing, the static_cast<> is to work around that bug
	return *(static_cast<T __gc*>(__try_cast<__box T*>(o)));
}

public __value class LocalRefStruct;

// NOTE this __value type needs to have the *exact* same layout as the unmanaged JNIENv class
//__nogc struct JNIEnvContainer
//{
//	void* pVtable;
//	LocalRefStruct __nogc* pLocalRefStruct;
//};

[StructLayout(LayoutKind::Sequential)]
__value struct LocalRefCache
{
	Object* loc1;
	Object* loc2;
	Object* loc3;
	Object* loc4;
	Object* loc5;
	Object* loc6;
	Object* loc7;
	Object* loc8;
	Object* loc9;
	Object* loc10;
};

public __value class LocalRefStruct
{
	void* pPrevLocalRefCache;
	int cookie;
	LocalRefCache cache;
	Object* overflow __gc[];
	Exception* pendingException;
public:

	static JNIEnv* GetEnv();

	static LocalRefStruct* Current();

	IntPtr Enter();
	void Leave();

	__property Exception* get_PendingException();
	__property void set_PendingException(Exception* exception);

	IntPtr MakeLocalRef(Object* o);
	void DeleteLocalRef(jobject o);
	Object* UnwrapLocalRef(IntPtr localref);
};

public __gc class JNI : public IJniProvider
{
	static ArrayList* libs = new ArrayList();
	static ArrayList* globalRefs = new ArrayList();
	[DllImport("kernel32")]
	[System::Security::SuppressUnmanagedCodeSecurityAttribute]
	static HMODULE LoadLibrary(String* lpLibFileName);
	[DllImport("kernel32")]
	[System::Security::SuppressUnmanagedCodeSecurityAttribute]
	static void* GetProcAddress(HMODULE hMod, String* lpProcName);
public:
	int LoadNativeLibrary(String* name);
	Type* GetLocalRefStructType();
	MethodInfo* GetJniFuncPtrMethod();

	static IntPtr GetJniFuncPtr(String* name, String* sig, String* clazz);
	static jobject MakeGlobalRef(Object* o);
	static void DeleteGlobalRef(jobject o);
	static Object* UnwrapGlobalRef(jobject o);
};

public __gc class VM
{
public:
	static IntPtr GetMethodCookie(Object* clazz, String* name, String* sig, bool isStatic)
	{
		return JniHelper::GetMethodCookie(clazz, name, sig, isStatic);
	}
	static String* GetMethodArgList(IntPtr cookie)
	{
		return JniHelper::GetMethodArgList(cookie);
	}
	static Object* InvokeMethod(IntPtr cookie, Object* obj, Object* args[], bool nonVirtual)
	{
		return JniHelper::InvokeMethod(cookie, obj, args, nonVirtual);
	}
	static IntPtr GetFieldCookie(Object* clazz, String* name, String* sig, bool isStatic)
	{
		return JniHelper::GetFieldCookie(clazz, name, sig, isStatic);
	}
	static Object* GetFieldValue(IntPtr cookie, Object* obj)
	{
		return JniHelper::GetFieldValue(cookie, obj);
	}
	static void SetFieldValue(IntPtr cookie, Object* obj, Object* value)
	{
		JniHelper::SetFieldValue(cookie, obj, value);
	}
	static Object* FindClass(String* javaName)
	{
		return JniHelper::FindClass(javaName);
	}
	static Exception* UnsatisfiedLinkError(String* msg)
	{
		return JniHelper::UnsatisfiedLinkError(msg);
	}
	static Object* GetClassFromType(Type* type)
	{
		return JniHelper::GetClassFromType(type);
	}
	static Object* AllocObject(Object* clazz)
	{
		return JniHelper::AllocObject(clazz);
	}
};
@


1.6
log
@*** empty log message ***
@
text
@@


1.5
log
@*** empty log message ***
@
text
@a121 1
	[StackTraceInfo(Hidden = true)]
@


1.4
log
@*** empty log message ***
@
text
@d151 4
@


1.3
log
@no message
@
text
@a26 2
#using "\ikvm\ik.vm.net\bin\debug\ik.vm.net.dll"

@


1.2
log
@no message
@
text
@d116 1
a116 1
	static MethodBase* GetMethod(Object* clazz, String* name, String* sig, bool isStatic)
d118 1
a118 1
		return JniHelper::GetMethod(clazz, name, sig, isStatic);
d120 1
a120 1
	static FieldInfo* GetField(Object* clazz, String* name, String* sig, bool isStatic)
d122 18
a139 1
		return JniHelper::GetField(clazz, name, sig, isStatic);
@


1.1
log
@Initial revision
@
text
@d27 2
d38 6
d47 5
a51 5
__value struct JNIEnvContainer
{
	void* pVtable;
	LocalRefStruct __nogc* pLocalRefStruct;
};
d53 2
a54 1
public __value class LocalRefStruct
a55 3
	[ThreadStatic]
	static JNIEnvContainer jniEnv;
	LocalRefStruct __nogc* pPrevLocalRefCache;
d66 7
d77 1
a77 40
	static JNIEnv* GetEnv()
	{
		if(jniEnv.pVtable != 0)
		{
			return (JNIEnv*)(void*)&jniEnv;
		}
		return 0;
	}

	IntPtr Enter()
	{
		if(jniEnv.pVtable == 0)
		{
			// HACK initialize the vtable ptr
			JNIEnv env;
			jniEnv.pVtable = *((void**)&env);
		}
		pPrevLocalRefCache = jniEnv.pLocalRefStruct;
		// NOTE since this __value type can (should) only be allocated on the stack,
		// it is "safe" to store the this pointer in a __nogc*, but the compiler
		// doesn't know this, so we have to use a __pin* to bypass its checks.
		LocalRefStruct __pin* pPinHack = this;
		jniEnv.pLocalRefStruct = pPinHack;
		return (IntPtr)&jniEnv;
	}

	void Leave()
	{
		jniEnv.pLocalRefStruct = pPrevLocalRefCache;
		if(pendingException)
		{
			// TODO retain the stack trace of the exception object
			throw pendingException;
		}
	}

	__property Exception* get_PendingException()
	{
		return pendingException;
	}
d79 1
a79 4
	__property void set_PendingException(Exception* exception)
	{
		pendingException = exception;
	}
d81 2
a82 30
	IntPtr MakeLocalRef(Object* o)
	{
		if(o == 0)
		{
			return 0;
		}
		Object** p = &loc1;
		for(int i = 0; i < 10; i++)
		{
			if(p[i] == 0)
			{
				p[i] = o;
				return i + 1;
			}
		}
		if(!overflow)
		{
			// HACK we use a very large dynamic table size, because we don't yet support growing it
			overflow = new Object* __gc[256];
		}
		for(int i = 0; i < overflow->Length; i++)
		{
			if(overflow[i] == 0)
			{
				overflow[i] = o;
				return i + 11;
			}
		}
		throw new NotImplementedException(S"Growing the localref table is not implemented");
	}
d84 2
a85 20
	void DeleteLocalRef(jobject o)
	{
		int i = (int)o;
		if(i < 0)
		{
			DebugBreak();
		}
		if(i > 0)
		{
			if(i <= 10)
			{
				Object** p = &loc1;
				p[i - 1] = 0;
			}
			else
			{
				overflow[i - 11] = 0;
			}
		}
	}
d87 3
a89 16
	Object* UnwrapLocalRef(IntPtr localref)
	{
		if(localref == 0)
		{
			return 0;
		}
		if(int(localref) <= 10)
		{
			Object** p = &loc1;
			return p[int(localref) - 1];
		}
		else
		{
			return overflow[int(localref) - 11];
		}
	}
d92 1
a92 1
public __gc class JNI
d103 5
a107 2
	static int LoadNativeLibrary(String* name);
	static IntPtr GetJniFuncPtr(String* method, String* sig, String* clazz);
a112 10
public __gc interface IJniHack
{
public:
	virtual MethodBase* GetMethod(Object* clazz, String* name, String* sig, bool isStatic)=0;
	virtual FieldInfo* GetField(Object* clazz, String* name, String* sig, bool isStatic)=0;
	virtual Object* FindClass(String* name)=0;
	virtual Exception* UnsatisfiedLinkError(String* msg)=0;
	virtual Object* GetClassFromType(Type* type)=0;
};

a114 6
private:
	static IJniHack* pJniHack = 0;
	static VM()
	{
		pJniHack = __try_cast<IJniHack*>(Activator::CreateInstance(Assembly::Load(S"ik.vm.net")->GetType(S"JniHack")));
	}
a115 2
	// NOTE we use this nasty construct to avoid a compile time dependency on JVM.DLL (which already has a compile time
	// dependency on us)
d118 1
a118 1
		return pJniHack->GetMethod(clazz, name, sig, isStatic);
d122 1
a122 1
		return pJniHack->GetField(clazz, name, sig, isStatic);
d126 1
a126 1
		return pJniHack->FindClass(javaName);
d130 1
a130 1
		return pJniHack->UnsatisfiedLinkError(msg);
d134 1
a134 1
		return pJniHack->GetClassFromType(type);
a136 6

template<class T> T __unbox(Object* o)
{
	// HACK the MC++ compiler has a bug when unboxing, the static_cast<> is to work around that bug
	return *(static_cast<T __gc*>(__try_cast<__box T*>(o)));
}
@


1.1.1.1
log
@no message
@
text
@@
