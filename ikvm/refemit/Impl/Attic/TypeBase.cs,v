head	1.13;
access;
symbols
	v0_40_0_6:1.6
	v0_40_0_5:1.6
	v0_42_0_7:1.12
	v0_42_0_6:1.12
	v0_42_0_5:1.12
	v0_42_0_4:1.12
	v0_42_0_3:1.12
	v0_42_0_2:1.12
	v0_42_0_1:1.12
	v0_42_0_0:1.12
	v0_42:1.12.0.2
	v0_40_0_3:1.6
	v0_40_0_2:1.6
	v0_40_0_1:1.6
	v0_40_0_0:1.6
	v0_40:1.6.0.2;
locks; strict;
comment	@ * @;


1.13
date	2010.04.02.04.03.43;	author jfrijters;	state dead;
branches;
next	1.12;

1.12
date	2009.08.06.06.14.46;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2009.06.29.05.04.36;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.22.14.51.39;	author jfrijters;	state Exp;
branches;
next	1.9;

1.9
date	2009.06.22.04.30.52;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2009.05.25.13.42.15;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2009.05.24.04.49.54;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2009.03.16.05.05.17;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2009.03.03.04.44.46;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2009.01.20.05.13.49;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.25.05.10.06;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.18.05.52.40;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.14.07.40.50;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.13
log
@Removed old refemit code.
@
text
@ï»¿/*
  Copyright (C) 2008 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
*/
using System;
using System.Reflection;

namespace IKVM.Reflection.Emit.Impl
{
	public abstract class TypeBase : Type
	{
#if NET_4_0
		public abstract override Assembly Assembly
		{
			get;
		}
#else
		public sealed override Assembly Assembly
		{
			get { throw new NotSupportedException(); }
		}
#endif

		public abstract override string AssemblyQualifiedName
		{
			get;
		}

		public abstract override Type BaseType
		{
			get;
		}

		public abstract override string FullName
		{
			get;
		}

		public sealed override Guid GUID
		{
			get { throw new NotSupportedException(); }
		}

		protected abstract override TypeAttributes GetAttributeFlagsImpl();

		protected override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
		{
			throw new NotSupportedException();
		}

		public sealed override ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		public override Type GetElementType()
		{
			return null;
		}

		public sealed override EventInfo GetEvent(string name, BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		public sealed override EventInfo[] GetEvents(BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		public sealed override FieldInfo GetField(string name, BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		public sealed override FieldInfo[] GetFields(BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		public sealed override Type GetInterface(string name, bool ignoreCase)
		{
			throw new NotSupportedException();
		}

		public sealed override Type[] GetInterfaces()
		{
			throw new NotSupportedException();
		}

		public sealed override MemberInfo[] GetMembers(BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		protected abstract override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers);

		public override MethodInfo[] GetMethods(BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		public sealed override Type GetNestedType(string name, BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		public override Type[] GetNestedTypes(BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		public sealed override PropertyInfo[] GetProperties(BindingFlags bindingAttr)
		{
			throw new NotSupportedException();
		}

		protected sealed override PropertyInfo GetPropertyImpl(string name, BindingFlags bindingAttr, Binder binder, Type returnType, Type[] types, ParameterModifier[] modifiers)
		{
			throw new NotSupportedException();
		}

		protected abstract override bool HasElementTypeImpl();

		public sealed override object InvokeMember(string name, BindingFlags invokeAttr, Binder binder, object target, object[] args, ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters)
		{
			throw new NotSupportedException();
		}

		protected abstract override bool IsArrayImpl();

		protected abstract override bool IsByRefImpl();

		protected sealed override bool IsCOMObjectImpl()
		{
			throw new NotSupportedException();
		}

		protected override bool IsPointerImpl()
		{
			return false;
		}

		protected sealed override bool IsPrimitiveImpl()
		{
			return false;
		}

#if NET_4_0
		public abstract override Module Module
		{
			get;
		}
#else
		public sealed override Module Module
		{
			get { throw new NotSupportedException(); }
		}
#endif

		public override Type UnderlyingSystemType
		{
			get { return this; }
		}

		public override Type DeclaringType
		{
			get { return null; }
		}

		public sealed override object[] GetCustomAttributes(Type attributeType, bool inherit)
		{
			throw new NotSupportedException();
		}

		public sealed override object[] GetCustomAttributes(bool inherit)
		{
			throw new NotSupportedException();
		}

		public sealed override bool IsDefined(Type attributeType, bool inherit)
		{
			throw new NotSupportedException();
		}

		public override string Name
		{
			get
			{
				string fullname = FullName;
				return fullname.Substring(fullname.LastIndexOf('.') + 1);
			}
		}

		public sealed override string Namespace
		{
			get
			{
				if (IsNested)
				{
					return null;
				}
				string fullname = FullName;
				int index = fullname.LastIndexOf('.');
				return index < 0 ? null : fullname.Substring(0, index);
			}
		}

		public override Type MakeArrayType()
		{
			return ArrayType.Make(this);
		}

		public override int MetadataToken
		{
			get { throw new NotImplementedException(); }
		}

		public override Type MakeByRefType()
		{
			return new ByRefType(this);
		}

		public override Type MakePointerType()
		{
			return new PointerType(this);
		}

		internal virtual int GetTypeToken()
		{
			return MetadataToken;
		}

		internal abstract ModuleBuilder ModuleBuilder { get; }

		// MONOBUG we need to override Equals because Mono's Type.Equals is broken
		public override bool Equals(object o)
		{
			Type other = o as Type;
			return other != null && ReferenceEquals(this.UnderlyingSystemType, other.UnderlyingSystemType);
		}

		// MONOBUG we need to override GetHashCode because Mono's Type.GetHashCode is broken
		public override int GetHashCode()
		{
			Type underlying = this.UnderlyingSystemType;
			if (ReferenceEquals(underlying, this))
			{
				return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this);
			}
			return underlying.GetHashCode();
		}

		// MONOBUG we need to override IsGenericTypeDefinition, because Mono's Type.IsGenericTypeDefinition will crash when called on a non-MonoType.
		public override bool IsGenericTypeDefinition
		{
			get { return false; }
		}
	}

	sealed class ByRefType : TypeBase
	{
		private readonly TypeBase type;

		internal ByRefType(TypeBase type)
		{
			this.type = type;
		}

		public override string AssemblyQualifiedName
		{
			get { throw new NotImplementedException(); }
		}

		public override Type BaseType
		{
			get { throw new NotImplementedException(); }
		}

		public override string FullName
		{
			get { throw new NotImplementedException(); }
		}

		public override Type GetElementType()
		{
			return type;
		}

		protected override TypeAttributes GetAttributeFlagsImpl()
		{
			throw new NotImplementedException();
		}

		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
		{
			throw new NotImplementedException();
		}

		protected override bool HasElementTypeImpl()
		{
			return true;
		}

		protected override bool IsArrayImpl()
		{
			return false;
		}

		protected override bool IsByRefImpl()
		{
			return true;
		}

#if NET_4_0
		public override Assembly Assembly
		{
			get { return type.Assembly; }
		}

		public override Module Module
		{
			get { return type.Module; }
		}
#endif

		internal override ModuleBuilder ModuleBuilder
		{
			get { return type.ModuleBuilder; }
		}
	}

	sealed class PointerType : TypeBase
	{
		private readonly TypeBase type;

		internal PointerType(TypeBase type)
		{
			this.type = type;
		}

		public override string AssemblyQualifiedName
		{
			get { throw new NotImplementedException(); }
		}

		public override Type BaseType
		{
			get { throw new NotImplementedException(); }
		}

		public override string FullName
		{
			get { throw new NotImplementedException(); }
		}

		public override Type GetElementType()
		{
			return type;
		}

		protected override TypeAttributes GetAttributeFlagsImpl()
		{
			throw new NotImplementedException();
		}

		protected override MethodInfo GetMethodImpl(string name, BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
		{
			throw new NotImplementedException();
		}

		protected override bool HasElementTypeImpl()
		{
			return true;
		}

		protected override bool IsArrayImpl()
		{
			return false;
		}

		protected override bool IsByRefImpl()
		{
			return false;
		}

		protected override bool IsPointerImpl()
		{
			return true;
		}

#if NET_4_0
		public override Assembly Assembly
		{
			get { return type.Assembly; }
		}

		public override Module Module
		{
			get { return type.Module; }
		}
#endif

		internal override ModuleBuilder ModuleBuilder
		{
			get { return type.ModuleBuilder; }
		}
	}
}
@


1.12
log
@- Implemented GetConstructorImpl for TypeBuilder and BakedType.
- Added Equals/GetHashCode to ConstructorBuilder, because GetConstructorImpl will return a new instance.
@
text
@@


1.11
log
@Added .NET 4.0 methods to ByRefType and PointerType.
@
text
@d65 1
a65 1
		protected sealed override ConstructorInfo GetConstructorImpl(BindingFlags bindingAttr, Binder binder, CallingConventions callConvention, Type[] types, ParameterModifier[] modifiers)
@


1.10
log
@Implemented TypeBuilder.MakePointerType().
@
text
@d334 12
d411 12
@


1.9
log
@Implemented MakeByRefType().
@
text
@d158 1
a158 1
		protected sealed override bool IsPointerImpl()
d243 5
d339 65
@


1.8
log
@When building for .NET 4.0 we can derived ModuleBuilder from Module and AssemblyBuilder from Assembly.
@
text
@d238 5
d274 60
@


1.7
log
@Preparing for .NET 4.0:
Use ReferenceEquals to bypass Type.op_Equals() introduced in .NET 4.0.
@
text
@d31 6
d41 1
d168 6
d178 1
@


1.6
log
@Added workaround for Mono bug.
@
text
@d235 1
a235 1
			return other != null && this.UnderlyingSystemType == other.UnderlyingSystemType;
d242 1
a242 1
			if (underlying == this)
@


1.5
log
@- Added support for using a generic type parameters.
- Fixed handling of open generic type members.
- Fixed TypeSpec / Metadata token confusion.
@
text
@d248 6
@


1.4
log
@Workaround for Mono bug 467229.
@
text
@d219 9
a227 1
		public abstract override int MetadataToken { get; }
@


1.3
log
@Implemented GetNestedTypes() on BakedType.
@
text
@d222 18
@


1.2
log
@Implemented Type.MetadataToken for our types, instead of the internal GetToken() method.
@
text
@d120 1
a120 1
		public sealed override Type[] GetNestedTypes(BindingFlags bindingAttr)
@


1.1
log
@New Ref.Emit implementation.
@
text
@d219 2
a221 2

		internal abstract TypeToken GetToken();
@

