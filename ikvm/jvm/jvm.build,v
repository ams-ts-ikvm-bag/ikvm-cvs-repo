head	1.17;
access;
symbols
	v8_1_5717_0:1.17
	v8_1:1.17.0.8
	v8_0_5449_1:1.17
	v8_0_5449_0:1.17
	v8_0:1.17.0.6
	v7_4_5196_0:1.17
	v7_4:1.17.0.4
	v7_3:1.17.0.2
	v7_2_4630_6:1.13
	v7_2_4630_5:1.13
	v7_2_4630_4:1.13
	v7_2_4630_3:1.13
	v7_2_4630_2:1.13
	v0_46_0_4:1.11
	v7_2_4630_1:1.13
	v7_2:1.13.0.4
	v7_1_4532_2:1.13
	v7_1_4532_1:1.13
	v7_1_4532_0:1.13
	v7_1:1.13.0.2
	v7_0_4335_3:1.11
	v7_0_4335_2:1.11
	v7_0_4335_1:1.11
	v0_46_0_2:1.11
	v7_0_4335_0:1.11
	v7_0:1.11.0.4
	v0_40_0_6:1.9
	v0_40_0_5:1.9
	v0_46_0_1:1.11
	v0_46_0_0:1.11
	v0_46:1.11.0.2
	v0_36_0_14:1.7
	v0_44_0_6:1.10.4.1
	v0_44_0_5:1.10
	v0_44_0_4:1.10
	v0_44_0_3:1.10
	v0_44_0_2:1.10
	v0_42_0_7:1.10
	v0_44_0_1:1.10
	v0_44_0_0:1.10
	v0_44:1.10.0.4
	v0_42_0_6:1.10
	v0_42_0_5:1.10
	v0_42_0_4:1.10
	v0_42_0_3:1.10
	v0_42_0_2:1.10
	v0_42_0_1:1.10
	v0_42_0_0:1.10
	v0_42:1.10.0.2
	v0_40_0_3:1.9
	v0_40_0_2:1.9
	v0_40_0_1:1.9
	v0_40_0_0:1.9
	v0_40:1.9.0.2
	v0_36_0_13:1.7
	v0_38_0_1:1.8
	v0_38_0_0:1.8
	v0_38:1.8.0.2
	v0_36_0_9:1.7
	v0_36_0_7:1.7
	v0_36_0_5:1.7
	v0_36_0_4:1.7
	v0_36_0_3:1.7
	v0_36_0_2:1.7
	v0_36_0_1:1.7
	v0_36_0_0:1.7
	v0_36:1.7.0.2
	v0_34_0_3:1.6
	v0_34_0_2:1.6
	v0_34_0_1:1.6
	v0_34_0_0:1.6
	v0_34:1.6.0.2
	v0_32:1.5.0.4
	v0_32_0_0:1.5
	v0_30:1.5.0.2
	v0_28_0_0:1.5
	v0_26_0_1:1.5
	v0_26_0_0:1.5
	v0_24_0_1:1.5
	v0_24_0_0:1.5
	v0_22_0_0:1.5
	v0_20_0_0:1.5
	v0_18_0_0:1.5
	v0_16_0_0:1.5
	v0_14_0_1:1.5
	v0_14_0_0:1.5
	v0_12_0_0:1.5
	v0_10_0_1:1.4
	v0_10_0_0:1.4;
locks; strict;
comment	@# @;


1.17
date	2013.02.27.16.23.19;	author jfrijters;	state Exp;
branches;
next	1.16;

1.16
date	2013.02.07.12.11.02;	author jfrijters;	state Exp;
branches;
next	1.15;

1.15
date	2013.01.14.13.07.27;	author jfrijters;	state Exp;
branches;
next	1.14;

1.14
date	2013.01.12.14.27.12;	author jfrijters;	state Exp;
branches;
next	1.13;

1.13
date	2012.03.29.12.08.23;	author jfrijters;	state Exp;
branches;
next	1.12;

1.12
date	2012.01.17.14.43.11;	author jfrijters;	state Exp;
branches;
next	1.11;

1.11
date	2010.08.20.05.35.49;	author jfrijters;	state Exp;
branches;
next	1.10;

1.10
date	2009.06.26.06.53.09;	author jfrijters;	state Exp;
branches
	1.10.4.1;
next	1.9;

1.9
date	2008.11.19.05.42.47;	author jfrijters;	state Exp;
branches;
next	1.8;

1.8
date	2007.12.18.09.56.11;	author jfrijters;	state Exp;
branches;
next	1.7;

1.7
date	2007.05.24.12.16.34;	author jfrijters;	state Exp;
branches;
next	1.6;

1.6
date	2007.03.12.14.18.46;	author jfrijters;	state Exp;
branches;
next	1.5;

1.5
date	2005.02.02.15.12.03;	author jfrijters;	state Exp;
branches;
next	1.4;

1.4
date	2005.01.07.09.34.20;	author jfrijters;	state Exp;
branches;
next	1.3;

1.3
date	2004.12.07.09.53.42;	author jfrijters;	state Exp;
branches;
next	1.2;

1.2
date	2004.12.03.07.57.49;	author jfrijters;	state Exp;
branches;
next	1.1;

1.1
date	2004.12.02.08.43.06;	author jfrijters;	state Exp;
branches;
next	;

1.10.4.1
date	2010.10.22.06.56.11;	author jfrijters;	state Exp;
branches;
next	;


desc
@@


1.17
log
@Added license headers to build scripts.
@
text
@<?xml version="1.0"?>
<!--
  Copyright (C) 2002-2013 Jeroen Frijters

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.

  Jeroen Frijters
  jeroen@@frijters.net
  
-->
<project name="JVM" default="JVM">
    <include buildfile="../ikvm.include" />
    <target name="version">
        <property name="VERSION" value="${assemblyname::get-version(assemblyname::get-assembly-name(path::combine(project::get-base-directory(), '../bin/IKVM.Runtime.dll')))}" />
    </target>
    <target name="implib">
        <csc target="exe" output="../tools/implib.exe" rebuild="true">
            <sources>
                <include name="../tools/implib.cs" />
            </sources>
            <references>
                <include name="../bin/IKVM.Reflection.dll" asis="true" />
            </references>
        </csc>
        <copy file="../bin/IKVM.Reflection.dll" tofile="../tools/IKVM.Reflection.dll" overwrite="true" />
    </target>
    <target name="JVM" depends="version implib">
        <property name="arch" value="x86" />
        <call target="RunImpLib" />
        <property name="arch" value="x64" />
        <call target="RunImpLib" />
    </target>
    <target name="RunImpLib">
        <property name="signoption" value="" overwrite="false" />
        <exec program="../tools/implib.exe" useruntimeengine="true">
            <arg value="jvm.def" />
            <arg value="-out:../bin-${arch}/JVM.DLL" />
            <arg value="-platform:${arch}" />
            <arg value="-r:../bin/IKVM.Runtime.JNI.dll" />
            <arg value="-product:IKVM.NET" />
            <arg value="-company:Jeroen Frijters" />
            <arg value="-copyright:Copyright (C) 2002-2013 Jeroen Frijters" />
            <arg value="-description:IKVM.NET JVM for .NET" />
            <arg value="-version:${VERSION}" />
            <arg value="${signoption}" />
        </exec>
    </target>
</project>
@


1.16
log
@Removed resource compiler dependency from JVM.DLL build.
@
text
@d2 23
@


1.15
log
@Always rebuild implib.
@
text
@a5 8
        <copy file="jvm.rc.in" tofile="jvm.rc" outputencoding="ascii" overwrite="true">
            <filterchain>
                <replacetokens>
                    <token key="VERSIONLIST" value="${string::replace(property::get-value('VERSION'), '.', ',')}" />
                    <token key="VERSION" value="${VERSION}" />
                </replacetokens>
            </filterchain>
        </copy>
d18 1
a18 5
    <target name="JVM" depends="version implib" if="${not string::starts-with(framework::get-target-framework(), 'mono')}">
        <if test="${property::exists('rc')}">
            <exec program="${rc}" commandline="jvm.rc" />
        </if>
        <rc if="${not property::exists('rc')}" rcfile="jvm.rc" output="jvm.RES" />
d31 5
a35 1
            <arg value="-win32res:jvm.RES" />
@


1.14
log
@Replace ilasm usage to generate JVM.DLL with a custom tool.
@
text
@d16 1
a16 1
        <csc target="exe" output="../tools/implib.exe">
@


1.13
log
@If we can't find the resource compiler, fall back to the NAnt <rc /> task.
@
text
@d15 12
a26 2
    <target name="JVM" depends="version" if="${property::exists('ilasm') and (not string::starts-with(framework::get-target-framework(), 'mono'))}">
        <property overwrite="false" name="ilasm_signoption" value="" />
d30 16
a45 5
        <rc if="${not property::exists('rc')}" rcfile="jvm.rc" output="jvm.res" />
        <exec program="../tools/asmref.exe" useruntimeengine="true" commandline="mscorlib ../bin/IKVM.Runtime.JNI.dll" output="jvm_h.il" />
        <echo message=".assembly JVM { .ver ${string::replace(property::get-value('VERSION'), '.', ':')} }" file="jvm_h.il" append="true" />
        <exec program="${ilasm}" commandline="           /dll ${ilasm_signoption} /out:../bin-x86/JVM.DLL /RESOURCE:jvm.res jvm_h.il jvm32.il JVM.il" />
        <exec program="${ilasm}" commandline="/pe64 /x64 /dll ${ilasm_signoption} /out:../bin-x64/JVM.DLL /RESOURCE:jvm.res jvm_h.il jvm64.il JVM.il" />
@


1.12
log
@Add version info resource to JVM.DLL. Modified version of patch #3472413.
@
text
@d17 4
a20 1
        <exec program="${rc}" commandline="jvm.rc" />
@


1.11
log
@- Removed the requirement to have peverify and ilasm in the PATH. They are now located automatically and if they are not found, the corresponding build steps are skipped.
- Added "managed" and "native" targets to ikvm.build to allow building just the managed parts (that don't require a C compiler to be installed).
@
text
@d4 1
a4 1
    <target name="JVM" if="${property::exists('ilasm') and (not string::starts-with(framework::get-target-framework(), 'mono'))}">
d6 10
d17 1
d20 2
a21 2
        <exec program="${ilasm}" commandline="           /dll ${ilasm_signoption} /out:../bin-x86/JVM.DLL jvm_h.il jvm32.il JVM.il" />
        <exec program="${ilasm}" commandline="/pe64 /x64 /dll ${ilasm_signoption} /out:../bin-x64/JVM.DLL jvm_h.il jvm64.il JVM.il" />
@


1.10
log
@Changed build to put architecture specific binaries in bin-x86 or bin-x64 directory. Note that the gcc build of libikvm-native.so still goes to bin.
@
text
@d3 2
a4 1
    <target name="JVM">
d9 2
a10 2
        <exec program="ilasm" commandline="           /dll ${ilasm_signoption} /out:../bin-x86/JVM.DLL jvm_h.il jvm32.il JVM.il" />
        <exec program="ilasm" commandline="/pe64 /x64 /dll ${ilasm_signoption} /out:../bin-x64/JVM.DLL jvm_h.il jvm64.il JVM.il" />
@


1.10.4.1
log
@Backported build improvements.
@
text
@d3 1
a3 2
    <include buildfile="../ikvm.include" />
    <target name="JVM" if="${property::exists('ilasm') and (not string::starts-with(framework::get-target-framework(), 'mono'))}">
d8 2
a9 2
        <exec program="${ilasm}" commandline="           /dll ${ilasm_signoption} /out:../bin-x86/JVM.DLL jvm_h.il jvm32.il JVM.il" />
        <exec program="${ilasm}" commandline="/pe64 /x64 /dll ${ilasm_signoption} /out:../bin-x64/JVM.DLL jvm_h.il jvm64.il JVM.il" />
@


1.9
log
@Generate assembly versions for IKVM.OpenJDK.ClassLibrary.dll and JVM.dll automatically based on IKVM.Runtime.dll version.
@
text
@d8 2
a9 6
        <if test="${not string::contains(environment::get-variable('FrameworkDir'), 'Framework64')}">
            <exec program="ilasm" commandline="/dll ${ilasm_signoption} /out:../bin/JVM.DLL jvm_h.il jvm32.il JVM.il" />
        </if>
        <if test="${string::contains(environment::get-variable('FrameworkDir'), 'Framework64')}">
            <exec program="ilasm" commandline="/pe64 /x64 /dll ${ilasm_signoption} /out:../bin/JVM.DLL jvm_h.il jvm64.il JVM.il" />
        </if>
@


1.8
log
@Moved JNI implementation into a separate assembly (IKVM.Runtime.JNI.dll) to make IKVM.Runtime.dll verifiable.
@
text
@d4 1
d7 1
@


1.7
log
@Removed no longer needed IKVM.GNU.Classpath.dll dependency.
@
text
@d5 1
a5 1
        <exec program="../tools/asmref.exe" useruntimeengine="true" commandline="mscorlib ../bin/IKVM.Runtime.dll" output="jvm_h.il" />
@


1.6
log
@Added HACK to detect x64 and build accordingly.
@
text
@d5 1
a5 1
        <exec program="../tools/asmref.exe" useruntimeengine="true" commandline="mscorlib ../bin/IKVM.Runtime.dll ../bin/IKVM.GNU.Classpath.dll" output="jvm_h.il" />
@


1.5
log
@*** empty log message ***
@
text
@d6 6
a11 4
        <exec program="ilasm" commandline="/dll ${ilasm_signoption} /out:../bin/JVM.DLL jvm_h.il jvm32.il JVM.il" />
<!--
        <exec program="ilasm" commandline="/x64 /dll ${ilasm_signoption} /out:../bin/JVM.DLL jvm_h.il jvm64.il JVM.il" />
-->
@


1.4
log
@*** empty log message ***
@
text
@d6 4
a9 1
        <exec program="ilasm" commandline="/dll ${ilasm_signoption} /out:../bin/JVM.DLL jvm_h.il JVM.il" />
@


1.3
log
@*** empty log message ***
@
text
@d4 1
d6 1
a6 1
        <exec program="ilasm" commandline="/dll /out:../bin/JVM.DLL jvm_h.il JVM.il" />
@


1.2
log
@*** empty log message ***
@
text
@d4 2
a5 3
        <exec program="../tools/asmref.exe" useruntimeengine="true" commandline="mscorlib" output="jvm_h1.il" />
        <exec program="../tools/asmref.exe" useruntimeengine="true" commandline="../bin/IKVM.Runtime.dll" output="jvm_h2.il" />
        <exec program="ilasm" commandline="/dll /out:../bin/JVM.DLL jvm_h1.il jvm_h2.il JVM.il" />
@


1.1
log
@*** empty log message ***
@
text
@d4 2
a5 2
        <exec program="../tools/asmref" useruntimeengine="true" commandline="mscorlib" output="jvm_h1.il" />
        <exec program="../tools/asmref" useruntimeengine="true" commandline="../bin/IKVM.Runtime.dll" output="jvm_h2.il" />
@

